/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.SimulateEvent;

import com.fasterxml.jackson.core.type.TypeReference;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-07T07:10:38.624109217Z[Atlantic/Reykjavik]")
public class SimulateEventApi {


    private ApiClient apiClient;

    public SimulateEventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SimulateEventApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Simulate webhook event
     * Simulates a webhook event. In the JSON request body, specify a sample payload.&lt;br&gt;You need to subscribe to the following webhook events for Pay upon Invoice:&lt;br&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Event&lt;/th&gt;&lt;th&gt;Trigger&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYMENT.CAPTURE.COMPLETED&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A payment capture completes.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYMENT.CAPTURE.DENIED&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A payment capture is denied.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;CHECKOUT.PAYMENT-APPROVAL.REVERSED&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal reverses a payment capture.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     *
     * @param simulateEvent (optional)
     * @return Event
     * @throws ApiException if fails to make API call
     */
    public Event simulateEventPost(SimulateEvent simulateEvent) throws ApiException {
        return this.simulateEventPost(simulateEvent, Collections.emptyMap());
    }


    /**
     * Simulate webhook event
     * Simulates a webhook event. In the JSON request body, specify a sample payload.&lt;br&gt;You need to subscribe to the following webhook events for Pay upon Invoice:&lt;br&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Event&lt;/th&gt;&lt;th&gt;Trigger&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYMENT.CAPTURE.COMPLETED&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A payment capture completes.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYMENT.CAPTURE.DENIED&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A payment capture is denied.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;CHECKOUT.PAYMENT-APPROVAL.REVERSED&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal reverses a payment capture.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     *
     * @param simulateEvent     (optional)
     * @param additionalHeaders additionalHeaders for this call
     * @return Event
     * @throws ApiException if fails to make API call
     */
    public Event simulateEventPost(SimulateEvent simulateEvent, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = simulateEvent;

        // create path and map variables
        String localVarPath = "/v1/notifications/simulate-event";

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<Event> localVarReturnType = new TypeReference<Event>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

}
