/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.model.EventTypeList;
import org.openapitools.client.model.Patch;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.WebhookList;

import com.fasterxml.jackson.core.type.TypeReference;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-07T07:10:38.624109217Z[Atlantic/Reykjavik]")
public class WebhooksApi {


    private ApiClient apiClient;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * List event subscriptions for webhook
     * Lists event subscriptions for a webhook, by ID.
     *
     * @param webhookId The ID of the webhook for which to list subscriptions. (required)
     * @return EventTypeList
     * @throws ApiException if fails to make API call
     */
    public EventTypeList eventTypesList(String webhookId) throws ApiException {
        return this.eventTypesList(webhookId, Collections.emptyMap());
    }


    /**
     * List event subscriptions for webhook
     * Lists event subscriptions for a webhook, by ID.
     *
     * @param webhookId         The ID of the webhook for which to list subscriptions. (required)
     * @param additionalHeaders additionalHeaders for this call
     * @return EventTypeList
     * @throws ApiException if fails to make API call
     */
    public EventTypeList eventTypesList(String webhookId, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException(400, "Missing the required parameter 'webhookId' when calling eventTypesList");
        }

        // create path and map variables
        String localVarPath = "/v1/notifications/webhooks/{webhook_id}/event-types"
                .replaceAll("\\{" + "webhook_id" + "\\}", apiClient.escapeString(webhookId.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<EventTypeList> localVarReturnType = new TypeReference<EventTypeList>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * Delete webhook
     * Deletes a webhook, by ID.
     *
     * @param webhookId The ID of the webhook for which to list subscriptions. (required)
     * @throws ApiException if fails to make API call
     */
    public void webhooksDelete(String webhookId) throws ApiException {
        this.webhooksDelete(webhookId, Collections.emptyMap());
    }


    /**
     * Delete webhook
     * Deletes a webhook, by ID.
     *
     * @param webhookId         The ID of the webhook for which to list subscriptions. (required)
     * @param additionalHeaders additionalHeaders for this call
     * @throws ApiException if fails to make API call
     */
    public void webhooksDelete(String webhookId, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException(400, "Missing the required parameter 'webhookId' when calling webhooksDelete");
        }

        // create path and map variables
        String localVarPath = "/v1/notifications/webhooks/{webhook_id}"
                .replaceAll("\\{" + "webhook_id" + "\\}", apiClient.escapeString(webhookId.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        apiClient.invokeAPI(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                null
        );
    }

    /**
     * Show webhook details
     * Shows details for a webhook, by ID.
     *
     * @param webhookId The ID of the webhook for which to list subscriptions. (required)
     * @return Webhook
     * @throws ApiException if fails to make API call
     */
    public Webhook webhooksGet(String webhookId) throws ApiException {
        return this.webhooksGet(webhookId, Collections.emptyMap());
    }


    /**
     * Show webhook details
     * Shows details for a webhook, by ID.
     *
     * @param webhookId         The ID of the webhook for which to list subscriptions. (required)
     * @param additionalHeaders additionalHeaders for this call
     * @return Webhook
     * @throws ApiException if fails to make API call
     */
    public Webhook webhooksGet(String webhookId, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException(400, "Missing the required parameter 'webhookId' when calling webhooksGet");
        }

        // create path and map variables
        String localVarPath = "/v1/notifications/webhooks/{webhook_id}"
                .replaceAll("\\{" + "webhook_id" + "\\}", apiClient.escapeString(webhookId.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * List webhooks
     * Lists webhooks for an app.
     *
     * @param anchorType Filters the webhooks in the response by an &#x60;anchor_id&#x60; entity type. (optional, default to APPLICATION)
     * @return WebhookList
     * @throws ApiException if fails to make API call
     */
    public WebhookList webhooksList(String anchorType) throws ApiException {
        return this.webhooksList(anchorType, Collections.emptyMap());
    }


    /**
     * List webhooks
     * Lists webhooks for an app.
     *
     * @param anchorType        Filters the webhooks in the response by an &#x60;anchor_id&#x60; entity type. (optional, default to APPLICATION)
     * @param additionalHeaders additionalHeaders for this call
     * @return WebhookList
     * @throws ApiException if fails to make API call
     */
    public WebhookList webhooksList(String anchorType, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/notifications/webhooks";

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPair("anchor_type", anchorType));

        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<WebhookList> localVarReturnType = new TypeReference<WebhookList>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * Create webhook
     * Subscribes your webhook listener to events.
     *
     * @param webhook (optional)
     * @return Webhook
     * @throws ApiException if fails to make API call
     */
    public Webhook webhooksPost(Webhook webhook) throws ApiException {
        return this.webhooksPost(webhook, Collections.emptyMap());
    }


    /**
     * Create webhook
     * Subscribes your webhook listener to events.
     *
     * @param webhook           (optional)
     * @param additionalHeaders additionalHeaders for this call
     * @return Webhook
     * @throws ApiException if fails to make API call
     */
    public Webhook webhooksPost(Webhook webhook, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = webhook;

        // create path and map variables
        String localVarPath = "/v1/notifications/webhooks";

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * Update webhook
     * Updates a webhook to replace webhook fields with new values. Supports only the &#x60;replace&#x60; operation. Pass a &#x60;json_patch&#x60; object with &#x60;replace&#x60; operation and &#x60;path&#x60;, which is &#x60;/url&#x60; for a URL or &#x60;/event_types&#x60; for events. The &#x60;value&#x60; is either the URL or a list of events.
     *
     * @param webhookId The ID of the webhook for which to list subscriptions. (required)
     * @param patch     (optional
     * @return Webhook
     * @throws ApiException if fails to make API call
     */
    public Webhook webhooksUpdate(String webhookId, List<Patch> patch) throws ApiException {
        return this.webhooksUpdate(webhookId, patch, Collections.emptyMap());
    }


    /**
     * Update webhook
     * Updates a webhook to replace webhook fields with new values. Supports only the &#x60;replace&#x60; operation. Pass a &#x60;json_patch&#x60; object with &#x60;replace&#x60; operation and &#x60;path&#x60;, which is &#x60;/url&#x60; for a URL or &#x60;/event_types&#x60; for events. The &#x60;value&#x60; is either the URL or a list of events.
     *
     * @param webhookId         The ID of the webhook for which to list subscriptions. (required)
     * @param patch             (optional
     * @param additionalHeaders additionalHeaders for this call
     * @return Webhook
     * @throws ApiException if fails to make API call
     */
    public Webhook webhooksUpdate(String webhookId, List<Patch> patch, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = patch;

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException(400, "Missing the required parameter 'webhookId' when calling webhooksUpdate");
        }

        // create path and map variables
        String localVarPath = "/v1/notifications/webhooks/{webhook_id}"
                .replaceAll("\\{" + "webhook_id" + "\\}", apiClient.escapeString(webhookId.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

}
