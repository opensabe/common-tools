/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.AuthorizationsGet403Response;
import org.openapitools.client.model.AuthorizationsGet404Response;
import org.openapitools.client.model.AuthorizationsVoid401Response;
import org.openapitools.client.model.AuthorizationsVoid409Response;
import org.openapitools.client.model.Capture2;
import org.openapitools.client.model.CapturesRefund400Response;
import org.openapitools.client.model.CapturesRefund422Response;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.ErrorDefault;
import org.openapitools.client.model.Refund;
import org.openapitools.client.model.RefundRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class CapturesApi {


  private ApiClient apiClient;

  public CapturesApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CapturesApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Show captured payment details
   * Shows details for a captured payment, by ID.
   * @param captureId The PayPal-generated ID for the captured payment to refund. (required)
   * @return Capture2
   * @throws ApiException if fails to make API call
   */
  public Capture2 capturesGet(String captureId) throws ApiException {
    return this.capturesGet(captureId, Collections.emptyMap());
  }


  /**
   * Show captured payment details
   * Shows details for a captured payment, by ID.
   * @param captureId The PayPal-generated ID for the captured payment to refund. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Capture2
   * @throws ApiException if fails to make API call
   */
  public Capture2 capturesGet(String captureId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'captureId' is set
    if (captureId == null) {
      throw new ApiException(400, "Missing the required parameter 'captureId' when calling capturesGet");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments/captures/{capture_id}"
      .replaceAll("\\{" + "capture_id" + "\\}", apiClient.escapeString(captureId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Oauth2" };

    TypeReference<Capture2> localVarReturnType = new TypeReference<Capture2>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Refund captured payment
   * Refunds a captured payment, by ID. For a full refund, include an empty payload in the JSON request body. For a partial refund, include an &lt;code&gt;amount&lt;/code&gt; object in the JSON request body.
   * @param captureId The PayPal-generated ID for the captured payment to refund. (required)
   * @param payPalRequestId The server stores keys for 45 days. (optional)
   * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
   * @param payPalAuthAssertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.&lt;/blockquote&gt; (optional)
   * @param refundRequest  (optional)
   * @return Refund
   * @throws ApiException if fails to make API call
   */
  public Refund capturesRefund(String captureId, String payPalRequestId, String prefer, String payPalAuthAssertion, RefundRequest refundRequest) throws ApiException {
    return this.capturesRefund(captureId, payPalRequestId, prefer, payPalAuthAssertion, refundRequest, Collections.emptyMap());
  }


  /**
   * Refund captured payment
   * Refunds a captured payment, by ID. For a full refund, include an empty payload in the JSON request body. For a partial refund, include an &lt;code&gt;amount&lt;/code&gt; object in the JSON request body.
   * @param captureId The PayPal-generated ID for the captured payment to refund. (required)
   * @param payPalRequestId The server stores keys for 45 days. (optional)
   * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
   * @param payPalAuthAssertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.&lt;/blockquote&gt; (optional)
   * @param refundRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Refund
   * @throws ApiException if fails to make API call
   */
  public Refund capturesRefund(String captureId, String payPalRequestId, String prefer, String payPalAuthAssertion, RefundRequest refundRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = refundRequest;
    
    // verify the required parameter 'captureId' is set
    if (captureId == null) {
      throw new ApiException(400, "Missing the required parameter 'captureId' when calling capturesRefund");
    }
    
    // create path and map variables
    String localVarPath = "/v2/payments/captures/{capture_id}/refund"
      .replaceAll("\\{" + "capture_id" + "\\}", apiClient.escapeString(captureId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (payPalRequestId != null)
      localVarHeaderParams.put("PayPal-Request-Id", apiClient.parameterToString(payPalRequestId));
if (prefer != null)
      localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));
if (payPalAuthAssertion != null)
      localVarHeaderParams.put("PayPal-Auth-Assertion", apiClient.parameterToString(payPalAuthAssertion));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Oauth2" };

    TypeReference<Refund> localVarReturnType = new TypeReference<Refund>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
