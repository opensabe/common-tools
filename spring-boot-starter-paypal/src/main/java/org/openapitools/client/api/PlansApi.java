/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.model.Patch;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.PlanCollection;
import org.openapitools.client.model.PlanRequestPOST;
import org.openapitools.client.model.UpdatePricingSchemesListRequest;

import com.fasterxml.jackson.core.type.TypeReference;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class PlansApi {


    private ApiClient apiClient;

    public PlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlansApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Activate plan
     * Activates a plan, by ID.
     *
     * @param id The ID of the subscription. (required)
     * @throws ApiException if fails to make API call
     */
    public void plansActivate(String id) throws ApiException {
        this.plansActivate(id, Collections.emptyMap());
    }


    /**
     * Activate plan
     * Activates a plan, by ID.
     *
     * @param id                The ID of the subscription. (required)
     * @param additionalHeaders additionalHeaders for this call
     * @throws ApiException if fails to make API call
     */
    public void plansActivate(String id, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(400, "Missing the required parameter 'id' when calling plansActivate");
        }

        // create path and map variables
        String localVarPath = "/v1/billing/plans/{id}/activate"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        apiClient.invokeAPI(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                null
        );
    }

    /**
     * Create plan
     * Creates a plan that defines pricing and billing cycle details for subscriptions.
     *
     * @param prefer          The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
     * @param payPalRequestId The server stores keys for 72 hours. (optional)
     * @param planRequestPOST (optional)
     * @return Plan
     * @throws ApiException if fails to make API call
     */
    public Plan plansCreate(String prefer, String payPalRequestId, PlanRequestPOST planRequestPOST) throws ApiException {
        return this.plansCreate(prefer, payPalRequestId, planRequestPOST, Collections.emptyMap());
    }


    /**
     * Create plan
     * Creates a plan that defines pricing and billing cycle details for subscriptions.
     *
     * @param prefer            The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
     * @param payPalRequestId   The server stores keys for 72 hours. (optional)
     * @param planRequestPOST   (optional)
     * @param additionalHeaders additionalHeaders for this call
     * @return Plan
     * @throws ApiException if fails to make API call
     */
    public Plan plansCreate(String prefer, String payPalRequestId, PlanRequestPOST planRequestPOST, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = planRequestPOST;

        // create path and map variables
        String localVarPath = "/v1/billing/plans";

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefer != null)
            localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));
        if (payPalRequestId != null)
            localVarHeaderParams.put("PayPal-Request-Id", apiClient.parameterToString(payPalRequestId));

        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<Plan> localVarReturnType = new TypeReference<Plan>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * Deactivate plan
     * Deactivates a plan, by ID.
     *
     * @param id The ID of the subscription. (required)
     * @throws ApiException if fails to make API call
     */
    public void plansDeactivate(String id) throws ApiException {
        this.plansDeactivate(id, Collections.emptyMap());
    }


    /**
     * Deactivate plan
     * Deactivates a plan, by ID.
     *
     * @param id                The ID of the subscription. (required)
     * @param additionalHeaders additionalHeaders for this call
     * @throws ApiException if fails to make API call
     */
    public void plansDeactivate(String id, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(400, "Missing the required parameter 'id' when calling plansDeactivate");
        }

        // create path and map variables
        String localVarPath = "/v1/billing/plans/{id}/deactivate"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        apiClient.invokeAPI(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                null
        );
    }

    /**
     * Show plan details
     * Shows details for a plan, by ID.
     *
     * @param id The ID of the subscription. (required)
     * @return Plan
     * @throws ApiException if fails to make API call
     */
    public Plan plansGet(String id) throws ApiException {
        return this.plansGet(id, Collections.emptyMap());
    }


    /**
     * Show plan details
     * Shows details for a plan, by ID.
     *
     * @param id                The ID of the subscription. (required)
     * @param additionalHeaders additionalHeaders for this call
     * @return Plan
     * @throws ApiException if fails to make API call
     */
    public Plan plansGet(String id, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(400, "Missing the required parameter 'id' when calling plansGet");
        }

        // create path and map variables
        String localVarPath = "/v1/billing/plans/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<Plan> localVarReturnType = new TypeReference<Plan>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * List plans
     * Lists billing plans.
     *
     * @param prefer        The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
     * @param productId     Filters the response by a Product ID. (optional)
     * @param planIds       Filters the response by list of plan IDs. Filter supports upto 10 plan IDs. (optional)
     * @param pageSize      The number of items to return in the response. (optional, default to 10)
     * @param page          A non-zero integer which is the start index of the entire list of items to return in the response. The combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 1)
     * @param totalRequired Indicates whether to show the total count in the response. (optional, default to false)
     * @return PlanCollection
     * @throws ApiException if fails to make API call
     */
    public PlanCollection plansList(String prefer, String productId, String planIds, Integer pageSize, Integer page, Boolean totalRequired) throws ApiException {
        return this.plansList(prefer, productId, planIds, pageSize, page, totalRequired, Collections.emptyMap());
    }


    /**
     * List plans
     * Lists billing plans.
     *
     * @param prefer            The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
     * @param productId         Filters the response by a Product ID. (optional)
     * @param planIds           Filters the response by list of plan IDs. Filter supports upto 10 plan IDs. (optional)
     * @param pageSize          The number of items to return in the response. (optional, default to 10)
     * @param page              A non-zero integer which is the start index of the entire list of items to return in the response. The combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 1)
     * @param totalRequired     Indicates whether to show the total count in the response. (optional, default to false)
     * @param additionalHeaders additionalHeaders for this call
     * @return PlanCollection
     * @throws ApiException if fails to make API call
     */
    public PlanCollection plansList(String prefer, String productId, String planIds, Integer pageSize, Integer page, Boolean totalRequired, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/billing/plans";

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPair("product_id", productId));
        localVarQueryParams.addAll(apiClient.parameterToPair("plan_ids", planIds));
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        localVarQueryParams.addAll(apiClient.parameterToPair("total_required", totalRequired));
        if (prefer != null)
            localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        TypeReference<PlanCollection> localVarReturnType = new TypeReference<PlanCollection>() {
        };
        return apiClient.invokeAPI(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                localVarReturnType
        );
    }

    /**
     * Update plan
     * Updates a plan with the &#x60;CREATED&#x60; or &#x60;ACTIVE&#x60; status. For an &#x60;INACTIVE&#x60; plan, you can make only status updates.&lt;br/&gt;You can patch these attributes and objects:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Attribute or object&lt;/th&gt;&lt;th&gt;Operations&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.auto_bill_outstanding&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;taxes.percentage&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.payment_failure_threshold&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.setup_fee&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.setup_fee_failure_action&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     *
     * @param id    The ID of the subscription. (required)
     * @param patch (optional
     * @throws ApiException if fails to make API call
     */
    public void plansPatch(String id, List<Patch> patch) throws ApiException {
        this.plansPatch(id, patch, Collections.emptyMap());
    }


    /**
     * Update plan
     * Updates a plan with the &#x60;CREATED&#x60; or &#x60;ACTIVE&#x60; status. For an &#x60;INACTIVE&#x60; plan, you can make only status updates.&lt;br/&gt;You can patch these attributes and objects:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Attribute or object&lt;/th&gt;&lt;th&gt;Operations&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.auto_bill_outstanding&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;taxes.percentage&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.payment_failure_threshold&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.setup_fee&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payment_preferences.setup_fee_failure_action&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     *
     * @param id                The ID of the subscription. (required)
     * @param patch             (optional
     * @param additionalHeaders additionalHeaders for this call
     * @throws ApiException if fails to make API call
     */
    public void plansPatch(String id, List<Patch> patch, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = patch;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(400, "Missing the required parameter 'id' when calling plansPatch");
        }

        // create path and map variables
        String localVarPath = "/v1/billing/plans/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        apiClient.invokeAPI(
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                null
        );
    }

    /**
     * Update pricing
     * Updates pricing for a plan. For example, you can update a regular billing cycle from $5 per month to $7 per month.
     *
     * @param id                              The ID of the subscription. (required)
     * @param updatePricingSchemesListRequest (optional)
     * @throws ApiException if fails to make API call
     */
    public void plansUpdatePricingSchemes(String id, UpdatePricingSchemesListRequest updatePricingSchemesListRequest) throws ApiException {
        this.plansUpdatePricingSchemes(id, updatePricingSchemesListRequest, Collections.emptyMap());
    }


    /**
     * Update pricing
     * Updates pricing for a plan. For example, you can update a regular billing cycle from $5 per month to $7 per month.
     *
     * @param id                              The ID of the subscription. (required)
     * @param updatePricingSchemesListRequest (optional)
     * @param additionalHeaders               additionalHeaders for this call
     * @throws ApiException if fails to make API call
     */
    public void plansUpdatePricingSchemes(String id, UpdatePricingSchemesListRequest updatePricingSchemesListRequest, Map<String, String> additionalHeaders) throws ApiException {
        Object localVarPostBody = updatePricingSchemesListRequest;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(400, "Missing the required parameter 'id' when calling plansUpdatePricingSchemes");
        }

        // create path and map variables
        String localVarPath = "/v1/billing/plans/{id}/update-pricing-schemes"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        localVarHeaderParams.putAll(additionalHeaders);


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"Oauth2"};

        apiClient.invokeAPI(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarQueryStringJoiner.toString(),
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAccept,
                localVarContentType,
                localVarAuthNames,
                null
        );
    }

}
