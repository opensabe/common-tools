/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.DetailedRefund;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.RefundRequest;
import org.openapitools.client.model.Sale;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class SaleApi {


  private ApiClient apiClient;

  public SaleApi() {
    this(Configuration.getDefaultApiClient());
  }

  public SaleApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Show sale details
   * &lt;blockquote&gt;&lt;strong&gt;Deprecation notice:&lt;/strong&gt; The &lt;code&gt;/v1/payments&lt;/code&gt; endpoint is deprecated. Use the &lt;code&gt;/v2/payments&lt;/code&gt; endpoint instead. For details, see &lt;a href&#x3D;\&quot;/docs/checkout/integrate/\&quot;&gt;PayPal Checkout Basic Integration&lt;/a&gt;.&lt;/blockquote&gt;Shows details for a sale, by ID. Returns only sales that were created through the REST API.
   * @param saleId The ID of the sale transaction to refund. (required)
   * @return Sale
   * @throws ApiException if fails to make API call
   */
  public Sale saleGet(String saleId) throws ApiException {
    return this.saleGet(saleId, Collections.emptyMap());
  }


  /**
   * Show sale details
   * &lt;blockquote&gt;&lt;strong&gt;Deprecation notice:&lt;/strong&gt; The &lt;code&gt;/v1/payments&lt;/code&gt; endpoint is deprecated. Use the &lt;code&gt;/v2/payments&lt;/code&gt; endpoint instead. For details, see &lt;a href&#x3D;\&quot;/docs/checkout/integrate/\&quot;&gt;PayPal Checkout Basic Integration&lt;/a&gt;.&lt;/blockquote&gt;Shows details for a sale, by ID. Returns only sales that were created through the REST API.
   * @param saleId The ID of the sale transaction to refund. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Sale
   * @throws ApiException if fails to make API call
   */
  public Sale saleGet(String saleId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'saleId' is set
    if (saleId == null) {
      throw new ApiException(400, "Missing the required parameter 'saleId' when calling saleGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/payments/sale/{sale_id}"
      .replaceAll("\\{" + "sale_id" + "\\}", apiClient.escapeString(saleId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Oauth2" };

    TypeReference<Sale> localVarReturnType = new TypeReference<Sale>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Refund sale
   * &lt;blockquote&gt;&lt;strong&gt;Deprecation notice:&lt;/strong&gt; The &lt;code&gt;/v1/payments&lt;/code&gt; endpoint is deprecated. Use the &lt;code&gt;/v2/payments&lt;/code&gt; endpoint instead. For details, see &lt;a href&#x3D;\&quot;/docs/checkout/integrate/\&quot;&gt;PayPal Checkout Basic Integration&lt;/a&gt;.&lt;/blockquote&gt;Refunds a sale, by ID. For a full refund, do not include the &lt;code&gt;amount&lt;/code&gt; object in the JSON request body. For a partial refund, include an &lt;code&gt;amount&lt;/code&gt; object in the JSON request body.
   * @param saleId The ID of the sale transaction to refund. (required)
   * @param payPalRequestId The server stores keys for 30 days. (optional)
   * @param refundRequest  (optional)
   * @return DetailedRefund
   * @throws ApiException if fails to make API call
   */
  public DetailedRefund saleRefund(String saleId, String payPalRequestId, RefundRequest refundRequest) throws ApiException {
    return this.saleRefund(saleId, payPalRequestId, refundRequest, Collections.emptyMap());
  }


  /**
   * Refund sale
   * &lt;blockquote&gt;&lt;strong&gt;Deprecation notice:&lt;/strong&gt; The &lt;code&gt;/v1/payments&lt;/code&gt; endpoint is deprecated. Use the &lt;code&gt;/v2/payments&lt;/code&gt; endpoint instead. For details, see &lt;a href&#x3D;\&quot;/docs/checkout/integrate/\&quot;&gt;PayPal Checkout Basic Integration&lt;/a&gt;.&lt;/blockquote&gt;Refunds a sale, by ID. For a full refund, do not include the &lt;code&gt;amount&lt;/code&gt; object in the JSON request body. For a partial refund, include an &lt;code&gt;amount&lt;/code&gt; object in the JSON request body.
   * @param saleId The ID of the sale transaction to refund. (required)
   * @param payPalRequestId The server stores keys for 30 days. (optional)
   * @param refundRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return DetailedRefund
   * @throws ApiException if fails to make API call
   */
  public DetailedRefund saleRefund(String saleId, String payPalRequestId, RefundRequest refundRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = refundRequest;
    
    // verify the required parameter 'saleId' is set
    if (saleId == null) {
      throw new ApiException(400, "Missing the required parameter 'saleId' when calling saleRefund");
    }
    
    // create path and map variables
    String localVarPath = "/v1/payments/sale/{sale_id}/refund"
      .replaceAll("\\{" + "sale_id" + "\\}", apiClient.escapeString(saleId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (payPalRequestId != null)
      localVarHeaderParams.put("PayPal-Request-Id", apiClient.parameterToString(payPalRequestId));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "Oauth2" };

    TypeReference<DetailedRefund> localVarReturnType = new TypeReference<DetailedRefund>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
