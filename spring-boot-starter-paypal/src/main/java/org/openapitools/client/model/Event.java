/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.*;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * A webhook event notification.
 */
@JsonPropertyOrder({
  Event.JSON_PROPERTY_ID,
        Event.JSON_PROPERTY_EVENT_VERSION,
  Event.JSON_PROPERTY_CREATE_TIME,
  Event.JSON_PROPERTY_RESOURCE_TYPE,
        Event.JSON_PROPERTY_RESOURCE_VERSION,
  Event.JSON_PROPERTY_EVENT_TYPE,
        Event.JSON_PROPERTY_SUMMARY,

  Event.JSON_PROPERTY_RESOURCE,
  Event.JSON_PROPERTY_LINKS
})
@JsonTypeName("event")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-07T07:10:38.624109217Z[Atlantic/Reykjavik]")
public class Event {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;


  public static final String JSON_PROPERTY_CREATE_TIME = "create_time";

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSX")
  private OffsetDateTime createTime;

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resource_type";
  private String resourceType;

  public static final String JSON_PROPERTY_EVENT_VERSION = "event_version";
  private String eventVersion;

  public static final String JSON_PROPERTY_EVENT_TYPE = "event_type";
  private String eventType;

  public static final String JSON_PROPERTY_SUMMARY = "summary";
  private String summary;

  public static final String JSON_PROPERTY_RESOURCE_VERSION = "resource_version";
  private String resourceVersion;

  public static final String JSON_PROPERTY_RESOURCE = "resource";
  private Map<String, Object> resource = new HashMap<>();

  public static final String JSON_PROPERTY_LINKS = "links";
  private List<LinkDescription> links;

  public Event() {
  }

  @JsonCreator
  public Event(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_CREATE_TIME) OffsetDateTime createTime, 
    @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE) String resourceType, 
    @JsonProperty(JSON_PROPERTY_EVENT_TYPE) String eventType, 
    @JsonProperty(JSON_PROPERTY_SUMMARY) String summary, 
    @JsonProperty(JSON_PROPERTY_RESOURCE) Map<String, Object> resource, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
  ) {
    this();
    this.id = id;
    this.createTime = createTime;
    this.resourceType = resourceType;
    this.eventType = eventType;
    this.summary = summary;
    this.resource = resource;
    this.links = links;
  }

   /**
   * The ID of the webhook event notification.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * The date and time when the webhook event notification was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return createTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreateTime() {
    return createTime;
  }




   /**
   * The name of the resource related to the webhook notification event.
   * @return resourceType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResourceType() {
    return resourceType;
  }




  public Event eventVersion(String eventVersion) {
    
    this.eventVersion = eventVersion;
    return this;
  }

   /**
   * The event version in the webhook notification.
   * @return eventVersion
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventVersion() {
    return eventVersion;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventVersion(String eventVersion) {
    this.eventVersion = eventVersion;
  }


   /**
   * The event that triggered the webhook event notification.
   * @return eventType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventType() {
    return eventType;
  }




   /**
   * A summary description for the event notification.
   * @return summary
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSummary() {
    return summary;
  }




  public Event resourceVersion(String resourceVersion) {
    
    this.resourceVersion = resourceVersion;
    return this;
  }

   /**
   * The resource version in the webhook notification.
   * @return resourceVersion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResourceVersion() {
    return resourceVersion;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceVersion(String resourceVersion) {
    this.resourceVersion = resourceVersion;
  }


   /**
   * The resource that triggered the webhook event notification.
   * @return resource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getResource() {
    return resource;
  }




   /**
   * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @return links
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkDescription> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.id, event.id) &&
        Objects.equals(this.createTime, event.createTime) &&
        Objects.equals(this.resourceType, event.resourceType) &&
        Objects.equals(this.eventVersion, event.eventVersion) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.summary, event.summary) &&
        Objects.equals(this.resourceVersion, event.resourceVersion) &&
        Objects.equals(this.resource, event.resource) &&
        Objects.equals(this.links, event.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createTime, resourceType, eventVersion, eventType, summary, resourceVersion, resource, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    eventVersion: ").append(toIndentedString(eventVersion)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    resourceVersion: ").append(toIndentedString(resourceVersion)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `create_time` to the URL query string
    if (getCreateTime() != null) {
      try {
        joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resource_type` to the URL query string
    if (getResourceType() != null) {
      try {
        joiner.add(String.format("%sresource_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `event_version` to the URL query string
    if (getEventVersion() != null) {
      try {
        joiner.add(String.format("%sevent_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `event_type` to the URL query string
    if (getEventType() != null) {
      try {
        joiner.add(String.format("%sevent_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `summary` to the URL query string
    if (getSummary() != null) {
      try {
        joiner.add(String.format("%ssummary%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSummary()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resource_version` to the URL query string
    if (getResourceVersion() != null) {
      try {
        joiner.add(String.format("%sresource_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resource` to the URL query string
    if (getResource() != null) {
      for (String _key : getResource().keySet()) {
        try {
          joiner.add(String.format("%sresource%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getResource().get(_key), URLEncoder.encode(String.valueOf(getResource().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `links` to the URL query string
    if (getLinks() != null) {
      for (int i = 0; i < getLinks().size(); i++) {
        if (getLinks().get(i) != null) {
          joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

