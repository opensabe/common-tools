/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Simulates a mock webhook event.
 */
@JsonPropertyOrder({
        SimulateEvent.JSON_PROPERTY_WEBHOOK_ID,
        SimulateEvent.JSON_PROPERTY_URL,
        SimulateEvent.JSON_PROPERTY_EVENT_TYPE,
        SimulateEvent.JSON_PROPERTY_RESOURCE_VERSION
})
@JsonTypeName("simulate_event")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-07T07:10:38.624109217Z[Atlantic/Reykjavik]")
public class SimulateEvent {
    public static final String JSON_PROPERTY_WEBHOOK_ID = "webhook_id";
    public static final String JSON_PROPERTY_URL = "url";
    public static final String JSON_PROPERTY_EVENT_TYPE = "event_type";
    public static final String JSON_PROPERTY_RESOURCE_VERSION = "resource_version";
    private String webhookId;
    private URI url;
    private String eventType;
    private String resourceVersion;

    public SimulateEvent() {
    }

    public SimulateEvent webhookId(String webhookId) {

        this.webhookId = webhookId;
        return this;
    }

    /**
     * The ID of the webhook. If omitted, the URL is required.
     *
     * @return webhookId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WEBHOOK_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getWebhookId() {
        return webhookId;
    }


    @JsonProperty(JSON_PROPERTY_WEBHOOK_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWebhookId(String webhookId) {
        this.webhookId = webhookId;
    }


    public SimulateEvent url(URI url) {

        this.url = url;
        return this;
    }

    /**
     * The URL for the webhook endpoint. If omitted, the webhook ID is required.
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public URI getUrl() {
        return url;
    }


    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(URI url) {
        this.url = url;
    }


    public SimulateEvent eventType(String eventType) {

        this.eventType = eventType;
        return this;
    }

    /**
     * The event name. Specify one of the subscribed events. For each request, provide only one event.
     *
     * @return eventType
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEventType() {
        return eventType;
    }


    @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventType(String eventType) {
        this.eventType = eventType;
    }


    public SimulateEvent resourceVersion(String resourceVersion) {

        this.resourceVersion = resourceVersion;
        return this;
    }

    /**
     * The identifier for event type ex: 1.0/2.0 etc.
     *
     * @return resourceVersion
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RESOURCE_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getResourceVersion() {
        return resourceVersion;
    }


    @JsonProperty(JSON_PROPERTY_RESOURCE_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResourceVersion(String resourceVersion) {
        this.resourceVersion = resourceVersion;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimulateEvent simulateEvent = (SimulateEvent) o;
        return Objects.equals(this.webhookId, simulateEvent.webhookId) &&
                Objects.equals(this.url, simulateEvent.url) &&
                Objects.equals(this.eventType, simulateEvent.eventType) &&
                Objects.equals(this.resourceVersion, simulateEvent.resourceVersion);
    }

    @Override
    public int hashCode() {
        return Objects.hash(webhookId, url, eventType, resourceVersion);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SimulateEvent {\n");
        sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    resourceVersion: ").append(toIndentedString(resourceVersion)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `webhook_id` to the URL query string
        if (getWebhookId() != null) {
            try {
                joiner.add(String.format("%swebhook_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhookId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `url` to the URL query string
        if (getUrl() != null) {
            try {
                joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `event_type` to the URL query string
        if (getEventType() != null) {
            try {
                joiner.add(String.format("%sevent_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `resource_version` to the URL query string
        if (getResourceVersion() != null) {
            try {
                joiner.add(String.format("%sresource_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceVersion()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

