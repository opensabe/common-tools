/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
 */
@JsonPropertyOrder({
        Phone.JSON_PROPERTY_COUNTRY_CODE,
        Phone.JSON_PROPERTY_NATIONAL_NUMBER,
        Phone.JSON_PROPERTY_EXTENSION_NUMBER
})
@JsonTypeName("phone")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class Phone {
    public static final String JSON_PROPERTY_COUNTRY_CODE = "country_code";
    public static final String JSON_PROPERTY_NATIONAL_NUMBER = "national_number";
    public static final String JSON_PROPERTY_EXTENSION_NUMBER = "extension_number";
    private String countryCode;
    private String nationalNumber;
    private String extensionNumber;

    public Phone() {
    }

    public Phone countryCode(String countryCode) {

        this.countryCode = countryCode;
        return this;
    }

    /**
     * The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
     *
     * @return countryCode
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getCountryCode() {
        return countryCode;
    }


    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }


    public Phone nationalNumber(String nationalNumber) {

        this.nationalNumber = nationalNumber;
        return this;
    }

    /**
     * The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
     *
     * @return nationalNumber
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NATIONAL_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNationalNumber() {
        return nationalNumber;
    }


    @JsonProperty(JSON_PROPERTY_NATIONAL_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNationalNumber(String nationalNumber) {
        this.nationalNumber = nationalNumber;
    }


    public Phone extensionNumber(String extensionNumber) {

        this.extensionNumber = extensionNumber;
        return this;
    }

    /**
     * The extension number.
     *
     * @return extensionNumber
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXTENSION_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getExtensionNumber() {
        return extensionNumber;
    }


    @JsonProperty(JSON_PROPERTY_EXTENSION_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExtensionNumber(String extensionNumber) {
        this.extensionNumber = extensionNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Phone phone = (Phone) o;
        return Objects.equals(this.countryCode, phone.countryCode) &&
                Objects.equals(this.nationalNumber, phone.nationalNumber) &&
                Objects.equals(this.extensionNumber, phone.extensionNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(countryCode, nationalNumber, extensionNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Phone {\n");
        sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
        sb.append("    nationalNumber: ").append(toIndentedString(nationalNumber)).append("\n");
        sb.append("    extensionNumber: ").append(toIndentedString(extensionNumber)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `country_code` to the URL query string
        if (getCountryCode() != null) {
            try {
                joiner.add(String.format("%scountry_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCountryCode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `national_number` to the URL query string
        if (getNationalNumber() != null) {
            try {
                joiner.add(String.format("%snational_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNationalNumber()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `extension_number` to the URL query string
        if (getExtensionNumber() != null) {
            try {
                joiner.add(String.format("%sextension_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExtensionNumber()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

