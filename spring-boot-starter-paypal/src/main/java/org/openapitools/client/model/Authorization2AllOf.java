/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Authorization2AllOf
 */
@JsonPropertyOrder({
        Authorization2AllOf.JSON_PROPERTY_SUPPLEMENTARY_DATA,
        Authorization2AllOf.JSON_PROPERTY_PAYEE
})
@JsonTypeName("authorization_2_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class Authorization2AllOf {
    public static final String JSON_PROPERTY_SUPPLEMENTARY_DATA = "supplementary_data";
    public static final String JSON_PROPERTY_PAYEE = "payee";
    private SupplementaryData supplementaryData;
    private PayeeBase payee;

    public Authorization2AllOf() {
    }

    public Authorization2AllOf supplementaryData(SupplementaryData supplementaryData) {

        this.supplementaryData = supplementaryData;
        return this;
    }

    /**
     * Get supplementaryData
     *
     * @return supplementaryData
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUPPLEMENTARY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public SupplementaryData getSupplementaryData() {
        return supplementaryData;
    }


    @JsonProperty(JSON_PROPERTY_SUPPLEMENTARY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSupplementaryData(SupplementaryData supplementaryData) {
        this.supplementaryData = supplementaryData;
    }


    public Authorization2AllOf payee(PayeeBase payee) {

        this.payee = payee;
        return this;
    }

    /**
     * Get payee
     *
     * @return payee
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PayeeBase getPayee() {
        return payee;
    }


    @JsonProperty(JSON_PROPERTY_PAYEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayee(PayeeBase payee) {
        this.payee = payee;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Authorization2AllOf authorization2AllOf = (Authorization2AllOf) o;
        return Objects.equals(this.supplementaryData, authorization2AllOf.supplementaryData) &&
                Objects.equals(this.payee, authorization2AllOf.payee);
    }

    @Override
    public int hashCode() {
        return Objects.hash(supplementaryData, payee);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Authorization2AllOf {\n");
        sb.append("    supplementaryData: ").append(toIndentedString(supplementaryData)).append("\n");
        sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `supplementary_data` to the URL query string
        if (getSupplementaryData() != null) {
            joiner.add(getSupplementaryData().toUrlQueryString(prefix + "supplementary_data" + suffix));
        }

        // add `payee` to the URL query string
        if (getPayee() != null) {
            joiner.add(getPayee().toUrlQueryString(prefix + "payee" + suffix));
        }

        return joiner.toString();
    }

}

