/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
 */
@JsonPropertyOrder({
        PaymentInstruction.JSON_PROPERTY_PLATFORM_FEES,
        PaymentInstruction.JSON_PROPERTY_DISBURSEMENT_MODE,
        PaymentInstruction.JSON_PROPERTY_PAYEE_PRICING_TIER_ID,
        PaymentInstruction.JSON_PROPERTY_PAYEE_RECEIVABLE_FX_RATE_ID
})
@JsonTypeName("payment_instruction")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class PaymentInstruction {
    public static final String JSON_PROPERTY_PLATFORM_FEES = "platform_fees";
    public static final String JSON_PROPERTY_DISBURSEMENT_MODE = "disbursement_mode";
    public static final String JSON_PROPERTY_PAYEE_PRICING_TIER_ID = "payee_pricing_tier_id";
    public static final String JSON_PROPERTY_PAYEE_RECEIVABLE_FX_RATE_ID = "payee_receivable_fx_rate_id";
    private List<PlatformFee> platformFees;
    private DisbursementMode disbursementMode = DisbursementMode.INSTANT;
    private String payeePricingTierId;
    private String payeeReceivableFxRateId;

    public PaymentInstruction() {
    }

    public PaymentInstruction platformFees(List<PlatformFee> platformFees) {

        this.platformFees = platformFees;
        return this;
    }

    public PaymentInstruction addPlatformFeesItem(PlatformFee platformFeesItem) {
        if (this.platformFees == null) {
            this.platformFees = new ArrayList<>();
        }
        this.platformFees.add(platformFeesItem);
        return this;
    }

    /**
     * An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.
     *
     * @return platformFees
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PLATFORM_FEES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<PlatformFee> getPlatformFees() {
        return platformFees;
    }


    @JsonProperty(JSON_PROPERTY_PLATFORM_FEES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlatformFees(List<PlatformFee> platformFees) {
        this.platformFees = platformFees;
    }


    public PaymentInstruction disbursementMode(DisbursementMode disbursementMode) {

        this.disbursementMode = disbursementMode;
        return this;
    }

    /**
     * Get disbursementMode
     *
     * @return disbursementMode
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DISBURSEMENT_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public DisbursementMode getDisbursementMode() {
        return disbursementMode;
    }


    @JsonProperty(JSON_PROPERTY_DISBURSEMENT_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDisbursementMode(DisbursementMode disbursementMode) {
        this.disbursementMode = disbursementMode;
    }


    public PaymentInstruction payeePricingTierId(String payeePricingTierId) {

        this.payeePricingTierId = payeePricingTierId;
        return this;
    }

    /**
     * This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible &#39;payee_pricing_tier_id&#39; would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.
     *
     * @return payeePricingTierId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYEE_PRICING_TIER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPayeePricingTierId() {
        return payeePricingTierId;
    }


    @JsonProperty(JSON_PROPERTY_PAYEE_PRICING_TIER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayeePricingTierId(String payeePricingTierId) {
        this.payeePricingTierId = payeePricingTierId;
    }


    public PaymentInstruction payeeReceivableFxRateId(String payeeReceivableFxRateId) {

        this.payeeReceivableFxRateId = payeeReceivableFxRateId;
        return this;
    }

    /**
     * FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.
     *
     * @return payeeReceivableFxRateId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYEE_RECEIVABLE_FX_RATE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPayeeReceivableFxRateId() {
        return payeeReceivableFxRateId;
    }


    @JsonProperty(JSON_PROPERTY_PAYEE_RECEIVABLE_FX_RATE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayeeReceivableFxRateId(String payeeReceivableFxRateId) {
        this.payeeReceivableFxRateId = payeeReceivableFxRateId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentInstruction paymentInstruction = (PaymentInstruction) o;
        return Objects.equals(this.platformFees, paymentInstruction.platformFees) &&
                Objects.equals(this.disbursementMode, paymentInstruction.disbursementMode) &&
                Objects.equals(this.payeePricingTierId, paymentInstruction.payeePricingTierId) &&
                Objects.equals(this.payeeReceivableFxRateId, paymentInstruction.payeeReceivableFxRateId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(platformFees, disbursementMode, payeePricingTierId, payeeReceivableFxRateId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentInstruction {\n");
        sb.append("    platformFees: ").append(toIndentedString(platformFees)).append("\n");
        sb.append("    disbursementMode: ").append(toIndentedString(disbursementMode)).append("\n");
        sb.append("    payeePricingTierId: ").append(toIndentedString(payeePricingTierId)).append("\n");
        sb.append("    payeeReceivableFxRateId: ").append(toIndentedString(payeeReceivableFxRateId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `platform_fees` to the URL query string
        if (getPlatformFees() != null) {
            for (int i = 0; i < getPlatformFees().size(); i++) {
                if (getPlatformFees().get(i) != null) {
                    joiner.add(getPlatformFees().get(i).toUrlQueryString(String.format("%splatform_fees%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `disbursement_mode` to the URL query string
        if (getDisbursementMode() != null) {
            try {
                joiner.add(String.format("%sdisbursement_mode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisbursementMode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `payee_pricing_tier_id` to the URL query string
        if (getPayeePricingTierId() != null) {
            try {
                joiner.add(String.format("%spayee_pricing_tier_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayeePricingTierId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `payee_receivable_fx_rate_id` to the URL query string
        if (getPayeeReceivableFxRateId() != null) {
            try {
                joiner.add(String.format("%spayee_receivable_fx_rate_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayeeReceivableFxRateId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

