/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The phone information.
 */
@JsonPropertyOrder({
        PhoneWithType.JSON_PROPERTY_PHONE_TYPE,
        PhoneWithType.JSON_PROPERTY_PHONE_NUMBER
})
@JsonTypeName("phone_with_type")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class PhoneWithType {
    public static final String JSON_PROPERTY_PHONE_TYPE = "phone_type";
    public static final String JSON_PROPERTY_PHONE_NUMBER = "phone_number";
    private PhoneType phoneType;
    private Phone phoneNumber;

    public PhoneWithType() {
    }

    public PhoneWithType phoneType(PhoneType phoneType) {

        this.phoneType = phoneType;
        return this;
    }

    /**
     * Get phoneType
     *
     * @return phoneType
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PHONE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PhoneType getPhoneType() {
        return phoneType;
    }


    @JsonProperty(JSON_PROPERTY_PHONE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPhoneType(PhoneType phoneType) {
        this.phoneType = phoneType;
    }


    public PhoneWithType phoneNumber(Phone phoneNumber) {

        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get phoneNumber
     *
     * @return phoneNumber
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Phone getPhoneNumber() {
        return phoneNumber;
    }


    @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPhoneNumber(Phone phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PhoneWithType phoneWithType = (PhoneWithType) o;
        return Objects.equals(this.phoneType, phoneWithType.phoneType) &&
                Objects.equals(this.phoneNumber, phoneWithType.phoneNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(phoneType, phoneNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PhoneWithType {\n");
        sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
        sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `phone_type` to the URL query string
        if (getPhoneType() != null) {
            try {
                joiner.add(String.format("%sphone_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhoneType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `phone_number` to the URL query string
        if (getPhoneNumber() != null) {
            joiner.add(getPhoneNumber().toUrlQueryString(prefix + "phone_number" + suffix));
        }

        return joiner.toString();
    }

}

