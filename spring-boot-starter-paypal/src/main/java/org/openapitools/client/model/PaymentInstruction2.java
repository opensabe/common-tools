/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Any additional payments instructions during refund payment processing. This object is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability.
 */
@JsonPropertyOrder({
        PaymentInstruction2.JSON_PROPERTY_PLATFORM_FEES
})
@JsonTypeName("payment_instruction-2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class PaymentInstruction2 {
    public static final String JSON_PROPERTY_PLATFORM_FEES = "platform_fees";
    private List<PlatformFee> platformFees;

    public PaymentInstruction2() {
    }

    public PaymentInstruction2 platformFees(List<PlatformFee> platformFees) {

        this.platformFees = platformFees;
        return this;
    }

    public PaymentInstruction2 addPlatformFeesItem(PlatformFee platformFeesItem) {
        if (this.platformFees == null) {
            this.platformFees = new ArrayList<>();
        }
        this.platformFees.add(platformFeesItem);
        return this;
    }

    /**
     * Specifies the amount that the API caller will contribute to the refund being processed. The amount needs to be lower than platform_fees amount originally captured or the amount that is remaining if multiple refunds have been processed. This field is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability.
     *
     * @return platformFees
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PLATFORM_FEES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<PlatformFee> getPlatformFees() {
        return platformFees;
    }


    @JsonProperty(JSON_PROPERTY_PLATFORM_FEES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlatformFees(List<PlatformFee> platformFees) {
        this.platformFees = platformFees;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentInstruction2 paymentInstruction2 = (PaymentInstruction2) o;
        return Objects.equals(this.platformFees, paymentInstruction2.platformFees);
    }

    @Override
    public int hashCode() {
        return Objects.hash(platformFees);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentInstruction2 {\n");
        sb.append("    platformFees: ").append(toIndentedString(platformFees)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `platform_fees` to the URL query string
        if (getPlatformFees() != null) {
            for (int i = 0; i < getPlatformFees().size(); i++) {
                if (getPlatformFees().get(i) != null) {
                    joiner.add(getPlatformFees().get(i).toUrlQueryString(String.format("%splatform_fees%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }

}

