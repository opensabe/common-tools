/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.AddressPortable;
import org.openapitools.client.model.AuthenticationResponse;
import org.openapitools.client.model.CardBrand;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The payment card used to fund the payment. Card can be a credit or debit card.
 */
@JsonPropertyOrder({
  CardResponseWithBillingAddress.JSON_PROPERTY_LAST_DIGITS,
  CardResponseWithBillingAddress.JSON_PROPERTY_BRAND,
  CardResponseWithBillingAddress.JSON_PROPERTY_TYPE,
  CardResponseWithBillingAddress.JSON_PROPERTY_AUTHENTICATION_RESULT,
  CardResponseWithBillingAddress.JSON_PROPERTY_NAME,
  CardResponseWithBillingAddress.JSON_PROPERTY_BILLING_ADDRESS,
  CardResponseWithBillingAddress.JSON_PROPERTY_EXPIRY,
  CardResponseWithBillingAddress.JSON_PROPERTY_CURRENCY_CODE
})
@JsonTypeName("card_response_with_billing_address")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class CardResponseWithBillingAddress {
  public static final String JSON_PROPERTY_LAST_DIGITS = "last_digits";
  private String lastDigits;

  public static final String JSON_PROPERTY_BRAND = "brand";
  private CardBrand brand;

  /**
   * The payment card type.
   */
  public enum TypeEnum {
    CREDIT("CREDIT"),
    
    DEBIT("DEBIT"),
    
    PREPAID("PREPAID"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_AUTHENTICATION_RESULT = "authentication_result";
  private AuthenticationResponse authenticationResult;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_BILLING_ADDRESS = "billing_address";
  private AddressPortable billingAddress;

  public static final String JSON_PROPERTY_EXPIRY = "expiry";
  private String expiry;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currency_code";
  private String currencyCode;

  public CardResponseWithBillingAddress() {
  }

  @JsonCreator
  public CardResponseWithBillingAddress(
    @JsonProperty(JSON_PROPERTY_LAST_DIGITS) String lastDigits, 
    @JsonProperty(JSON_PROPERTY_TYPE) TypeEnum type
  ) {
    this();
    this.lastDigits = lastDigits;
    this.type = type;
  }

   /**
   * The last digits of the payment card.
   * @return lastDigits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_DIGITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastDigits() {
    return lastDigits;
  }




  public CardResponseWithBillingAddress brand(CardBrand brand) {
    
    this.brand = brand;
    return this;
  }

   /**
   * Get brand
   * @return brand
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardBrand getBrand() {
    return brand;
  }


  @JsonProperty(JSON_PROPERTY_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrand(CardBrand brand) {
    this.brand = brand;
  }


   /**
   * The payment card type.
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }




  public CardResponseWithBillingAddress authenticationResult(AuthenticationResponse authenticationResult) {
    
    this.authenticationResult = authenticationResult;
    return this;
  }

   /**
   * Get authenticationResult
   * @return authenticationResult
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthenticationResponse getAuthenticationResult() {
    return authenticationResult;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationResult(AuthenticationResponse authenticationResult) {
    this.authenticationResult = authenticationResult;
  }


  public CardResponseWithBillingAddress name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The card holder&#39;s name as it appears on the card.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public CardResponseWithBillingAddress billingAddress(AddressPortable billingAddress) {
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BILLING_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AddressPortable getBillingAddress() {
    return billingAddress;
  }


  @JsonProperty(JSON_PROPERTY_BILLING_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBillingAddress(AddressPortable billingAddress) {
    this.billingAddress = billingAddress;
  }


  public CardResponseWithBillingAddress expiry(String expiry) {
    
    this.expiry = expiry;
    return this;
  }

   /**
   * The year and month, in ISO-8601 &#x60;YYYY-MM&#x60; date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return expiry
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpiry() {
    return expiry;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiry(String expiry) {
    this.expiry = expiry;
  }


  public CardResponseWithBillingAddress currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrencyCode() {
    return currencyCode;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardResponseWithBillingAddress cardResponseWithBillingAddress = (CardResponseWithBillingAddress) o;
    return Objects.equals(this.lastDigits, cardResponseWithBillingAddress.lastDigits) &&
        Objects.equals(this.brand, cardResponseWithBillingAddress.brand) &&
        Objects.equals(this.type, cardResponseWithBillingAddress.type) &&
        Objects.equals(this.authenticationResult, cardResponseWithBillingAddress.authenticationResult) &&
        Objects.equals(this.name, cardResponseWithBillingAddress.name) &&
        Objects.equals(this.billingAddress, cardResponseWithBillingAddress.billingAddress) &&
        Objects.equals(this.expiry, cardResponseWithBillingAddress.expiry) &&
        Objects.equals(this.currencyCode, cardResponseWithBillingAddress.currencyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastDigits, brand, type, authenticationResult, name, billingAddress, expiry, currencyCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardResponseWithBillingAddress {\n");
    sb.append("    lastDigits: ").append(toIndentedString(lastDigits)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    authenticationResult: ").append(toIndentedString(authenticationResult)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `last_digits` to the URL query string
    if (getLastDigits() != null) {
      try {
        joiner.add(String.format("%slast_digits%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastDigits()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `brand` to the URL query string
    if (getBrand() != null) {
      try {
        joiner.add(String.format("%sbrand%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBrand()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `authentication_result` to the URL query string
    if (getAuthenticationResult() != null) {
      joiner.add(getAuthenticationResult().toUrlQueryString(prefix + "authentication_result" + suffix));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `billing_address` to the URL query string
    if (getBillingAddress() != null) {
      joiner.add(getBillingAddress().toUrlQueryString(prefix + "billing_address" + suffix));
    }

    // add `expiry` to the URL query string
    if (getExpiry() != null) {
      try {
        joiner.add(String.format("%sexpiry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `currency_code` to the URL query string
    if (getCurrencyCode() != null) {
      try {
        joiner.add(String.format("%scurrency_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrencyCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

