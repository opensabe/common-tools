/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ItemList1;
import org.openapitools.client.model.Payee;
import org.openapitools.client.model.PaymentOptions;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The cart.
 */
@JsonPropertyOrder({
  CartBase.JSON_PROPERTY_REFERENCE_ID,
  CartBase.JSON_PROPERTY_AMOUNT,
  CartBase.JSON_PROPERTY_PAYEE,
  CartBase.JSON_PROPERTY_DESCRIPTION,
  CartBase.JSON_PROPERTY_NOTE_TO_PAYEE,
  CartBase.JSON_PROPERTY_CUSTOM,
  CartBase.JSON_PROPERTY_INVOICE_NUMBER,
  CartBase.JSON_PROPERTY_SOFT_DESCRIPTOR,
  CartBase.JSON_PROPERTY_PAYMENT_OPTIONS,
  CartBase.JSON_PROPERTY_ITEM_LIST,
  CartBase.JSON_PROPERTY_NOTIFY_URL,
  CartBase.JSON_PROPERTY_ORDER_URL
})
@JsonTypeName("cart_base")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class CartBase {
  public static final String JSON_PROPERTY_REFERENCE_ID = "reference_id";
  private String referenceId;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Amount amount;

  public static final String JSON_PROPERTY_PAYEE = "payee";
  private Payee payee;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_NOTE_TO_PAYEE = "note_to_payee";
  private String noteToPayee;

  public static final String JSON_PROPERTY_CUSTOM = "custom";
  private String custom;

  public static final String JSON_PROPERTY_INVOICE_NUMBER = "invoice_number";
  private String invoiceNumber;

  public static final String JSON_PROPERTY_SOFT_DESCRIPTOR = "soft_descriptor";
  private String softDescriptor;

  public static final String JSON_PROPERTY_PAYMENT_OPTIONS = "payment_options";
  private PaymentOptions paymentOptions;

  public static final String JSON_PROPERTY_ITEM_LIST = "item_list";
  private ItemList1 itemList;

  public static final String JSON_PROPERTY_NOTIFY_URL = "notify_url";
  private URI notifyUrl;

  public static final String JSON_PROPERTY_ORDER_URL = "order_url";
  private URI orderUrl;

  public CartBase() {
  }

  public CartBase referenceId(String referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * The merchant-provided ID for the purchase unit.
   * @return referenceId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReferenceId() {
    return referenceId;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public CartBase amount(Amount amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Amount getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public CartBase payee(Payee payee) {
    
    this.payee = payee;
    return this;
  }

   /**
   * Get payee
   * @return payee
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Payee getPayee() {
    return payee;
  }


  @JsonProperty(JSON_PROPERTY_PAYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayee(Payee payee) {
    this.payee = payee;
  }


  public CartBase description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The purchase description.
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CartBase noteToPayee(String noteToPayee) {
    
    this.noteToPayee = noteToPayee;
    return this;
  }

   /**
   * The note to the recipient of the funds in this transaction.
   * @return noteToPayee
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNoteToPayee() {
    return noteToPayee;
  }


  @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoteToPayee(String noteToPayee) {
    this.noteToPayee = noteToPayee;
  }


  public CartBase custom(String custom) {
    
    this.custom = custom;
    return this;
  }

   /**
   * The free-form field for the client&#39;s use.
   * @return custom
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustom() {
    return custom;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustom(String custom) {
    this.custom = custom;
  }


  public CartBase invoiceNumber(String invoiceNumber) {
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * The invoice number to track this payment.
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public CartBase softDescriptor(String softDescriptor) {
    
    this.softDescriptor = softDescriptor;
    return this;
  }

   /**
   * The payment descriptor on account transactions on the customer&#39;s credit card statement, that PayPal sends to processors. The maximum length of the soft descriptor information that you can pass in the API field is 22 characters, in the following format:&lt;pre&gt;22 - len(PAYPAL * (8)) - len(&lt;var&gt;Descriptor in Payment Receiving Preferences of Merchant account&lt;/var&gt; + 1)&lt;/pre&gt;The PAYPAL prefix uses 8 characters.&lt;br/&gt;&lt;br/&gt;The soft descriptor supports the following ASCII characters:&lt;ul&gt;&lt;li&gt;Alphanumeric characters&lt;/li&gt;&lt;li&gt;Dashes&lt;/li&gt;&lt;li&gt;Asterisks&lt;/li&gt;&lt;li&gt;Periods (.)&lt;/li&gt;&lt;li&gt;Spaces&lt;/li&gt;&lt;/ul&gt;For Wallet payments marketplace integrations:&lt;ul&gt;&lt;li&gt;The merchant descriptor in the Payment Receiving Preferences must be the marketplace name.&lt;/li&gt;&lt;li&gt;You can&#39;t use the remaining space to show the customer service number.&lt;/li&gt;&lt;li&gt;The remaining spaces can be a combination of seller name and country.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;For unbranded payments (Direct Card) marketplace integrations, use a combination of the seller name and phone number.
   * @return softDescriptor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOFT_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSoftDescriptor() {
    return softDescriptor;
  }


  @JsonProperty(JSON_PROPERTY_SOFT_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSoftDescriptor(String softDescriptor) {
    this.softDescriptor = softDescriptor;
  }


  public CartBase paymentOptions(PaymentOptions paymentOptions) {
    
    this.paymentOptions = paymentOptions;
    return this;
  }

   /**
   * Get paymentOptions
   * @return paymentOptions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentOptions getPaymentOptions() {
    return paymentOptions;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentOptions(PaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public CartBase itemList(ItemList1 itemList) {
    
    this.itemList = itemList;
    return this;
  }

   /**
   * Get itemList
   * @return itemList
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEM_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ItemList1 getItemList() {
    return itemList;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemList(ItemList1 itemList) {
    this.itemList = itemList;
  }


  public CartBase notifyUrl(URI notifyUrl) {
    
    this.notifyUrl = notifyUrl;
    return this;
  }

   /**
   * The send payment notifications URL.
   * @return notifyUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTIFY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getNotifyUrl() {
    return notifyUrl;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotifyUrl(URI notifyUrl) {
    this.notifyUrl = notifyUrl;
  }


  public CartBase orderUrl(URI orderUrl) {
    
    this.orderUrl = orderUrl;
    return this;
  }

   /**
   * The payment-related URL on the merchant site.
   * @return orderUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getOrderUrl() {
    return orderUrl;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderUrl(URI orderUrl) {
    this.orderUrl = orderUrl;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartBase cartBase = (CartBase) o;
    return Objects.equals(this.referenceId, cartBase.referenceId) &&
        Objects.equals(this.amount, cartBase.amount) &&
        Objects.equals(this.payee, cartBase.payee) &&
        Objects.equals(this.description, cartBase.description) &&
        Objects.equals(this.noteToPayee, cartBase.noteToPayee) &&
        Objects.equals(this.custom, cartBase.custom) &&
        Objects.equals(this.invoiceNumber, cartBase.invoiceNumber) &&
        Objects.equals(this.softDescriptor, cartBase.softDescriptor) &&
        Objects.equals(this.paymentOptions, cartBase.paymentOptions) &&
        Objects.equals(this.itemList, cartBase.itemList) &&
        Objects.equals(this.notifyUrl, cartBase.notifyUrl) &&
        Objects.equals(this.orderUrl, cartBase.orderUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, amount, payee, description, noteToPayee, custom, invoiceNumber, softDescriptor, paymentOptions, itemList, notifyUrl, orderUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartBase {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    noteToPayee: ").append(toIndentedString(noteToPayee)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    softDescriptor: ").append(toIndentedString(softDescriptor)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    itemList: ").append(toIndentedString(itemList)).append("\n");
    sb.append("    notifyUrl: ").append(toIndentedString(notifyUrl)).append("\n");
    sb.append("    orderUrl: ").append(toIndentedString(orderUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `reference_id` to the URL query string
    if (getReferenceId() != null) {
      try {
        joiner.add(String.format("%sreference_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReferenceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `payee` to the URL query string
    if (getPayee() != null) {
      joiner.add(getPayee().toUrlQueryString(prefix + "payee" + suffix));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `note_to_payee` to the URL query string
    if (getNoteToPayee() != null) {
      try {
        joiner.add(String.format("%snote_to_payee%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNoteToPayee()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `custom` to the URL query string
    if (getCustom() != null) {
      try {
        joiner.add(String.format("%scustom%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustom()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `invoice_number` to the URL query string
    if (getInvoiceNumber() != null) {
      try {
        joiner.add(String.format("%sinvoice_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvoiceNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `soft_descriptor` to the URL query string
    if (getSoftDescriptor() != null) {
      try {
        joiner.add(String.format("%ssoft_descriptor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSoftDescriptor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `payment_options` to the URL query string
    if (getPaymentOptions() != null) {
      joiner.add(getPaymentOptions().toUrlQueryString(prefix + "payment_options" + suffix));
    }

    // add `item_list` to the URL query string
    if (getItemList() != null) {
      joiner.add(getItemList().toUrlQueryString(prefix + "item_list" + suffix));
    }

    // add `notify_url` to the URL query string
    if (getNotifyUrl() != null) {
      try {
        joiner.add(String.format("%snotify_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNotifyUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `order_url` to the URL query string
    if (getOrderUrl() != null) {
      try {
        joiner.add(String.format("%sorder_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrderUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

