/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The charge amount from the subscriber.
 */
@JsonPropertyOrder({
        SubscriptionCaptureRequest.JSON_PROPERTY_NOTE,
        SubscriptionCaptureRequest.JSON_PROPERTY_CAPTURE_TYPE,
        SubscriptionCaptureRequest.JSON_PROPERTY_AMOUNT
})
@JsonTypeName("subscription_capture_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class SubscriptionCaptureRequest {
    public static final String JSON_PROPERTY_NOTE = "note";
    public static final String JSON_PROPERTY_CAPTURE_TYPE = "capture_type";
    public static final String JSON_PROPERTY_AMOUNT = "amount";
    private String note;
    private CaptureTypeEnum captureType;
    private Money amount;
    public SubscriptionCaptureRequest() {
    }

    public SubscriptionCaptureRequest note(String note) {

        this.note = note;
        return this;
    }

    /**
     * The reason or note for the subscription charge.
     *
     * @return note
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NOTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNote() {
        return note;
    }

    @JsonProperty(JSON_PROPERTY_NOTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNote(String note) {
        this.note = note;
    }

    public SubscriptionCaptureRequest captureType(CaptureTypeEnum captureType) {

        this.captureType = captureType;
        return this;
    }

    /**
     * The type of capture.
     *
     * @return captureType
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CAPTURE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public CaptureTypeEnum getCaptureType() {
        return captureType;
    }

    @JsonProperty(JSON_PROPERTY_CAPTURE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCaptureType(CaptureTypeEnum captureType) {
        this.captureType = captureType;
    }

    public SubscriptionCaptureRequest amount(Money amount) {

        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Money getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(Money amount) {
        this.amount = amount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionCaptureRequest subscriptionCaptureRequest = (SubscriptionCaptureRequest) o;
        return Objects.equals(this.note, subscriptionCaptureRequest.note) &&
                Objects.equals(this.captureType, subscriptionCaptureRequest.captureType) &&
                Objects.equals(this.amount, subscriptionCaptureRequest.amount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(note, captureType, amount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscriptionCaptureRequest {\n");
        sb.append("    note: ").append(toIndentedString(note)).append("\n");
        sb.append("    captureType: ").append(toIndentedString(captureType)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `note` to the URL query string
        if (getNote() != null) {
            try {
                joiner.add(String.format("%snote%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNote()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `capture_type` to the URL query string
        if (getCaptureType() != null) {
            try {
                joiner.add(String.format("%scapture_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCaptureType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
        }

        return joiner.toString();
    }

    /**
     * The type of capture.
     */
    public enum CaptureTypeEnum {
        OUTSTANDING_BALANCE("OUTSTANDING_BALANCE");

        private String value;

        CaptureTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static CaptureTypeEnum fromValue(String value) {
            for (CaptureTypeEnum b : CaptureTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

