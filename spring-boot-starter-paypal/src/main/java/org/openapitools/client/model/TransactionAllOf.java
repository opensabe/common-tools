/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionAllOf
 */
@JsonPropertyOrder({
        TransactionAllOf.JSON_PROPERTY_ID,
        TransactionAllOf.JSON_PROPERTY_AMOUNT_WITH_BREAKDOWN,
        TransactionAllOf.JSON_PROPERTY_PAYER_NAME,
        TransactionAllOf.JSON_PROPERTY_PAYER_EMAIL,
        TransactionAllOf.JSON_PROPERTY_TIME
})
@JsonTypeName("transaction_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class TransactionAllOf {
    public static final String JSON_PROPERTY_ID = "id";
    public static final String JSON_PROPERTY_AMOUNT_WITH_BREAKDOWN = "amount_with_breakdown";
    public static final String JSON_PROPERTY_PAYER_NAME = "payer_name";
    public static final String JSON_PROPERTY_PAYER_EMAIL = "payer_email";
    public static final String JSON_PROPERTY_TIME = "time";
    private String id;
    private AmountWithBreakdown amountWithBreakdown;
    private Name payerName;
    private String payerEmail;
    private String time;

    public TransactionAllOf() {
    }

    @JsonCreator
    public TransactionAllOf(
            @JsonProperty(JSON_PROPERTY_ID) String id
    ) {
        this();
        this.id = id;
    }

    /**
     * The PayPal-generated transaction ID.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getId() {
        return id;
    }


    public TransactionAllOf amountWithBreakdown(AmountWithBreakdown amountWithBreakdown) {

        this.amountWithBreakdown = amountWithBreakdown;
        return this;
    }

    /**
     * Get amountWithBreakdown
     *
     * @return amountWithBreakdown
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AMOUNT_WITH_BREAKDOWN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public AmountWithBreakdown getAmountWithBreakdown() {
        return amountWithBreakdown;
    }


    @JsonProperty(JSON_PROPERTY_AMOUNT_WITH_BREAKDOWN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAmountWithBreakdown(AmountWithBreakdown amountWithBreakdown) {
        this.amountWithBreakdown = amountWithBreakdown;
    }


    public TransactionAllOf payerName(Name payerName) {

        this.payerName = payerName;
        return this;
    }

    /**
     * Get payerName
     *
     * @return payerName
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYER_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Name getPayerName() {
        return payerName;
    }


    @JsonProperty(JSON_PROPERTY_PAYER_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayerName(Name payerName) {
        this.payerName = payerName;
    }


    public TransactionAllOf payerEmail(String payerEmail) {

        this.payerEmail = payerEmail;
        return this;
    }

    /**
     * The internationalized email address.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Up to 64 characters are allowed before and 255 characters are allowed after the &lt;code&gt;@&lt;/code&gt; sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted &lt;code&gt;@&lt;/code&gt; sign exists.&lt;/blockquote&gt;
     *
     * @return payerEmail
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYER_EMAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPayerEmail() {
        return payerEmail;
    }


    @JsonProperty(JSON_PROPERTY_PAYER_EMAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayerEmail(String payerEmail) {
        this.payerEmail = payerEmail;
    }


    public TransactionAllOf time(String time) {

        this.time = time;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return time
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getTime() {
        return time;
    }


    @JsonProperty(JSON_PROPERTY_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTime(String time) {
        this.time = time;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionAllOf transactionAllOf = (TransactionAllOf) o;
        return Objects.equals(this.id, transactionAllOf.id) &&
                Objects.equals(this.amountWithBreakdown, transactionAllOf.amountWithBreakdown) &&
                Objects.equals(this.payerName, transactionAllOf.payerName) &&
                Objects.equals(this.payerEmail, transactionAllOf.payerEmail) &&
                Objects.equals(this.time, transactionAllOf.time);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, amountWithBreakdown, payerName, payerEmail, time);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionAllOf {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    amountWithBreakdown: ").append(toIndentedString(amountWithBreakdown)).append("\n");
        sb.append("    payerName: ").append(toIndentedString(payerName)).append("\n");
        sb.append("    payerEmail: ").append(toIndentedString(payerEmail)).append("\n");
        sb.append("    time: ").append(toIndentedString(time)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            try {
                joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `amount_with_breakdown` to the URL query string
        if (getAmountWithBreakdown() != null) {
            joiner.add(getAmountWithBreakdown().toUrlQueryString(prefix + "amount_with_breakdown" + suffix));
        }

        // add `payer_name` to the URL query string
        if (getPayerName() != null) {
            joiner.add(getPayerName().toUrlQueryString(prefix + "payer_name" + suffix));
        }

        // add `payer_email` to the URL query string
        if (getPayerEmail() != null) {
            try {
                joiner.add(String.format("%spayer_email%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayerEmail()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `time` to the URL query string
        if (getTime() != null) {
            try {
                joiner.add(String.format("%stime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

