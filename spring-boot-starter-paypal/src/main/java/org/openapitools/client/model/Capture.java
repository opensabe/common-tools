/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The capture transaction details.
 */
@JsonPropertyOrder({
        Capture.JSON_PROPERTY_ID,
        Capture.JSON_PROPERTY_AMOUNT,
        Capture.JSON_PROPERTY_IS_FINAL_CAPTURE,
        Capture.JSON_PROPERTY_STATE,
        Capture.JSON_PROPERTY_REASON_CODE,
        Capture.JSON_PROPERTY_PARENT_PAYMENT,
        Capture.JSON_PROPERTY_INVOICE_NUMBER,
        Capture.JSON_PROPERTY_TRANSACTION_FEE,
        Capture.JSON_PROPERTY_TRANSACTION_FEE_IN_RECEIVABLE_CURRENCY,
        Capture.JSON_PROPERTY_RECEIVABLE_AMOUNT,
        Capture.JSON_PROPERTY_EXCHANGE_RATE,
        Capture.JSON_PROPERTY_NOTE_TO_PAYER,
        Capture.JSON_PROPERTY_CREATE_TIME,
        Capture.JSON_PROPERTY_UPDATE_TIME,
        Capture.JSON_PROPERTY_LINKS
})
@JsonTypeName("capture")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class Capture {
    public static final String JSON_PROPERTY_ID = "id";
    public static final String JSON_PROPERTY_AMOUNT = "amount";
    public static final String JSON_PROPERTY_IS_FINAL_CAPTURE = "is_final_capture";
    public static final String JSON_PROPERTY_STATE = "state";
    public static final String JSON_PROPERTY_REASON_CODE = "reason_code";
    public static final String JSON_PROPERTY_PARENT_PAYMENT = "parent_payment";
    public static final String JSON_PROPERTY_INVOICE_NUMBER = "invoice_number";
    public static final String JSON_PROPERTY_TRANSACTION_FEE = "transaction_fee";
    public static final String JSON_PROPERTY_TRANSACTION_FEE_IN_RECEIVABLE_CURRENCY = "transaction_fee_in_receivable_currency";
    public static final String JSON_PROPERTY_RECEIVABLE_AMOUNT = "receivable_amount";
    public static final String JSON_PROPERTY_EXCHANGE_RATE = "exchange_rate";
    public static final String JSON_PROPERTY_NOTE_TO_PAYER = "note_to_payer";
    public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
    public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
    public static final String JSON_PROPERTY_LINKS = "links";
    private String id;
    private Amount amount;
    private Boolean isFinalCapture = false;
    private StateEnum state;
    private ReasonCodeEnum reasonCode;
    private String parentPayment;
    private String invoiceNumber;
    private Currency transactionFee;
    private Currency transactionFeeInReceivableCurrency;
    private Currency receivableAmount;
    private String exchangeRate;
    private String noteToPayer;
    private OffsetDateTime createTime;
    private OffsetDateTime updateTime;
    private List<LinkDescription> links;

    public Capture() {
    }
    @JsonCreator
    public Capture(
            @JsonProperty(JSON_PROPERTY_ID) String id,
            @JsonProperty(JSON_PROPERTY_STATE) StateEnum state,
            @JsonProperty(JSON_PROPERTY_REASON_CODE) ReasonCodeEnum reasonCode,
            @JsonProperty(JSON_PROPERTY_PARENT_PAYMENT) String parentPayment,
            @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE) String exchangeRate,
            @JsonProperty(JSON_PROPERTY_CREATE_TIME) OffsetDateTime createTime,
            @JsonProperty(JSON_PROPERTY_UPDATE_TIME) OffsetDateTime updateTime,
            @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
    ) {
        this();
        this.id = id;
        this.state = state;
        this.reasonCode = reasonCode;
        this.parentPayment = parentPayment;
        this.exchangeRate = exchangeRate;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.links = links;
    }

    /**
     * The ID of the capture transaction.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getId() {
        return id;
    }

    public Capture amount(Amount amount) {

        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Amount getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAmount(Amount amount) {
        this.amount = amount;
    }

    public Capture isFinalCapture(Boolean isFinalCapture) {

        this.isFinalCapture = isFinalCapture;
        return this;
    }

    /**
     * Indicates whether to release all remaining held funds.
     *
     * @return isFinalCapture
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_IS_FINAL_CAPTURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getIsFinalCapture() {
        return isFinalCapture;
    }

    @JsonProperty(JSON_PROPERTY_IS_FINAL_CAPTURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsFinalCapture(Boolean isFinalCapture) {
        this.isFinalCapture = isFinalCapture;
    }

    /**
     * The state of the capture.
     *
     * @return state
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StateEnum getState() {
        return state;
    }

    /**
     * The reason code that describes why the transaction state is pending or reversed.
     *
     * @return reasonCode
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REASON_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ReasonCodeEnum getReasonCode() {
        return reasonCode;
    }

    /**
     * The ID of the payment on which this transaction is based.
     *
     * @return parentPayment
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PARENT_PAYMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getParentPayment() {
        return parentPayment;
    }

    public Capture invoiceNumber(String invoiceNumber) {

        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * The invoice number to track this payment.
     *
     * @return invoiceNumber
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }

    public Capture transactionFee(Currency transactionFee) {

        this.transactionFee = transactionFee;
        return this;
    }

    /**
     * Get transactionFee
     *
     * @return transactionFee
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TRANSACTION_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Currency getTransactionFee() {
        return transactionFee;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTransactionFee(Currency transactionFee) {
        this.transactionFee = transactionFee;
    }

    public Capture transactionFeeInReceivableCurrency(Currency transactionFeeInReceivableCurrency) {

        this.transactionFeeInReceivableCurrency = transactionFeeInReceivableCurrency;
        return this;
    }

    /**
     * Get transactionFeeInReceivableCurrency
     *
     * @return transactionFeeInReceivableCurrency
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TRANSACTION_FEE_IN_RECEIVABLE_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Currency getTransactionFeeInReceivableCurrency() {
        return transactionFeeInReceivableCurrency;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_FEE_IN_RECEIVABLE_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTransactionFeeInReceivableCurrency(Currency transactionFeeInReceivableCurrency) {
        this.transactionFeeInReceivableCurrency = transactionFeeInReceivableCurrency;
    }

    public Capture receivableAmount(Currency receivableAmount) {

        this.receivableAmount = receivableAmount;
        return this;
    }

    /**
     * Get receivableAmount
     *
     * @return receivableAmount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RECEIVABLE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Currency getReceivableAmount() {
        return receivableAmount;
    }

    @JsonProperty(JSON_PROPERTY_RECEIVABLE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReceivableAmount(Currency receivableAmount) {
        this.receivableAmount = receivableAmount;
    }

    /**
     * The exchange rate applied for this transaction. Returned when there is a currency conversion from the transaction currency to the receivable currency.
     *
     * @return exchangeRate
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getExchangeRate() {
        return exchangeRate;
    }

    public Capture noteToPayer(String noteToPayer) {

        this.noteToPayer = noteToPayer;
        return this;
    }

    /**
     * A free-form field that clients can use to send a note to the payer.
     *
     * @return noteToPayer
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNoteToPayer() {
        return noteToPayer;
    }

    @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNoteToPayer(String noteToPayer) {
        this.noteToPayer = noteToPayer;
    }

    /**
     * The date and time of the capture, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getCreateTime() {
        return createTime;
    }

    /**
     * The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getUpdateTime() {
        return updateTime;
    }

    /**
     * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
     *
     * @return links
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<LinkDescription> getLinks() {
        return links;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Capture capture = (Capture) o;
        return Objects.equals(this.id, capture.id) &&
                Objects.equals(this.amount, capture.amount) &&
                Objects.equals(this.isFinalCapture, capture.isFinalCapture) &&
                Objects.equals(this.state, capture.state) &&
                Objects.equals(this.reasonCode, capture.reasonCode) &&
                Objects.equals(this.parentPayment, capture.parentPayment) &&
                Objects.equals(this.invoiceNumber, capture.invoiceNumber) &&
                Objects.equals(this.transactionFee, capture.transactionFee) &&
                Objects.equals(this.transactionFeeInReceivableCurrency, capture.transactionFeeInReceivableCurrency) &&
                Objects.equals(this.receivableAmount, capture.receivableAmount) &&
                Objects.equals(this.exchangeRate, capture.exchangeRate) &&
                Objects.equals(this.noteToPayer, capture.noteToPayer) &&
                Objects.equals(this.createTime, capture.createTime) &&
                Objects.equals(this.updateTime, capture.updateTime) &&
                Objects.equals(this.links, capture.links);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, amount, isFinalCapture, state, reasonCode, parentPayment, invoiceNumber, transactionFee, transactionFeeInReceivableCurrency, receivableAmount, exchangeRate, noteToPayer, createTime, updateTime, links);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Capture {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    isFinalCapture: ").append(toIndentedString(isFinalCapture)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
        sb.append("    parentPayment: ").append(toIndentedString(parentPayment)).append("\n");
        sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
        sb.append("    transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
        sb.append("    transactionFeeInReceivableCurrency: ").append(toIndentedString(transactionFeeInReceivableCurrency)).append("\n");
        sb.append("    receivableAmount: ").append(toIndentedString(receivableAmount)).append("\n");
        sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
        sb.append("    noteToPayer: ").append(toIndentedString(noteToPayer)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            try {
                joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
        }

        // add `is_final_capture` to the URL query string
        if (getIsFinalCapture() != null) {
            try {
                joiner.add(String.format("%sis_final_capture%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsFinalCapture()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `state` to the URL query string
        if (getState() != null) {
            try {
                joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `reason_code` to the URL query string
        if (getReasonCode() != null) {
            try {
                joiner.add(String.format("%sreason_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReasonCode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `parent_payment` to the URL query string
        if (getParentPayment() != null) {
            try {
                joiner.add(String.format("%sparent_payment%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentPayment()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `invoice_number` to the URL query string
        if (getInvoiceNumber() != null) {
            try {
                joiner.add(String.format("%sinvoice_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvoiceNumber()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `transaction_fee` to the URL query string
        if (getTransactionFee() != null) {
            joiner.add(getTransactionFee().toUrlQueryString(prefix + "transaction_fee" + suffix));
        }

        // add `transaction_fee_in_receivable_currency` to the URL query string
        if (getTransactionFeeInReceivableCurrency() != null) {
            joiner.add(getTransactionFeeInReceivableCurrency().toUrlQueryString(prefix + "transaction_fee_in_receivable_currency" + suffix));
        }

        // add `receivable_amount` to the URL query string
        if (getReceivableAmount() != null) {
            joiner.add(getReceivableAmount().toUrlQueryString(prefix + "receivable_amount" + suffix));
        }

        // add `exchange_rate` to the URL query string
        if (getExchangeRate() != null) {
            try {
                joiner.add(String.format("%sexchange_rate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExchangeRate()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `note_to_payer` to the URL query string
        if (getNoteToPayer() != null) {
            try {
                joiner.add(String.format("%snote_to_payer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNoteToPayer()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `create_time` to the URL query string
        if (getCreateTime() != null) {
            try {
                joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `update_time` to the URL query string
        if (getUpdateTime() != null) {
            try {
                joiner.add(String.format("%supdate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `links` to the URL query string
        if (getLinks() != null) {
            for (int i = 0; i < getLinks().size(); i++) {
                if (getLinks().get(i) != null) {
                    joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }

    /**
     * The state of the capture.
     */
    public enum StateEnum {
        PENDING("pending"),

        COMPLETED("completed"),

        REFUNDED("refunded"),

        PARTIALLY_REFUNDED("partially_refunded"),

        DENIED("denied");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The reason code that describes why the transaction state is pending or reversed.
     */
    public enum ReasonCodeEnum {
        CHARGEBACK("CHARGEBACK"),

        GUARANTEE("GUARANTEE"),

        BUYER_COMPLAINT("BUYER_COMPLAINT"),

        REFUND("REFUND"),

        UNCONFIRMED_SHIPPING_ADDRESS("UNCONFIRMED_SHIPPING_ADDRESS"),

        ECHECK("ECHECK"),

        INTERNATIONAL_WITHDRAWAL("INTERNATIONAL_WITHDRAWAL"),

        RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION("RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"),

        PAYMENT_REVIEW("PAYMENT_REVIEW"),

        REGULATORY_REVIEW("REGULATORY_REVIEW"),

        UNILATERAL("UNILATERAL"),

        VERIFICATION_REQUIRED("VERIFICATION_REQUIRED"),

        TRANSACTION_APPROVED_AWAITING_FUNDING("TRANSACTION_APPROVED_AWAITING_FUNDING"),

        NONE("NONE");

        private String value;

        ReasonCodeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ReasonCodeEnum fromValue(String value) {
            for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

