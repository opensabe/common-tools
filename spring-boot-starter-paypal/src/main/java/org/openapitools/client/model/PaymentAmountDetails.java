/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The additional details about the payment amount.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the amount &lt;code&gt;details&lt;/code&gt; object.&lt;/blockquote&gt;
 */
@JsonPropertyOrder({
        PaymentAmountDetails.JSON_PROPERTY_SUBTOTAL,
        PaymentAmountDetails.JSON_PROPERTY_SHIPPING,
        PaymentAmountDetails.JSON_PROPERTY_TAX,
        PaymentAmountDetails.JSON_PROPERTY_HANDLING_FEE,
        PaymentAmountDetails.JSON_PROPERTY_SHIPPING_DISCOUNT,
        PaymentAmountDetails.JSON_PROPERTY_INSURANCE,
        PaymentAmountDetails.JSON_PROPERTY_GIFT_WRAP
})
@JsonTypeName("Payment_Amount_Details")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class PaymentAmountDetails {
    public static final String JSON_PROPERTY_SUBTOTAL = "subtotal";
    public static final String JSON_PROPERTY_SHIPPING = "shipping";
    public static final String JSON_PROPERTY_TAX = "tax";
    public static final String JSON_PROPERTY_HANDLING_FEE = "handling_fee";
    public static final String JSON_PROPERTY_SHIPPING_DISCOUNT = "shipping_discount";
    public static final String JSON_PROPERTY_INSURANCE = "insurance";
    public static final String JSON_PROPERTY_GIFT_WRAP = "gift_wrap";
    private String subtotal;
    private String shipping;
    private String tax;
    private String handlingFee;
    private String shippingDiscount;
    private String insurance;
    private String giftWrap;

    public PaymentAmountDetails() {
    }

    public PaymentAmountDetails subtotal(String subtotal) {

        this.subtotal = subtotal;
        return this;
    }

    /**
     * The subtotal amount for the items. If the request includes line items, this property is **required**. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;subtotal&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return subtotal
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUBTOTAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSubtotal() {
        return subtotal;
    }


    @JsonProperty(JSON_PROPERTY_SUBTOTAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubtotal(String subtotal) {
        this.subtotal = subtotal;
    }


    public PaymentAmountDetails shipping(String shipping) {

        this.shipping = shipping;
        return this;
    }

    /**
     * The shipping fee. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;shipping&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return shipping
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SHIPPING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getShipping() {
        return shipping;
    }


    @JsonProperty(JSON_PROPERTY_SHIPPING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShipping(String shipping) {
        this.shipping = shipping;
    }


    public PaymentAmountDetails tax(String tax) {

        this.tax = tax;
        return this;
    }

    /**
     * The tax. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;tax&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return tax
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getTax() {
        return tax;
    }


    @JsonProperty(JSON_PROPERTY_TAX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTax(String tax) {
        this.tax = tax;
    }


    public PaymentAmountDetails handlingFee(String handlingFee) {

        this.handlingFee = handlingFee;
        return this;
    }

    /**
     * The handling fee. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;Supported for the PayPal payment method only.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;handling_fee&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return handlingFee
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_HANDLING_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getHandlingFee() {
        return handlingFee;
    }


    @JsonProperty(JSON_PROPERTY_HANDLING_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHandlingFee(String handlingFee) {
        this.handlingFee = handlingFee;
    }


    public PaymentAmountDetails shippingDiscount(String shippingDiscount) {

        this.shippingDiscount = shippingDiscount;
        return this;
    }

    /**
     * The shipping fee discount. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;Supported for the PayPal payment method only.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;shipping_discount&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return shippingDiscount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SHIPPING_DISCOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getShippingDiscount() {
        return shippingDiscount;
    }


    @JsonProperty(JSON_PROPERTY_SHIPPING_DISCOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShippingDiscount(String shippingDiscount) {
        this.shippingDiscount = shippingDiscount;
    }


    public PaymentAmountDetails insurance(String insurance) {

        this.insurance = insurance;
        return this;
    }

    /**
     * The insurance fee. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;Supported only for the PayPal payment method.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;insurance&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return insurance
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_INSURANCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInsurance() {
        return insurance;
    }


    @JsonProperty(JSON_PROPERTY_INSURANCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInsurance(String insurance) {
        this.insurance = insurance;
    }


    public PaymentAmountDetails giftWrap(String giftWrap) {

        this.giftWrap = giftWrap;
        return this;
    }

    /**
     * The gift wrap fee. Maximum length is 10 characters, which includes:&lt;ul&gt;&lt;li&gt;Seven digits before the decimal point.&lt;/li&gt;&lt;li&gt;The decimal point.&lt;/li&gt;&lt;li&gt;Two digits after the decimal point.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For an order authorization or capture, you cannot include the &lt;code&gt;gift_wrap&lt;/code&gt; parameter.&lt;/blockquote&gt;
     *
     * @return giftWrap
     * @deprecated
     **/
    @Deprecated
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_GIFT_WRAP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getGiftWrap() {
        return giftWrap;
    }


    @JsonProperty(JSON_PROPERTY_GIFT_WRAP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGiftWrap(String giftWrap) {
        this.giftWrap = giftWrap;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentAmountDetails paymentAmountDetails = (PaymentAmountDetails) o;
        return Objects.equals(this.subtotal, paymentAmountDetails.subtotal) &&
                Objects.equals(this.shipping, paymentAmountDetails.shipping) &&
                Objects.equals(this.tax, paymentAmountDetails.tax) &&
                Objects.equals(this.handlingFee, paymentAmountDetails.handlingFee) &&
                Objects.equals(this.shippingDiscount, paymentAmountDetails.shippingDiscount) &&
                Objects.equals(this.insurance, paymentAmountDetails.insurance) &&
                Objects.equals(this.giftWrap, paymentAmountDetails.giftWrap);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subtotal, shipping, tax, handlingFee, shippingDiscount, insurance, giftWrap);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentAmountDetails {\n");
        sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
        sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
        sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
        sb.append("    handlingFee: ").append(toIndentedString(handlingFee)).append("\n");
        sb.append("    shippingDiscount: ").append(toIndentedString(shippingDiscount)).append("\n");
        sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
        sb.append("    giftWrap: ").append(toIndentedString(giftWrap)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `subtotal` to the URL query string
        if (getSubtotal() != null) {
            try {
                joiner.add(String.format("%ssubtotal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubtotal()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `shipping` to the URL query string
        if (getShipping() != null) {
            try {
                joiner.add(String.format("%sshipping%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShipping()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `tax` to the URL query string
        if (getTax() != null) {
            try {
                joiner.add(String.format("%stax%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTax()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `handling_fee` to the URL query string
        if (getHandlingFee() != null) {
            try {
                joiner.add(String.format("%shandling_fee%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHandlingFee()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `shipping_discount` to the URL query string
        if (getShippingDiscount() != null) {
            try {
                joiner.add(String.format("%sshipping_discount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShippingDiscount()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `insurance` to the URL query string
        if (getInsurance() != null) {
            try {
                joiner.add(String.format("%sinsurance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInsurance()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `gift_wrap` to the URL query string
        if (getGiftWrap() != null) {
            try {
                joiner.add(String.format("%sgift_wrap%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGiftWrap()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

