/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The list of plans with details.
 */
@JsonPropertyOrder({
        PlanCollection.JSON_PROPERTY_PLANS,
        PlanCollection.JSON_PROPERTY_TOTAL_ITEMS,
        PlanCollection.JSON_PROPERTY_TOTAL_PAGES,
        PlanCollection.JSON_PROPERTY_LINKS
})
@JsonTypeName("plan_collection")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class PlanCollection {
    public static final String JSON_PROPERTY_PLANS = "plans";
    public static final String JSON_PROPERTY_TOTAL_ITEMS = "total_items";
    public static final String JSON_PROPERTY_TOTAL_PAGES = "total_pages";
    public static final String JSON_PROPERTY_LINKS = "links";
    private List<Plan> plans;
    private Integer totalItems;
    private Integer totalPages;
    private List<LinkDescription> links;

    public PlanCollection() {
    }

    @JsonCreator
    public PlanCollection(
            @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
    ) {
        this();
        this.links = links;
    }

    public PlanCollection plans(List<Plan> plans) {

        this.plans = plans;
        return this;
    }

    public PlanCollection addPlansItem(Plan plansItem) {
        if (this.plans == null) {
            this.plans = new ArrayList<>();
        }
        this.plans.add(plansItem);
        return this;
    }

    /**
     * An array of plans.
     *
     * @return plans
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PLANS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Plan> getPlans() {
        return plans;
    }


    @JsonProperty(JSON_PROPERTY_PLANS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlans(List<Plan> plans) {
        this.plans = plans;
    }


    public PlanCollection totalItems(Integer totalItems) {

        this.totalItems = totalItems;
        return this;
    }

    /**
     * The total number of items.
     * minimum: 0
     * maximum: 500000000
     *
     * @return totalItems
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TOTAL_ITEMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getTotalItems() {
        return totalItems;
    }


    @JsonProperty(JSON_PROPERTY_TOTAL_ITEMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotalItems(Integer totalItems) {
        this.totalItems = totalItems;
    }


    public PlanCollection totalPages(Integer totalPages) {

        this.totalPages = totalPages;
        return this;
    }

    /**
     * The total number of pages.
     * minimum: 0
     * maximum: 100000000
     *
     * @return totalPages
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getTotalPages() {
        return totalPages;
    }


    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotalPages(Integer totalPages) {
        this.totalPages = totalPages;
    }


    /**
     * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
     *
     * @return links
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<LinkDescription> getLinks() {
        return links;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlanCollection planCollection = (PlanCollection) o;
        return Objects.equals(this.plans, planCollection.plans) &&
                Objects.equals(this.totalItems, planCollection.totalItems) &&
                Objects.equals(this.totalPages, planCollection.totalPages) &&
                Objects.equals(this.links, planCollection.links);
    }

    @Override
    public int hashCode() {
        return Objects.hash(plans, totalItems, totalPages, links);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PlanCollection {\n");
        sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
        sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
        sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `plans` to the URL query string
        if (getPlans() != null) {
            for (int i = 0; i < getPlans().size(); i++) {
                if (getPlans().get(i) != null) {
                    joiner.add(getPlans().get(i).toUrlQueryString(String.format("%splans%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `total_items` to the URL query string
        if (getTotalItems() != null) {
            try {
                joiner.add(String.format("%stotal_items%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalItems()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `total_pages` to the URL query string
        if (getTotalPages() != null) {
            try {
                joiner.add(String.format("%stotal_pages%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalPages()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `links` to the URL query string
        if (getLinks() != null) {
            for (int i = 0; i < getLinks().size(); i++) {
                if (getLinks().get(i) != null) {
                    joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }

}

