/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The payment details.
 */
@JsonPropertyOrder({
        Payment.JSON_PROPERTY_ID,
        Payment.JSON_PROPERTY_INTENT,
        Payment.JSON_PROPERTY_PAYER,
        Payment.JSON_PROPERTY_APPLICATION_CONTEXT,
        Payment.JSON_PROPERTY_TRANSACTIONS,
        Payment.JSON_PROPERTY_STATE,
        Payment.JSON_PROPERTY_EXPERIENCE_PROFILE_ID,
        Payment.JSON_PROPERTY_NOTE_TO_PAYER,
        Payment.JSON_PROPERTY_REDIRECT_URLS,
        Payment.JSON_PROPERTY_FAILURE_REASON,
        Payment.JSON_PROPERTY_CREATE_TIME,
        Payment.JSON_PROPERTY_UPDATE_TIME,
        Payment.JSON_PROPERTY_LINKS
})
@JsonTypeName("payment")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class Payment {
    public static final String JSON_PROPERTY_ID = "id";
    public static final String JSON_PROPERTY_INTENT = "intent";
    public static final String JSON_PROPERTY_PAYER = "payer";
    public static final String JSON_PROPERTY_APPLICATION_CONTEXT = "application_context";
    public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
    public static final String JSON_PROPERTY_STATE = "state";
    public static final String JSON_PROPERTY_EXPERIENCE_PROFILE_ID = "experience_profile_id";
    public static final String JSON_PROPERTY_NOTE_TO_PAYER = "note_to_payer";
    public static final String JSON_PROPERTY_REDIRECT_URLS = "redirect_urls";
    public static final String JSON_PROPERTY_FAILURE_REASON = "failure_reason";
    public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
    public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
    public static final String JSON_PROPERTY_LINKS = "links";
    private String id;
    private IntentEnum intent;
    private Payer payer;
    private ApplicationContext applicationContext;
    private List<Transaction> transactions;
    private StateEnum state;
    private String experienceProfileId;
    private String noteToPayer;
    private RedirectURLs redirectUrls;
    private FailureReasonEnum failureReason;
    private OffsetDateTime createTime;
    private OffsetDateTime updateTime;
    private List<LinkDescription> links;
    public Payment() {
    }

    @JsonCreator
    public Payment(
            @JsonProperty(JSON_PROPERTY_ID) String id,
            @JsonProperty(JSON_PROPERTY_STATE) StateEnum state,
            @JsonProperty(JSON_PROPERTY_FAILURE_REASON) FailureReasonEnum failureReason,
            @JsonProperty(JSON_PROPERTY_CREATE_TIME) OffsetDateTime createTime,
            @JsonProperty(JSON_PROPERTY_UPDATE_TIME) OffsetDateTime updateTime,
            @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
    ) {
        this();
        this.id = id;
        this.state = state;
        this.failureReason = failureReason;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.links = links;
    }

    /**
     * The ID of the payment.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getId() {
        return id;
    }

    public Payment intent(IntentEnum intent) {

        this.intent = intent;
        return this;
    }

    /**
     * The payment intent. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;sale&lt;/code&gt;. Makes an immediate payment.&lt;/li&gt;&lt;li&gt;&lt;code&gt;authorize&lt;/code&gt;. [Authorizes a payment for capture later](/docs/integration/direct/payments/authorize-and-capture-payments/).&lt;/li&gt;&lt;li&gt;&lt;code&gt;order&lt;/code&gt;. [Creates an order](/docs/integration/direct/payments/orders/).&lt;/li&gt;&lt;/ul&gt;
     *
     * @return intent
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INTENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public IntentEnum getIntent() {
        return intent;
    }

    @JsonProperty(JSON_PROPERTY_INTENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIntent(IntentEnum intent) {
        this.intent = intent;
    }

    public Payment payer(Payer payer) {

        this.payer = payer;
        return this;
    }

    /**
     * Get payer
     *
     * @return payer
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PAYER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Payer getPayer() {
        return payer;
    }

    @JsonProperty(JSON_PROPERTY_PAYER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPayer(Payer payer) {
        this.payer = payer;
    }

    public Payment applicationContext(ApplicationContext applicationContext) {

        this.applicationContext = applicationContext;
        return this;
    }

    /**
     * Get applicationContext
     *
     * @return applicationContext
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPLICATION_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ApplicationContext getApplicationContext() {
        return applicationContext;
    }

    @JsonProperty(JSON_PROPERTY_APPLICATION_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApplicationContext(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    public Payment transactions(List<Transaction> transactions) {

        this.transactions = transactions;
        return this;
    }

    public Payment addTransactionsItem(Transaction transactionsItem) {
        if (this.transactions == null) {
            this.transactions = new ArrayList<>();
        }
        this.transactions.add(transactionsItem);
        return this;
    }

    /**
     * An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment. For update and execute payment calls, the **&#x60;transactions&#x60;** object accepts the **&#x60;amount&#x60;** object only.
     *
     * @return transactions
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Transaction> getTransactions() {
        return transactions;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    /**
     * The state of the payment, authorization, or order transaction. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;created&lt;/code&gt;. The transaction was successfully created.&lt;/li&gt;&lt;li&gt;&lt;code&gt;approved&lt;/code&gt;. The customer approved the transaction. The state changes from &lt;code&gt;created&lt;/code&gt; to &lt;code&gt;approved&lt;/code&gt; on generation of the &lt;code&gt;sale_id&lt;/code&gt; for sale transactions, &lt;code&gt;authorization_id&lt;/code&gt; for authorization transactions, or &lt;code&gt;order_id&lt;/code&gt; for order transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;failed&lt;/code&gt;. The transaction request failed.&lt;/li&gt;&lt;/ul&gt;
     *
     * @return state
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StateEnum getState() {
        return state;
    }

    public Payment experienceProfileId(String experienceProfileId) {

        this.experienceProfileId = experienceProfileId;
        return this;
    }

    /**
     * Deprecated. The PayPal-generated ID for the merchant&#39;s payment experience profile. For information, see [create web experience profile](/docs/api/payment-experience/v1/#web-profiles_create). Use application_context instead.
     *
     * @return experienceProfileId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXPERIENCE_PROFILE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getExperienceProfileId() {
        return experienceProfileId;
    }

    @JsonProperty(JSON_PROPERTY_EXPERIENCE_PROFILE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExperienceProfileId(String experienceProfileId) {
        this.experienceProfileId = experienceProfileId;
    }

    public Payment noteToPayer(String noteToPayer) {

        this.noteToPayer = noteToPayer;
        return this;
    }

    /**
     * A free-form field that clients can use to send a note to the payer.
     *
     * @return noteToPayer
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNoteToPayer() {
        return noteToPayer;
    }

    @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNoteToPayer(String noteToPayer) {
        this.noteToPayer = noteToPayer;
    }

    public Payment redirectUrls(RedirectURLs redirectUrls) {

        this.redirectUrls = redirectUrls;
        return this;
    }

    /**
     * Get redirectUrls
     *
     * @return redirectUrls
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REDIRECT_URLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public RedirectURLs getRedirectUrls() {
        return redirectUrls;
    }

    @JsonProperty(JSON_PROPERTY_REDIRECT_URLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRedirectUrls(RedirectURLs redirectUrls) {
        this.redirectUrls = redirectUrls;
    }

    /**
     * The reason code for a payment failure.
     *
     * @return failureReason
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FAILURE_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public FailureReasonEnum getFailureReason() {
        return failureReason;
    }

    /**
     * The date and time when the payment was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getCreateTime() {
        return createTime;
    }

    /**
     * The date and time when the payment was updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getUpdateTime() {
        return updateTime;
    }

    /**
     * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
     *
     * @return links
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<LinkDescription> getLinks() {
        return links;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Payment payment = (Payment) o;
        return Objects.equals(this.id, payment.id) &&
                Objects.equals(this.intent, payment.intent) &&
                Objects.equals(this.payer, payment.payer) &&
                Objects.equals(this.applicationContext, payment.applicationContext) &&
                Objects.equals(this.transactions, payment.transactions) &&
                Objects.equals(this.state, payment.state) &&
                Objects.equals(this.experienceProfileId, payment.experienceProfileId) &&
                Objects.equals(this.noteToPayer, payment.noteToPayer) &&
                Objects.equals(this.redirectUrls, payment.redirectUrls) &&
                Objects.equals(this.failureReason, payment.failureReason) &&
                Objects.equals(this.createTime, payment.createTime) &&
                Objects.equals(this.updateTime, payment.updateTime) &&
                Objects.equals(this.links, payment.links);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, intent, payer, applicationContext, transactions, state, experienceProfileId, noteToPayer, redirectUrls, failureReason, createTime, updateTime, links);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Payment {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
        sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
        sb.append("    applicationContext: ").append(toIndentedString(applicationContext)).append("\n");
        sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    experienceProfileId: ").append(toIndentedString(experienceProfileId)).append("\n");
        sb.append("    noteToPayer: ").append(toIndentedString(noteToPayer)).append("\n");
        sb.append("    redirectUrls: ").append(toIndentedString(redirectUrls)).append("\n");
        sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            try {
                joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `intent` to the URL query string
        if (getIntent() != null) {
            try {
                joiner.add(String.format("%sintent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIntent()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `payer` to the URL query string
        if (getPayer() != null) {
            joiner.add(getPayer().toUrlQueryString(prefix + "payer" + suffix));
        }

        // add `application_context` to the URL query string
        if (getApplicationContext() != null) {
            joiner.add(getApplicationContext().toUrlQueryString(prefix + "application_context" + suffix));
        }

        // add `transactions` to the URL query string
        if (getTransactions() != null) {
            for (int i = 0; i < getTransactions().size(); i++) {
                if (getTransactions().get(i) != null) {
                    joiner.add(getTransactions().get(i).toUrlQueryString(String.format("%stransactions%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `state` to the URL query string
        if (getState() != null) {
            try {
                joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `experience_profile_id` to the URL query string
        if (getExperienceProfileId() != null) {
            try {
                joiner.add(String.format("%sexperience_profile_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExperienceProfileId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `note_to_payer` to the URL query string
        if (getNoteToPayer() != null) {
            try {
                joiner.add(String.format("%snote_to_payer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNoteToPayer()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `redirect_urls` to the URL query string
        if (getRedirectUrls() != null) {
            joiner.add(getRedirectUrls().toUrlQueryString(prefix + "redirect_urls" + suffix));
        }

        // add `failure_reason` to the URL query string
        if (getFailureReason() != null) {
            try {
                joiner.add(String.format("%sfailure_reason%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFailureReason()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `create_time` to the URL query string
        if (getCreateTime() != null) {
            try {
                joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `update_time` to the URL query string
        if (getUpdateTime() != null) {
            try {
                joiner.add(String.format("%supdate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `links` to the URL query string
        if (getLinks() != null) {
            for (int i = 0; i < getLinks().size(); i++) {
                if (getLinks().get(i) != null) {
                    joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }

    /**
     * The payment intent. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;sale&lt;/code&gt;. Makes an immediate payment.&lt;/li&gt;&lt;li&gt;&lt;code&gt;authorize&lt;/code&gt;. [Authorizes a payment for capture later](/docs/integration/direct/payments/authorize-and-capture-payments/).&lt;/li&gt;&lt;li&gt;&lt;code&gt;order&lt;/code&gt;. [Creates an order](/docs/integration/direct/payments/orders/).&lt;/li&gt;&lt;/ul&gt;
     */
    public enum IntentEnum {
        SALE("sale"),

        AUTHORIZE("authorize"),

        ORDER("order");

        private String value;

        IntentEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static IntentEnum fromValue(String value) {
            for (IntentEnum b : IntentEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The state of the payment, authorization, or order transaction. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;created&lt;/code&gt;. The transaction was successfully created.&lt;/li&gt;&lt;li&gt;&lt;code&gt;approved&lt;/code&gt;. The customer approved the transaction. The state changes from &lt;code&gt;created&lt;/code&gt; to &lt;code&gt;approved&lt;/code&gt; on generation of the &lt;code&gt;sale_id&lt;/code&gt; for sale transactions, &lt;code&gt;authorization_id&lt;/code&gt; for authorization transactions, or &lt;code&gt;order_id&lt;/code&gt; for order transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;failed&lt;/code&gt;. The transaction request failed.&lt;/li&gt;&lt;/ul&gt;
     */
    public enum StateEnum {
        CREATED("created"),

        APPROVED("approved"),

        FAILED("failed"),

        PARTIALLY_COMPLETED("partially_completed"),

        IN_PROGRESS("in_progress");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The reason code for a payment failure.
     */
    public enum FailureReasonEnum {
        UNABLE_TO_COMPLETE_TRANSACTION("UNABLE_TO_COMPLETE_TRANSACTION"),

        INVALID_PAYMENT_METHOD("INVALID_PAYMENT_METHOD"),

        PAYER_CANNOT_PAY("PAYER_CANNOT_PAY"),

        CANNOT_PAY_THIS_PAYEE("CANNOT_PAY_THIS_PAYEE"),

        REDIRECT_REQUIRED("REDIRECT_REQUIRED"),

        PAYEE_FILTER_RESTRICTIONS("PAYEE_FILTER_RESTRICTIONS");

        private String value;

        FailureReasonEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static FailureReasonEnum fromValue(String value) {
            for (FailureReasonEnum b : FailureReasonEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

