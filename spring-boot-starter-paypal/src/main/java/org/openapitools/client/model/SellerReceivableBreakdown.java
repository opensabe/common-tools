/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ExchangeRate;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.PlatformFee;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.
 */
@JsonPropertyOrder({
  SellerReceivableBreakdown.JSON_PROPERTY_GROSS_AMOUNT,
  SellerReceivableBreakdown.JSON_PROPERTY_PAYPAL_FEE,
  SellerReceivableBreakdown.JSON_PROPERTY_PAYPAL_FEE_IN_RECEIVABLE_CURRENCY,
  SellerReceivableBreakdown.JSON_PROPERTY_NET_AMOUNT,
  SellerReceivableBreakdown.JSON_PROPERTY_RECEIVABLE_AMOUNT,
  SellerReceivableBreakdown.JSON_PROPERTY_EXCHANGE_RATE,
  SellerReceivableBreakdown.JSON_PROPERTY_PLATFORM_FEES
})
@JsonTypeName("seller_receivable_breakdown")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class SellerReceivableBreakdown {
  public static final String JSON_PROPERTY_GROSS_AMOUNT = "gross_amount";
  private Money grossAmount;

  public static final String JSON_PROPERTY_PAYPAL_FEE = "paypal_fee";
  private Money paypalFee;

  public static final String JSON_PROPERTY_PAYPAL_FEE_IN_RECEIVABLE_CURRENCY = "paypal_fee_in_receivable_currency";
  private Money paypalFeeInReceivableCurrency;

  public static final String JSON_PROPERTY_NET_AMOUNT = "net_amount";
  private Money netAmount;

  public static final String JSON_PROPERTY_RECEIVABLE_AMOUNT = "receivable_amount";
  private Money receivableAmount;

  public static final String JSON_PROPERTY_EXCHANGE_RATE = "exchange_rate";
  private ExchangeRate exchangeRate;

  public static final String JSON_PROPERTY_PLATFORM_FEES = "platform_fees";
  private List<PlatformFee> platformFees;

  public SellerReceivableBreakdown() {
  }

  public SellerReceivableBreakdown grossAmount(Money grossAmount) {
    
    this.grossAmount = grossAmount;
    return this;
  }

   /**
   * Get grossAmount
   * @return grossAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROSS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Money getGrossAmount() {
    return grossAmount;
  }


  @JsonProperty(JSON_PROPERTY_GROSS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGrossAmount(Money grossAmount) {
    this.grossAmount = grossAmount;
  }


  public SellerReceivableBreakdown paypalFee(Money paypalFee) {
    
    this.paypalFee = paypalFee;
    return this;
  }

   /**
   * Get paypalFee
   * @return paypalFee
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYPAL_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getPaypalFee() {
    return paypalFee;
  }


  @JsonProperty(JSON_PROPERTY_PAYPAL_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaypalFee(Money paypalFee) {
    this.paypalFee = paypalFee;
  }


  public SellerReceivableBreakdown paypalFeeInReceivableCurrency(Money paypalFeeInReceivableCurrency) {
    
    this.paypalFeeInReceivableCurrency = paypalFeeInReceivableCurrency;
    return this;
  }

   /**
   * Get paypalFeeInReceivableCurrency
   * @return paypalFeeInReceivableCurrency
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYPAL_FEE_IN_RECEIVABLE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getPaypalFeeInReceivableCurrency() {
    return paypalFeeInReceivableCurrency;
  }


  @JsonProperty(JSON_PROPERTY_PAYPAL_FEE_IN_RECEIVABLE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaypalFeeInReceivableCurrency(Money paypalFeeInReceivableCurrency) {
    this.paypalFeeInReceivableCurrency = paypalFeeInReceivableCurrency;
  }


  public SellerReceivableBreakdown netAmount(Money netAmount) {
    
    this.netAmount = netAmount;
    return this;
  }

   /**
   * Get netAmount
   * @return netAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getNetAmount() {
    return netAmount;
  }


  @JsonProperty(JSON_PROPERTY_NET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetAmount(Money netAmount) {
    this.netAmount = netAmount;
  }


  public SellerReceivableBreakdown receivableAmount(Money receivableAmount) {
    
    this.receivableAmount = receivableAmount;
    return this;
  }

   /**
   * Get receivableAmount
   * @return receivableAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECEIVABLE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getReceivableAmount() {
    return receivableAmount;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVABLE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReceivableAmount(Money receivableAmount) {
    this.receivableAmount = receivableAmount;
  }


  public SellerReceivableBreakdown exchangeRate(ExchangeRate exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExchangeRate getExchangeRate() {
    return exchangeRate;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeRate(ExchangeRate exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public SellerReceivableBreakdown platformFees(List<PlatformFee> platformFees) {
    
    this.platformFees = platformFees;
    return this;
  }

  public SellerReceivableBreakdown addPlatformFeesItem(PlatformFee platformFeesItem) {
    if (this.platformFees == null) {
      this.platformFees = new ArrayList<>();
    }
    this.platformFees.add(platformFeesItem);
    return this;
  }

   /**
   * An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment.
   * @return platformFees
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLATFORM_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PlatformFee> getPlatformFees() {
    return platformFees;
  }


  @JsonProperty(JSON_PROPERTY_PLATFORM_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlatformFees(List<PlatformFee> platformFees) {
    this.platformFees = platformFees;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellerReceivableBreakdown sellerReceivableBreakdown = (SellerReceivableBreakdown) o;
    return Objects.equals(this.grossAmount, sellerReceivableBreakdown.grossAmount) &&
        Objects.equals(this.paypalFee, sellerReceivableBreakdown.paypalFee) &&
        Objects.equals(this.paypalFeeInReceivableCurrency, sellerReceivableBreakdown.paypalFeeInReceivableCurrency) &&
        Objects.equals(this.netAmount, sellerReceivableBreakdown.netAmount) &&
        Objects.equals(this.receivableAmount, sellerReceivableBreakdown.receivableAmount) &&
        Objects.equals(this.exchangeRate, sellerReceivableBreakdown.exchangeRate) &&
        Objects.equals(this.platformFees, sellerReceivableBreakdown.platformFees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grossAmount, paypalFee, paypalFeeInReceivableCurrency, netAmount, receivableAmount, exchangeRate, platformFees);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellerReceivableBreakdown {\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    paypalFee: ").append(toIndentedString(paypalFee)).append("\n");
    sb.append("    paypalFeeInReceivableCurrency: ").append(toIndentedString(paypalFeeInReceivableCurrency)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    receivableAmount: ").append(toIndentedString(receivableAmount)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    platformFees: ").append(toIndentedString(platformFees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `gross_amount` to the URL query string
    if (getGrossAmount() != null) {
      joiner.add(getGrossAmount().toUrlQueryString(prefix + "gross_amount" + suffix));
    }

    // add `paypal_fee` to the URL query string
    if (getPaypalFee() != null) {
      joiner.add(getPaypalFee().toUrlQueryString(prefix + "paypal_fee" + suffix));
    }

    // add `paypal_fee_in_receivable_currency` to the URL query string
    if (getPaypalFeeInReceivableCurrency() != null) {
      joiner.add(getPaypalFeeInReceivableCurrency().toUrlQueryString(prefix + "paypal_fee_in_receivable_currency" + suffix));
    }

    // add `net_amount` to the URL query string
    if (getNetAmount() != null) {
      joiner.add(getNetAmount().toUrlQueryString(prefix + "net_amount" + suffix));
    }

    // add `receivable_amount` to the URL query string
    if (getReceivableAmount() != null) {
      joiner.add(getReceivableAmount().toUrlQueryString(prefix + "receivable_amount" + suffix));
    }

    // add `exchange_rate` to the URL query string
    if (getExchangeRate() != null) {
      joiner.add(getExchangeRate().toUrlQueryString(prefix + "exchange_rate" + suffix));
    }

    // add `platform_fees` to the URL query string
    if (getPlatformFees() != null) {
      for (int i = 0; i < getPlatformFees().size(); i++) {
        if (getPlatformFees().get(i) != null) {
          joiner.add(getPlatformFees().get(i).toUrlQueryString(String.format("%splatform_fees%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

