/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.&lt;br/&gt;For example, &#x60;address_portable.address_line_1&#x60; is usually a combination of &#x60;address_details.street_number&#x60;, &#x60;street_name&#x60;, and &#x60;street_type&#x60;.
 */
@JsonPropertyOrder({
        AddressDetails.JSON_PROPERTY_STREET_NUMBER,
        AddressDetails.JSON_PROPERTY_STREET_NAME,
        AddressDetails.JSON_PROPERTY_STREET_TYPE,
        AddressDetails.JSON_PROPERTY_DELIVERY_SERVICE,
        AddressDetails.JSON_PROPERTY_BUILDING_NAME,
        AddressDetails.JSON_PROPERTY_SUB_BUILDING
})
@JsonTypeName("Address_Details")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class AddressDetails {
    public static final String JSON_PROPERTY_STREET_NUMBER = "street_number";
    public static final String JSON_PROPERTY_STREET_NAME = "street_name";
    public static final String JSON_PROPERTY_STREET_TYPE = "street_type";
    public static final String JSON_PROPERTY_DELIVERY_SERVICE = "delivery_service";
    public static final String JSON_PROPERTY_BUILDING_NAME = "building_name";
    public static final String JSON_PROPERTY_SUB_BUILDING = "sub_building";
    private String streetNumber;
    private String streetName;
    private String streetType;
    private String deliveryService;
    private String buildingName;
    private String subBuilding;

    public AddressDetails() {
    }

    public AddressDetails streetNumber(String streetNumber) {

        this.streetNumber = streetNumber;
        return this;
    }

    /**
     * The street number.
     *
     * @return streetNumber
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STREET_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStreetNumber() {
        return streetNumber;
    }


    @JsonProperty(JSON_PROPERTY_STREET_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStreetNumber(String streetNumber) {
        this.streetNumber = streetNumber;
    }


    public AddressDetails streetName(String streetName) {

        this.streetName = streetName;
        return this;
    }

    /**
     * The street name. Just &#x60;Drury&#x60; in &#x60;Drury Lane&#x60;.
     *
     * @return streetName
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STREET_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStreetName() {
        return streetName;
    }


    @JsonProperty(JSON_PROPERTY_STREET_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStreetName(String streetName) {
        this.streetName = streetName;
    }


    public AddressDetails streetType(String streetType) {

        this.streetType = streetType;
        return this;
    }

    /**
     * The street type. For example, avenue, boulevard, road, or expressway.
     *
     * @return streetType
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STREET_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStreetType() {
        return streetType;
    }


    @JsonProperty(JSON_PROPERTY_STREET_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStreetType(String streetType) {
        this.streetType = streetType;
    }


    public AddressDetails deliveryService(String deliveryService) {

        this.deliveryService = deliveryService;
        return this;
    }

    /**
     * The delivery service. Post office box, bag number, or post office name.
     *
     * @return deliveryService
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DELIVERY_SERVICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDeliveryService() {
        return deliveryService;
    }


    @JsonProperty(JSON_PROPERTY_DELIVERY_SERVICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeliveryService(String deliveryService) {
        this.deliveryService = deliveryService;
    }


    public AddressDetails buildingName(String buildingName) {

        this.buildingName = buildingName;
        return this;
    }

    /**
     * A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, &lt;code&gt;Craven House&lt;/code&gt;.
     *
     * @return buildingName
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BUILDING_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getBuildingName() {
        return buildingName;
    }


    @JsonProperty(JSON_PROPERTY_BUILDING_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBuildingName(String buildingName) {
        this.buildingName = buildingName;
    }


    public AddressDetails subBuilding(String subBuilding) {

        this.subBuilding = subBuilding;
        return this;
    }

    /**
     * The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.
     *
     * @return subBuilding
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUB_BUILDING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSubBuilding() {
        return subBuilding;
    }


    @JsonProperty(JSON_PROPERTY_SUB_BUILDING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubBuilding(String subBuilding) {
        this.subBuilding = subBuilding;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddressDetails addressDetails = (AddressDetails) o;
        return Objects.equals(this.streetNumber, addressDetails.streetNumber) &&
                Objects.equals(this.streetName, addressDetails.streetName) &&
                Objects.equals(this.streetType, addressDetails.streetType) &&
                Objects.equals(this.deliveryService, addressDetails.deliveryService) &&
                Objects.equals(this.buildingName, addressDetails.buildingName) &&
                Objects.equals(this.subBuilding, addressDetails.subBuilding);
    }

    @Override
    public int hashCode() {
        return Objects.hash(streetNumber, streetName, streetType, deliveryService, buildingName, subBuilding);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AddressDetails {\n");
        sb.append("    streetNumber: ").append(toIndentedString(streetNumber)).append("\n");
        sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
        sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
        sb.append("    deliveryService: ").append(toIndentedString(deliveryService)).append("\n");
        sb.append("    buildingName: ").append(toIndentedString(buildingName)).append("\n");
        sb.append("    subBuilding: ").append(toIndentedString(subBuilding)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `street_number` to the URL query string
        if (getStreetNumber() != null) {
            try {
                joiner.add(String.format("%sstreet_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStreetNumber()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `street_name` to the URL query string
        if (getStreetName() != null) {
            try {
                joiner.add(String.format("%sstreet_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStreetName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `street_type` to the URL query string
        if (getStreetType() != null) {
            try {
                joiner.add(String.format("%sstreet_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStreetType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `delivery_service` to the URL query string
        if (getDeliveryService() != null) {
            try {
                joiner.add(String.format("%sdelivery_service%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeliveryService()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `building_name` to the URL query string
        if (getBuildingName() != null) {
            try {
                joiner.add(String.format("%sbuilding_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBuildingName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `sub_building` to the URL query string
        if (getSubBuilding() != null) {
            try {
                joiner.add(String.format("%ssub_building%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubBuilding()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

