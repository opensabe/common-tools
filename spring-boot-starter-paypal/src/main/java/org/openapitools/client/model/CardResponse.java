/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The payment card to use to fund a payment. Card can be a credit or debit card.
 */
@JsonPropertyOrder({
        CardResponse.JSON_PROPERTY_LAST_DIGITS,
        CardResponse.JSON_PROPERTY_BRAND,
        CardResponse.JSON_PROPERTY_TYPE,
        CardResponse.JSON_PROPERTY_AUTHENTICATION_RESULT
})
@JsonTypeName("card_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class CardResponse {
    public static final String JSON_PROPERTY_LAST_DIGITS = "last_digits";
    public static final String JSON_PROPERTY_BRAND = "brand";
    public static final String JSON_PROPERTY_TYPE = "type";
    public static final String JSON_PROPERTY_AUTHENTICATION_RESULT = "authentication_result";
    private String lastDigits;
    private CardBrand brand;
    private TypeEnum type;
    private AuthenticationResponse authenticationResult;
    public CardResponse() {
    }

    @JsonCreator
    public CardResponse(
            @JsonProperty(JSON_PROPERTY_LAST_DIGITS) String lastDigits,
            @JsonProperty(JSON_PROPERTY_TYPE) TypeEnum type
    ) {
        this();
        this.lastDigits = lastDigits;
        this.type = type;
    }

    /**
     * The last digits of the payment card.
     *
     * @return lastDigits
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LAST_DIGITS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getLastDigits() {
        return lastDigits;
    }

    public CardResponse brand(CardBrand brand) {

        this.brand = brand;
        return this;
    }

    /**
     * Get brand
     *
     * @return brand
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BRAND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public CardBrand getBrand() {
        return brand;
    }

    @JsonProperty(JSON_PROPERTY_BRAND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBrand(CardBrand brand) {
        this.brand = brand;
    }

    /**
     * The payment card type.
     *
     * @return type
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TypeEnum getType() {
        return type;
    }

    public CardResponse authenticationResult(AuthenticationResponse authenticationResult) {

        this.authenticationResult = authenticationResult;
        return this;
    }

    /**
     * Get authenticationResult
     *
     * @return authenticationResult
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AUTHENTICATION_RESULT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public AuthenticationResponse getAuthenticationResult() {
        return authenticationResult;
    }

    @JsonProperty(JSON_PROPERTY_AUTHENTICATION_RESULT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthenticationResult(AuthenticationResponse authenticationResult) {
        this.authenticationResult = authenticationResult;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CardResponse cardResponse = (CardResponse) o;
        return Objects.equals(this.lastDigits, cardResponse.lastDigits) &&
                Objects.equals(this.brand, cardResponse.brand) &&
                Objects.equals(this.type, cardResponse.type) &&
                Objects.equals(this.authenticationResult, cardResponse.authenticationResult);
    }

    @Override
    public int hashCode() {
        return Objects.hash(lastDigits, brand, type, authenticationResult);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CardResponse {\n");
        sb.append("    lastDigits: ").append(toIndentedString(lastDigits)).append("\n");
        sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    authenticationResult: ").append(toIndentedString(authenticationResult)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `last_digits` to the URL query string
        if (getLastDigits() != null) {
            try {
                joiner.add(String.format("%slast_digits%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastDigits()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `brand` to the URL query string
        if (getBrand() != null) {
            try {
                joiner.add(String.format("%sbrand%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBrand()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `type` to the URL query string
        if (getType() != null) {
            try {
                joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `authentication_result` to the URL query string
        if (getAuthenticationResult() != null) {
            joiner.add(getAuthenticationResult().toUrlQueryString(prefix + "authentication_result" + suffix));
        }

        return joiner.toString();
    }

    /**
     * The payment card type.
     */
    public enum TypeEnum {
        CREDIT("CREDIT"),

        DEBIT("DEBIT"),

        PREPAID("PREPAID"),

        UNKNOWN("UNKNOWN");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

