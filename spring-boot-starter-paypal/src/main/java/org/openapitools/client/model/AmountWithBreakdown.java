/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Money;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The breakdown details for the amount. Includes the gross, tax, fee, and shipping amounts.
 */
@JsonPropertyOrder({
  AmountWithBreakdown.JSON_PROPERTY_GROSS_AMOUNT,
  AmountWithBreakdown.JSON_PROPERTY_TOTAL_ITEM_AMOUNT,
  AmountWithBreakdown.JSON_PROPERTY_FEE_AMOUNT,
  AmountWithBreakdown.JSON_PROPERTY_SHIPPING_AMOUNT,
  AmountWithBreakdown.JSON_PROPERTY_TAX_AMOUNT,
  AmountWithBreakdown.JSON_PROPERTY_NET_AMOUNT
})
@JsonTypeName("amount_with_breakdown")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class AmountWithBreakdown {
  public static final String JSON_PROPERTY_GROSS_AMOUNT = "gross_amount";
  private Money grossAmount;

  public static final String JSON_PROPERTY_TOTAL_ITEM_AMOUNT = "total_item_amount";
  private Money totalItemAmount;

  public static final String JSON_PROPERTY_FEE_AMOUNT = "fee_amount";
  private Money feeAmount;

  public static final String JSON_PROPERTY_SHIPPING_AMOUNT = "shipping_amount";
  private Money shippingAmount;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "tax_amount";
  private Money taxAmount;

  public static final String JSON_PROPERTY_NET_AMOUNT = "net_amount";
  private Money netAmount;

  public AmountWithBreakdown() {
  }

  public AmountWithBreakdown grossAmount(Money grossAmount) {
    
    this.grossAmount = grossAmount;
    return this;
  }

   /**
   * Get grossAmount
   * @return grossAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROSS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Money getGrossAmount() {
    return grossAmount;
  }


  @JsonProperty(JSON_PROPERTY_GROSS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGrossAmount(Money grossAmount) {
    this.grossAmount = grossAmount;
  }


  public AmountWithBreakdown totalItemAmount(Money totalItemAmount) {
    
    this.totalItemAmount = totalItemAmount;
    return this;
  }

   /**
   * Get totalItemAmount
   * @return totalItemAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_ITEM_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getTotalItemAmount() {
    return totalItemAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ITEM_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalItemAmount(Money totalItemAmount) {
    this.totalItemAmount = totalItemAmount;
  }


  public AmountWithBreakdown feeAmount(Money feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * Get feeAmount
   * @return feeAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getFeeAmount() {
    return feeAmount;
  }


  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeAmount(Money feeAmount) {
    this.feeAmount = feeAmount;
  }


  public AmountWithBreakdown shippingAmount(Money shippingAmount) {
    
    this.shippingAmount = shippingAmount;
    return this;
  }

   /**
   * Get shippingAmount
   * @return shippingAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getShippingAmount() {
    return shippingAmount;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippingAmount(Money shippingAmount) {
    this.shippingAmount = shippingAmount;
  }


  public AmountWithBreakdown taxAmount(Money taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Get taxAmount
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getTaxAmount() {
    return taxAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAmount(Money taxAmount) {
    this.taxAmount = taxAmount;
  }


  public AmountWithBreakdown netAmount(Money netAmount) {
    
    this.netAmount = netAmount;
    return this;
  }

   /**
   * Get netAmount
   * @return netAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getNetAmount() {
    return netAmount;
  }


  @JsonProperty(JSON_PROPERTY_NET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetAmount(Money netAmount) {
    this.netAmount = netAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmountWithBreakdown amountWithBreakdown = (AmountWithBreakdown) o;
    return Objects.equals(this.grossAmount, amountWithBreakdown.grossAmount) &&
        Objects.equals(this.totalItemAmount, amountWithBreakdown.totalItemAmount) &&
        Objects.equals(this.feeAmount, amountWithBreakdown.feeAmount) &&
        Objects.equals(this.shippingAmount, amountWithBreakdown.shippingAmount) &&
        Objects.equals(this.taxAmount, amountWithBreakdown.taxAmount) &&
        Objects.equals(this.netAmount, amountWithBreakdown.netAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grossAmount, totalItemAmount, feeAmount, shippingAmount, taxAmount, netAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmountWithBreakdown {\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    totalItemAmount: ").append(toIndentedString(totalItemAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `gross_amount` to the URL query string
    if (getGrossAmount() != null) {
      joiner.add(getGrossAmount().toUrlQueryString(prefix + "gross_amount" + suffix));
    }

    // add `total_item_amount` to the URL query string
    if (getTotalItemAmount() != null) {
      joiner.add(getTotalItemAmount().toUrlQueryString(prefix + "total_item_amount" + suffix));
    }

    // add `fee_amount` to the URL query string
    if (getFeeAmount() != null) {
      joiner.add(getFeeAmount().toUrlQueryString(prefix + "fee_amount" + suffix));
    }

    // add `shipping_amount` to the URL query string
    if (getShippingAmount() != null) {
      joiner.add(getShippingAmount().toUrlQueryString(prefix + "shipping_amount" + suffix));
    }

    // add `tax_amount` to the URL query string
    if (getTaxAmount() != null) {
      joiner.add(getTaxAmount().toUrlQueryString(prefix + "tax_amount" + suffix));
    }

    // add `net_amount` to the URL query string
    if (getNetAmount() != null) {
      joiner.add(getNetAmount().toUrlQueryString(prefix + "net_amount" + suffix));
    }

    return joiner.toString();
  }

}

