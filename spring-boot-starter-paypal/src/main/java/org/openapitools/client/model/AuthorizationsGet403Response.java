/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * AuthorizationsGet403Response
 */
@JsonPropertyOrder({
        AuthorizationsGet403Response.JSON_PROPERTY_NAME,
        AuthorizationsGet403Response.JSON_PROPERTY_MESSAGE,
        AuthorizationsGet403Response.JSON_PROPERTY_DETAILS,
        AuthorizationsGet403Response.JSON_PROPERTY_DEBUG_ID,
        AuthorizationsGet403Response.JSON_PROPERTY_LINKS
})
@JsonTypeName("authorizations_get_403_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class AuthorizationsGet403Response {
    public static final String JSON_PROPERTY_NAME = "name";
    public static final String JSON_PROPERTY_MESSAGE = "message";
    public static final String JSON_PROPERTY_DETAILS = "details";
    public static final String JSON_PROPERTY_DEBUG_ID = "debug_id";
    public static final String JSON_PROPERTY_LINKS = "links";
    private NameEnum name;
    private MessageEnum message;
    private List<Model403DetailsInner> details;
    private String debugId;
    private List<ErrorLinkDescription> links;

    public AuthorizationsGet403Response() {
    }

    public AuthorizationsGet403Response name(NameEnum name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public NameEnum getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(NameEnum name) {
        this.name = name;
    }

    public AuthorizationsGet403Response message(MessageEnum message) {

        this.message = message;
        return this;
    }

    /**
     * Get message
     *
     * @return message
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public MessageEnum getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessage(MessageEnum message) {
        this.message = message;
    }

    public AuthorizationsGet403Response details(List<Model403DetailsInner> details) {

        this.details = details;
        return this;
    }

    public AuthorizationsGet403Response addDetailsItem(Model403DetailsInner detailsItem) {
        if (this.details == null) {
            this.details = new ArrayList<>();
        }
        this.details.add(detailsItem);
        return this;
    }

    /**
     * Get details
     *
     * @return details
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Model403DetailsInner> getDetails() {
        return details;
    }

    @JsonProperty(JSON_PROPERTY_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDetails(List<Model403DetailsInner> details) {
        this.details = details;
    }

    public AuthorizationsGet403Response debugId(String debugId) {

        this.debugId = debugId;
        return this;
    }

    /**
     * The PayPal internal ID. Used for correlation purposes.
     *
     * @return debugId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DEBUG_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDebugId() {
        return debugId;
    }

    @JsonProperty(JSON_PROPERTY_DEBUG_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDebugId(String debugId) {
        this.debugId = debugId;
    }

    public AuthorizationsGet403Response links(List<ErrorLinkDescription> links) {

        this.links = links;
        return this;
    }

    public AuthorizationsGet403Response addLinksItem(ErrorLinkDescription linksItem) {
        if (this.links == null) {
            this.links = new ArrayList<>();
        }
        this.links.add(linksItem);
        return this;
    }

    /**
     * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
     *
     * @return links
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ErrorLinkDescription> getLinks() {
        return links;
    }

    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLinks(List<ErrorLinkDescription> links) {
        this.links = links;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthorizationsGet403Response authorizationsGet403Response = (AuthorizationsGet403Response) o;
        return Objects.equals(this.name, authorizationsGet403Response.name) &&
                Objects.equals(this.message, authorizationsGet403Response.message) &&
                Objects.equals(this.details, authorizationsGet403Response.details) &&
                Objects.equals(this.debugId, authorizationsGet403Response.debugId) &&
                Objects.equals(this.links, authorizationsGet403Response.links);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, message, details, debugId, links);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AuthorizationsGet403Response {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    details: ").append(toIndentedString(details)).append("\n");
        sb.append("    debugId: ").append(toIndentedString(debugId)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            try {
                joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `message` to the URL query string
        if (getMessage() != null) {
            try {
                joiner.add(String.format("%smessage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMessage()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `details` to the URL query string
        if (getDetails() != null) {
            for (int i = 0; i < getDetails().size(); i++) {
                if (getDetails().get(i) != null) {
                    joiner.add(getDetails().get(i).toUrlQueryString(String.format("%sdetails%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `debug_id` to the URL query string
        if (getDebugId() != null) {
            try {
                joiner.add(String.format("%sdebug_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDebugId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `links` to the URL query string
        if (getLinks() != null) {
            for (int i = 0; i < getLinks().size(); i++) {
                if (getLinks().get(i) != null) {
                    joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }

    /**
     * Gets or Sets name
     */
    public enum NameEnum {
        NOT_AUTHORIZED("NOT_AUTHORIZED");

        private String value;

        NameEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static NameEnum fromValue(String value) {
            for (NameEnum b : NameEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * Gets or Sets message
     */
    public enum MessageEnum {
        AUTHORIZATION_FAILED_DUE_TO_INSUFFICIENT_PERMISSIONS_("Authorization failed due to insufficient permissions.");

        private String value;

        MessageEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static MessageEnum fromValue(String value) {
            for (MessageEnum b : MessageEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

