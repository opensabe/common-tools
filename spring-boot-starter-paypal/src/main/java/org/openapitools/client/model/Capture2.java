/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CaptureStatusDetails;
import org.openapitools.client.model.DisbursementMode;
import org.openapitools.client.model.LinkDescription;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.NetworkTransactionReference;
import org.openapitools.client.model.PayeeBase;
import org.openapitools.client.model.ProcessorResponse;
import org.openapitools.client.model.SellerProtection;
import org.openapitools.client.model.SellerReceivableBreakdown;
import org.openapitools.client.model.SupplementaryData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A captured payment.
 */
@JsonPropertyOrder({
  Capture2.JSON_PROPERTY_STATUS,
  Capture2.JSON_PROPERTY_STATUS_DETAILS,
  Capture2.JSON_PROPERTY_ID,
  Capture2.JSON_PROPERTY_AMOUNT,
  Capture2.JSON_PROPERTY_INVOICE_ID,
  Capture2.JSON_PROPERTY_CUSTOM_ID,
  Capture2.JSON_PROPERTY_NETWORK_TRANSACTION_REFERENCE,
  Capture2.JSON_PROPERTY_SELLER_PROTECTION,
  Capture2.JSON_PROPERTY_FINAL_CAPTURE,
  Capture2.JSON_PROPERTY_SELLER_RECEIVABLE_BREAKDOWN,
  Capture2.JSON_PROPERTY_DISBURSEMENT_MODE,
  Capture2.JSON_PROPERTY_LINKS,
  Capture2.JSON_PROPERTY_PROCESSOR_RESPONSE,
  Capture2.JSON_PROPERTY_CREATE_TIME,
  Capture2.JSON_PROPERTY_UPDATE_TIME,
  Capture2.JSON_PROPERTY_SUPPLEMENTARY_DATA,
  Capture2.JSON_PROPERTY_PAYEE
})
@JsonTypeName("capture-2")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class Capture2 {
  /**
   * The status of the captured payment.
   */
  public enum StatusEnum {
    COMPLETED("COMPLETED"),
    
    DECLINED("DECLINED"),
    
    PARTIALLY_REFUNDED("PARTIALLY_REFUNDED"),
    
    PENDING("PENDING"),
    
    REFUNDED("REFUNDED"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_STATUS_DETAILS = "status_details";
  private CaptureStatusDetails statusDetails;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Money amount;

  public static final String JSON_PROPERTY_INVOICE_ID = "invoice_id";
  private String invoiceId;

  public static final String JSON_PROPERTY_CUSTOM_ID = "custom_id";
  private String customId;

  public static final String JSON_PROPERTY_NETWORK_TRANSACTION_REFERENCE = "network_transaction_reference";
  private NetworkTransactionReference networkTransactionReference;

  public static final String JSON_PROPERTY_SELLER_PROTECTION = "seller_protection";
  private SellerProtection sellerProtection;

  public static final String JSON_PROPERTY_FINAL_CAPTURE = "final_capture";
  private Boolean finalCapture = false;

  public static final String JSON_PROPERTY_SELLER_RECEIVABLE_BREAKDOWN = "seller_receivable_breakdown";
  private SellerReceivableBreakdown sellerReceivableBreakdown;

  public static final String JSON_PROPERTY_DISBURSEMENT_MODE = "disbursement_mode";
  private DisbursementMode disbursementMode = DisbursementMode.INSTANT;

  public static final String JSON_PROPERTY_LINKS = "links";
  private List<LinkDescription> links;

  public static final String JSON_PROPERTY_PROCESSOR_RESPONSE = "processor_response";
  private ProcessorResponse processorResponse;

  public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
  private String createTime;

  public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
  private String updateTime;

  public static final String JSON_PROPERTY_SUPPLEMENTARY_DATA = "supplementary_data";
  private SupplementaryData supplementaryData;

  public static final String JSON_PROPERTY_PAYEE = "payee";
  private PayeeBase payee;

  public Capture2() {
  }

  @JsonCreator
  public Capture2(
    @JsonProperty(JSON_PROPERTY_STATUS) StatusEnum status, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_INVOICE_ID) String invoiceId, 
    @JsonProperty(JSON_PROPERTY_FINAL_CAPTURE) Boolean finalCapture, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
  ) {
    this();
    this.status = status;
    this.id = id;
    this.invoiceId = invoiceId;
    this.finalCapture = finalCapture;
    this.links = links;
  }

   /**
   * The status of the captured payment.
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }




  public Capture2 statusDetails(CaptureStatusDetails statusDetails) {
    
    this.statusDetails = statusDetails;
    return this;
  }

   /**
   * Get statusDetails
   * @return statusDetails
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CaptureStatusDetails getStatusDetails() {
    return statusDetails;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatusDetails(CaptureStatusDetails statusDetails) {
    this.statusDetails = statusDetails;
  }


   /**
   * The PayPal-generated ID for the captured payment.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public Capture2 amount(Money amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Money amount) {
    this.amount = amount;
  }


   /**
   * The API caller-provided external invoice number for this order. Appears in both the payer&#39;s transaction history and the emails that the payer receives.
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceId() {
    return invoiceId;
  }




  public Capture2 customId(String customId) {
    
    this.customId = customId;
    return this;
  }

   /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @return customId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomId() {
    return customId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public Capture2 networkTransactionReference(NetworkTransactionReference networkTransactionReference) {
    
    this.networkTransactionReference = networkTransactionReference;
    return this;
  }

   /**
   * Get networkTransactionReference
   * @return networkTransactionReference
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_TRANSACTION_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NetworkTransactionReference getNetworkTransactionReference() {
    return networkTransactionReference;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_TRANSACTION_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkTransactionReference(NetworkTransactionReference networkTransactionReference) {
    this.networkTransactionReference = networkTransactionReference;
  }


  public Capture2 sellerProtection(SellerProtection sellerProtection) {
    
    this.sellerProtection = sellerProtection;
    return this;
  }

   /**
   * Get sellerProtection
   * @return sellerProtection
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELLER_PROTECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SellerProtection getSellerProtection() {
    return sellerProtection;
  }


  @JsonProperty(JSON_PROPERTY_SELLER_PROTECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSellerProtection(SellerProtection sellerProtection) {
    this.sellerProtection = sellerProtection;
  }


   /**
   * Indicates whether you can make additional captures against the authorized payment. Set to &#x60;true&#x60; if you do not intend to capture additional payments against the authorization. Set to &#x60;false&#x60; if you intend to capture additional payments against the authorization.
   * @return finalCapture
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINAL_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFinalCapture() {
    return finalCapture;
  }




  public Capture2 sellerReceivableBreakdown(SellerReceivableBreakdown sellerReceivableBreakdown) {
    
    this.sellerReceivableBreakdown = sellerReceivableBreakdown;
    return this;
  }

   /**
   * Get sellerReceivableBreakdown
   * @return sellerReceivableBreakdown
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELLER_RECEIVABLE_BREAKDOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SellerReceivableBreakdown getSellerReceivableBreakdown() {
    return sellerReceivableBreakdown;
  }


  @JsonProperty(JSON_PROPERTY_SELLER_RECEIVABLE_BREAKDOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSellerReceivableBreakdown(SellerReceivableBreakdown sellerReceivableBreakdown) {
    this.sellerReceivableBreakdown = sellerReceivableBreakdown;
  }


  public Capture2 disbursementMode(DisbursementMode disbursementMode) {
    
    this.disbursementMode = disbursementMode;
    return this;
  }

   /**
   * Get disbursementMode
   * @return disbursementMode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISBURSEMENT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DisbursementMode getDisbursementMode() {
    return disbursementMode;
  }


  @JsonProperty(JSON_PROPERTY_DISBURSEMENT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisbursementMode(DisbursementMode disbursementMode) {
    this.disbursementMode = disbursementMode;
  }


   /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @return links
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkDescription> getLinks() {
    return links;
  }




  public Capture2 processorResponse(ProcessorResponse processorResponse) {
    
    this.processorResponse = processorResponse;
    return this;
  }

   /**
   * Get processorResponse
   * @return processorResponse
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSOR_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProcessorResponse getProcessorResponse() {
    return processorResponse;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSOR_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessorResponse(ProcessorResponse processorResponse) {
    this.processorResponse = processorResponse;
  }


  public Capture2 createTime(String createTime) {
    
    this.createTime = createTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return createTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreateTime() {
    return createTime;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Capture2 updateTime(String updateTime) {
    
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return updateTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdateTime() {
    return updateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public Capture2 supplementaryData(SupplementaryData supplementaryData) {
    
    this.supplementaryData = supplementaryData;
    return this;
  }

   /**
   * Get supplementaryData
   * @return supplementaryData
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPLEMENTARY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SupplementaryData getSupplementaryData() {
    return supplementaryData;
  }


  @JsonProperty(JSON_PROPERTY_SUPPLEMENTARY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupplementaryData(SupplementaryData supplementaryData) {
    this.supplementaryData = supplementaryData;
  }


  public Capture2 payee(PayeeBase payee) {
    
    this.payee = payee;
    return this;
  }

   /**
   * Get payee
   * @return payee
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PayeeBase getPayee() {
    return payee;
  }


  @JsonProperty(JSON_PROPERTY_PAYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayee(PayeeBase payee) {
    this.payee = payee;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Capture2 capture2 = (Capture2) o;
    return Objects.equals(this.status, capture2.status) &&
        Objects.equals(this.statusDetails, capture2.statusDetails) &&
        Objects.equals(this.id, capture2.id) &&
        Objects.equals(this.amount, capture2.amount) &&
        Objects.equals(this.invoiceId, capture2.invoiceId) &&
        Objects.equals(this.customId, capture2.customId) &&
        Objects.equals(this.networkTransactionReference, capture2.networkTransactionReference) &&
        Objects.equals(this.sellerProtection, capture2.sellerProtection) &&
        Objects.equals(this.finalCapture, capture2.finalCapture) &&
        Objects.equals(this.sellerReceivableBreakdown, capture2.sellerReceivableBreakdown) &&
        Objects.equals(this.disbursementMode, capture2.disbursementMode) &&
        Objects.equals(this.links, capture2.links) &&
        Objects.equals(this.processorResponse, capture2.processorResponse) &&
        Objects.equals(this.createTime, capture2.createTime) &&
        Objects.equals(this.updateTime, capture2.updateTime) &&
        Objects.equals(this.supplementaryData, capture2.supplementaryData) &&
        Objects.equals(this.payee, capture2.payee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, statusDetails, id, amount, invoiceId, customId, networkTransactionReference, sellerProtection, finalCapture, sellerReceivableBreakdown, disbursementMode, links, processorResponse, createTime, updateTime, supplementaryData, payee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Capture2 {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    networkTransactionReference: ").append(toIndentedString(networkTransactionReference)).append("\n");
    sb.append("    sellerProtection: ").append(toIndentedString(sellerProtection)).append("\n");
    sb.append("    finalCapture: ").append(toIndentedString(finalCapture)).append("\n");
    sb.append("    sellerReceivableBreakdown: ").append(toIndentedString(sellerReceivableBreakdown)).append("\n");
    sb.append("    disbursementMode: ").append(toIndentedString(disbursementMode)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    processorResponse: ").append(toIndentedString(processorResponse)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    supplementaryData: ").append(toIndentedString(supplementaryData)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status_details` to the URL query string
    if (getStatusDetails() != null) {
      joiner.add(getStatusDetails().toUrlQueryString(prefix + "status_details" + suffix));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `invoice_id` to the URL query string
    if (getInvoiceId() != null) {
      try {
        joiner.add(String.format("%sinvoice_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvoiceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `custom_id` to the URL query string
    if (getCustomId() != null) {
      try {
        joiner.add(String.format("%scustom_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `network_transaction_reference` to the URL query string
    if (getNetworkTransactionReference() != null) {
      joiner.add(getNetworkTransactionReference().toUrlQueryString(prefix + "network_transaction_reference" + suffix));
    }

    // add `seller_protection` to the URL query string
    if (getSellerProtection() != null) {
      joiner.add(getSellerProtection().toUrlQueryString(prefix + "seller_protection" + suffix));
    }

    // add `final_capture` to the URL query string
    if (getFinalCapture() != null) {
      try {
        joiner.add(String.format("%sfinal_capture%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFinalCapture()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seller_receivable_breakdown` to the URL query string
    if (getSellerReceivableBreakdown() != null) {
      joiner.add(getSellerReceivableBreakdown().toUrlQueryString(prefix + "seller_receivable_breakdown" + suffix));
    }

    // add `disbursement_mode` to the URL query string
    if (getDisbursementMode() != null) {
      try {
        joiner.add(String.format("%sdisbursement_mode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisbursementMode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `links` to the URL query string
    if (getLinks() != null) {
      for (int i = 0; i < getLinks().size(); i++) {
        if (getLinks().get(i) != null) {
          joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `processor_response` to the URL query string
    if (getProcessorResponse() != null) {
      joiner.add(getProcessorResponse().toUrlQueryString(prefix + "processor_response" + suffix));
    }

    // add `create_time` to the URL query string
    if (getCreateTime() != null) {
      try {
        joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `update_time` to the URL query string
    if (getUpdateTime() != null) {
      try {
        joiner.add(String.format("%supdate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `supplementary_data` to the URL query string
    if (getSupplementaryData() != null) {
      joiner.add(getSupplementaryData().toUrlQueryString(prefix + "supplementary_data" + suffix));
    }

    // add `payee` to the URL query string
    if (getPayee() != null) {
      joiner.add(getPayee().toUrlQueryString(prefix + "payee" + suffix));
    }

    return joiner.toString();
  }

}

