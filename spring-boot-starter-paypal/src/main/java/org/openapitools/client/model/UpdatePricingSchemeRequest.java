/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.PricingScheme;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The update pricing scheme request details.
 */
@JsonPropertyOrder({
  UpdatePricingSchemeRequest.JSON_PROPERTY_BILLING_CYCLE_SEQUENCE,
  UpdatePricingSchemeRequest.JSON_PROPERTY_PRICING_SCHEME
})
@JsonTypeName("update_pricing_scheme_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class UpdatePricingSchemeRequest {
  public static final String JSON_PROPERTY_BILLING_CYCLE_SEQUENCE = "billing_cycle_sequence";
  private Integer billingCycleSequence;

  public static final String JSON_PROPERTY_PRICING_SCHEME = "pricing_scheme";
  private PricingScheme pricingScheme;

  public UpdatePricingSchemeRequest() {
  }

  public UpdatePricingSchemeRequest billingCycleSequence(Integer billingCycleSequence) {
    
    this.billingCycleSequence = billingCycleSequence;
    return this;
  }

   /**
   * The billing cycle sequence.
   * minimum: 1
   * maximum: 99
   * @return billingCycleSequence
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BILLING_CYCLE_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBillingCycleSequence() {
    return billingCycleSequence;
  }


  @JsonProperty(JSON_PROPERTY_BILLING_CYCLE_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBillingCycleSequence(Integer billingCycleSequence) {
    this.billingCycleSequence = billingCycleSequence;
  }


  public UpdatePricingSchemeRequest pricingScheme(PricingScheme pricingScheme) {
    
    this.pricingScheme = pricingScheme;
    return this;
  }

   /**
   * Get pricingScheme
   * @return pricingScheme
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRICING_SCHEME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PricingScheme getPricingScheme() {
    return pricingScheme;
  }


  @JsonProperty(JSON_PROPERTY_PRICING_SCHEME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPricingScheme(PricingScheme pricingScheme) {
    this.pricingScheme = pricingScheme;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePricingSchemeRequest updatePricingSchemeRequest = (UpdatePricingSchemeRequest) o;
    return Objects.equals(this.billingCycleSequence, updatePricingSchemeRequest.billingCycleSequence) &&
        Objects.equals(this.pricingScheme, updatePricingSchemeRequest.pricingScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingCycleSequence, pricingScheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePricingSchemeRequest {\n");
    sb.append("    billingCycleSequence: ").append(toIndentedString(billingCycleSequence)).append("\n");
    sb.append("    pricingScheme: ").append(toIndentedString(pricingScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `billing_cycle_sequence` to the URL query string
    if (getBillingCycleSequence() != null) {
      try {
        joiner.add(String.format("%sbilling_cycle_sequence%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBillingCycleSequence()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `pricing_scheme` to the URL query string
    if (getPricingScheme() != null) {
      joiner.add(getPricingScheme().toUrlQueryString(prefix + "pricing_scheme" + suffix));
    }

    return joiner.toString();
  }

}

