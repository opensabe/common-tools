/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.PricingScheme;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The billing cycle details to override at subscription level. The subscription billing cycle definition has to adhere to the plan billing cycle definition.
 */
@JsonPropertyOrder({
  BillingCycleOverride.JSON_PROPERTY_PRICING_SCHEME,
  BillingCycleOverride.JSON_PROPERTY_SEQUENCE,
  BillingCycleOverride.JSON_PROPERTY_TOTAL_CYCLES
})
@JsonTypeName("billing_cycle_override")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class BillingCycleOverride {
  public static final String JSON_PROPERTY_PRICING_SCHEME = "pricing_scheme";
  private PricingScheme pricingScheme;

  public static final String JSON_PROPERTY_SEQUENCE = "sequence";
  private Integer sequence;

  public static final String JSON_PROPERTY_TOTAL_CYCLES = "total_cycles";
  private Integer totalCycles;

  public BillingCycleOverride() {
  }

  public BillingCycleOverride pricingScheme(PricingScheme pricingScheme) {
    
    this.pricingScheme = pricingScheme;
    return this;
  }

   /**
   * Get pricingScheme
   * @return pricingScheme
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRICING_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PricingScheme getPricingScheme() {
    return pricingScheme;
  }


  @JsonProperty(JSON_PROPERTY_PRICING_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPricingScheme(PricingScheme pricingScheme) {
    this.pricingScheme = pricingScheme;
  }


  public BillingCycleOverride sequence(Integer sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * The order in which this cycle is to run among other billing cycles. For example, a trial billing cycle has a &#x60;sequence&#x60; of &#x60;1&#x60; while a regular billing cycle has a &#x60;sequence&#x60; of &#x60;2&#x60;, so that trial cycle runs before the regular cycle.
   * minimum: 1
   * maximum: 99
   * @return sequence
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSequence() {
    return sequence;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public BillingCycleOverride totalCycles(Integer totalCycles) {
    
    this.totalCycles = totalCycles;
    return this;
  }

   /**
   * The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;999&lt;/code&gt; for &lt;code&gt;total_cycles&lt;/code&gt;). Regular billing cycles can be executed infinite times (value of &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;total_cycles&lt;/code&gt;) or a finite number of times (value between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;999&lt;/code&gt; for &lt;code&gt;total_cycles&lt;/code&gt;).
   * minimum: 0
   * maximum: 999
   * @return totalCycles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_CYCLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalCycles() {
    return totalCycles;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_CYCLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalCycles(Integer totalCycles) {
    this.totalCycles = totalCycles;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingCycleOverride billingCycleOverride = (BillingCycleOverride) o;
    return Objects.equals(this.pricingScheme, billingCycleOverride.pricingScheme) &&
        Objects.equals(this.sequence, billingCycleOverride.sequence) &&
        Objects.equals(this.totalCycles, billingCycleOverride.totalCycles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pricingScheme, sequence, totalCycles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingCycleOverride {\n");
    sb.append("    pricingScheme: ").append(toIndentedString(pricingScheme)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    totalCycles: ").append(toIndentedString(totalCycles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `pricing_scheme` to the URL query string
    if (getPricingScheme() != null) {
      joiner.add(getPricingScheme().toUrlQueryString(prefix + "pricing_scheme" + suffix));
    }

    // add `sequence` to the URL query string
    if (getSequence() != null) {
      try {
        joiner.add(String.format("%ssequence%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSequence()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `total_cycles` to the URL query string
    if (getTotalCycles() != null) {
      try {
        joiner.add(String.format("%stotal_cycles%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalCycles()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

