/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The shipping address details.
 */
@JsonPropertyOrder({
        ShippingAddress.JSON_PROPERTY_LINE1,
        ShippingAddress.JSON_PROPERTY_LINE2,
        ShippingAddress.JSON_PROPERTY_CITY,
        ShippingAddress.JSON_PROPERTY_COUNTRY_CODE,
        ShippingAddress.JSON_PROPERTY_POSTAL_CODE,
        ShippingAddress.JSON_PROPERTY_STATE,
        ShippingAddress.JSON_PROPERTY_PHONE,
        ShippingAddress.JSON_PROPERTY_NORMALIZATION_STATUS,
        ShippingAddress.JSON_PROPERTY_TYPE,
        ShippingAddress.JSON_PROPERTY_RECIPIENT_NAME
})
@JsonTypeName("shipping_address")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class ShippingAddress {
    public static final String JSON_PROPERTY_LINE1 = "line1";
    public static final String JSON_PROPERTY_LINE2 = "line2";
    public static final String JSON_PROPERTY_CITY = "city";
    public static final String JSON_PROPERTY_COUNTRY_CODE = "country_code";
    public static final String JSON_PROPERTY_POSTAL_CODE = "postal_code";
    public static final String JSON_PROPERTY_STATE = "state";
    public static final String JSON_PROPERTY_PHONE = "phone";
    public static final String JSON_PROPERTY_NORMALIZATION_STATUS = "normalization_status";
    public static final String JSON_PROPERTY_TYPE = "type";
    public static final String JSON_PROPERTY_RECIPIENT_NAME = "recipient_name";
    private String line1;
    private String line2;
    private String city;
    private String countryCode;
    private String postalCode;
    private String state;
    private String phone;
    private NormalizationStatusEnum normalizationStatus;
    private String type;
    private String recipientName;
    public ShippingAddress() {
    }

    @JsonCreator
    public ShippingAddress(
            @JsonProperty(JSON_PROPERTY_NORMALIZATION_STATUS) NormalizationStatusEnum normalizationStatus
    ) {
        this();
        this.normalizationStatus = normalizationStatus;
    }

    public ShippingAddress line1(String line1) {

        this.line1 = line1;
        return this;
    }

    /**
     * The first line of the address. For example, number, street, and so on.
     *
     * @return line1
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LINE1)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getLine1() {
        return line1;
    }

    @JsonProperty(JSON_PROPERTY_LINE1)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLine1(String line1) {
        this.line1 = line1;
    }

    public ShippingAddress line2(String line2) {

        this.line2 = line2;
        return this;
    }

    /**
     * The second line of the address. For example, suite or apartment number.
     *
     * @return line2
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINE2)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getLine2() {
        return line2;
    }

    @JsonProperty(JSON_PROPERTY_LINE2)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLine2(String line2) {
        this.line2 = line2;
    }

    public ShippingAddress city(String city) {

        this.city = city;
        return this;
    }

    /**
     * The city name.
     *
     * @return city
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCity() {
        return city;
    }

    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCity(String city) {
        this.city = city;
    }

    public ShippingAddress countryCode(String countryCode) {

        this.countryCode = countryCode;
        return this;
    }

    /**
     * The [two-character ISO 3166-1 code](/docs/api/reference/country-codes/) that identifies the country or region.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The country code for Great Britain is &lt;code&gt;GB&lt;/code&gt; and not &lt;code&gt;UK&lt;/code&gt; as used in the top-level domain names for that country. Use the &#x60;C2&#x60; country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.&lt;/blockquote&gt;
     *
     * @return countryCode
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getCountryCode() {
        return countryCode;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public ShippingAddress postalCode(String postalCode) {

        this.postalCode = postalCode;
        return this;
    }

    /**
     * The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
     *
     * @return postalCode
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPostalCode() {
        return postalCode;
    }

    @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public ShippingAddress state(String state) {

        this.state = state;
        return this;
    }

    /**
     * The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [China](/docs/integration/direct/rest/state-codes/#china), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa).
     *
     * @return state
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getState() {
        return state;
    }

    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setState(String state) {
        this.state = state;
    }

    public ShippingAddress phone(String phone) {

        this.phone = phone;
        return this;
    }

    /**
     * The phone number, in [E.123 format](https://www.itu.int/rec/T-REC-E.123-200102-I/en). Maximum length is 50 characters.
     *
     * @return phone
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PHONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPhone() {
        return phone;
    }

    @JsonProperty(JSON_PROPERTY_PHONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /**
     * The address normalization status. Returned only for payers from Brazil.
     *
     * @return normalizationStatus
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NORMALIZATION_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public NormalizationStatusEnum getNormalizationStatus() {
        return normalizationStatus;
    }

    public ShippingAddress type(String type) {

        this.type = type;
        return this;
    }

    /**
     * The type of address. For example, &#x60;HOME_OR_WORK&#x60;, &#x60;GIFT&#x60;, and so on.
     *
     * @return type
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    public ShippingAddress recipientName(String recipientName) {

        this.recipientName = recipientName;
        return this;
    }

    /**
     * The name of the recipient at this address.
     *
     * @return recipientName
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RECIPIENT_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getRecipientName() {
        return recipientName;
    }

    @JsonProperty(JSON_PROPERTY_RECIPIENT_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecipientName(String recipientName) {
        this.recipientName = recipientName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShippingAddress shippingAddress = (ShippingAddress) o;
        return Objects.equals(this.line1, shippingAddress.line1) &&
                Objects.equals(this.line2, shippingAddress.line2) &&
                Objects.equals(this.city, shippingAddress.city) &&
                Objects.equals(this.countryCode, shippingAddress.countryCode) &&
                Objects.equals(this.postalCode, shippingAddress.postalCode) &&
                Objects.equals(this.state, shippingAddress.state) &&
                Objects.equals(this.phone, shippingAddress.phone) &&
                Objects.equals(this.normalizationStatus, shippingAddress.normalizationStatus) &&
                Objects.equals(this.type, shippingAddress.type) &&
                Objects.equals(this.recipientName, shippingAddress.recipientName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(line1, line2, city, countryCode, postalCode, state, phone, normalizationStatus, type, recipientName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ShippingAddress {\n");
        sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
        sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
        sb.append("    city: ").append(toIndentedString(city)).append("\n");
        sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
        sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
        sb.append("    normalizationStatus: ").append(toIndentedString(normalizationStatus)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `line1` to the URL query string
        if (getLine1() != null) {
            try {
                joiner.add(String.format("%sline1%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLine1()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `line2` to the URL query string
        if (getLine2() != null) {
            try {
                joiner.add(String.format("%sline2%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLine2()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `city` to the URL query string
        if (getCity() != null) {
            try {
                joiner.add(String.format("%scity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCity()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `country_code` to the URL query string
        if (getCountryCode() != null) {
            try {
                joiner.add(String.format("%scountry_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCountryCode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `postal_code` to the URL query string
        if (getPostalCode() != null) {
            try {
                joiner.add(String.format("%spostal_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPostalCode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `state` to the URL query string
        if (getState() != null) {
            try {
                joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `phone` to the URL query string
        if (getPhone() != null) {
            try {
                joiner.add(String.format("%sphone%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhone()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `normalization_status` to the URL query string
        if (getNormalizationStatus() != null) {
            try {
                joiner.add(String.format("%snormalization_status%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNormalizationStatus()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `type` to the URL query string
        if (getType() != null) {
            try {
                joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `recipient_name` to the URL query string
        if (getRecipientName() != null) {
            try {
                joiner.add(String.format("%srecipient_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRecipientName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

    /**
     * The address normalization status. Returned only for payers from Brazil.
     */
    public enum NormalizationStatusEnum {
        UNKNOWN("UNKNOWN"),

        UNNORMALIZED_USER_PREFERRED("UNNORMALIZED_USER_PREFERRED"),

        NORMALIZED("NORMALIZED"),

        UNNORMALIZED("UNNORMALIZED");

        private String value;

        NormalizationStatusEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static NormalizationStatusEnum fromValue(String value) {
            for (NormalizationStatusEnum b : NormalizationStatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

