/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The order transaction details.
 */
@JsonPropertyOrder({
        Order.JSON_PROPERTY_ID,
        Order.JSON_PROPERTY_AMOUNT,
        Order.JSON_PROPERTY_PAYMENT_MODE,
        Order.JSON_PROPERTY_STATE,
        Order.JSON_PROPERTY_REASON_CODE,
        Order.JSON_PROPERTY_PENDING_REASON,
        Order.JSON_PROPERTY_PROTECTION_ELIGIBILITY,
        Order.JSON_PROPERTY_PROTECTION_ELIGIBILITY_TYPE,
        Order.JSON_PROPERTY_PARENT_PAYMENT,
        Order.JSON_PROPERTY_FMF_DETAILS,
        Order.JSON_PROPERTY_CREATE_TIME,
        Order.JSON_PROPERTY_UPDATE_TIME,
        Order.JSON_PROPERTY_LINKS
})
@JsonTypeName("order")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class Order {
    public static final String JSON_PROPERTY_ID = "id";
    public static final String JSON_PROPERTY_AMOUNT = "amount";
    public static final String JSON_PROPERTY_PAYMENT_MODE = "payment_mode";
    public static final String JSON_PROPERTY_STATE = "state";
    public static final String JSON_PROPERTY_REASON_CODE = "reason_code";
    public static final String JSON_PROPERTY_PENDING_REASON = "pending_reason";
    public static final String JSON_PROPERTY_PROTECTION_ELIGIBILITY = "protection_eligibility";
    public static final String JSON_PROPERTY_PROTECTION_ELIGIBILITY_TYPE = "protection_eligibility_type";
    public static final String JSON_PROPERTY_PARENT_PAYMENT = "parent_payment";
    public static final String JSON_PROPERTY_FMF_DETAILS = "fmf_details";
    public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
    public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
    public static final String JSON_PROPERTY_LINKS = "links";
    private String id;
    private Amount amount;
    private PaymentModeEnum paymentMode;
    private StateEnum state;
    private ReasonCodeEnum reasonCode;
    private PendingReasonEnum pendingReason;
    private ProtectionEligibilityEnum protectionEligibility;
    private ProtectionEligibilityTypeEnum protectionEligibilityType;
    private String parentPayment;
    private FmfDetails fmfDetails;
    private OffsetDateTime createTime;
    private OffsetDateTime updateTime;
    private List<LinkDescription> links;

    public Order() {
    }
    @JsonCreator
    public Order(
            @JsonProperty(JSON_PROPERTY_ID) String id,
            @JsonProperty(JSON_PROPERTY_PAYMENT_MODE) PaymentModeEnum paymentMode,
            @JsonProperty(JSON_PROPERTY_STATE) StateEnum state,
            @JsonProperty(JSON_PROPERTY_REASON_CODE) ReasonCodeEnum reasonCode,
            @JsonProperty(JSON_PROPERTY_PENDING_REASON) PendingReasonEnum pendingReason,
            @JsonProperty(JSON_PROPERTY_PROTECTION_ELIGIBILITY) ProtectionEligibilityEnum protectionEligibility,
            @JsonProperty(JSON_PROPERTY_PROTECTION_ELIGIBILITY_TYPE) ProtectionEligibilityTypeEnum protectionEligibilityType,
            @JsonProperty(JSON_PROPERTY_PARENT_PAYMENT) String parentPayment,
            @JsonProperty(JSON_PROPERTY_CREATE_TIME) OffsetDateTime createTime,
            @JsonProperty(JSON_PROPERTY_UPDATE_TIME) OffsetDateTime updateTime,
            @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
    ) {
        this();
        this.id = id;
        this.paymentMode = paymentMode;
        this.state = state;
        this.reasonCode = reasonCode;
        this.pendingReason = pendingReason;
        this.protectionEligibility = protectionEligibility;
        this.protectionEligibilityType = protectionEligibilityType;
        this.parentPayment = parentPayment;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.links = links;
    }

    /**
     * The ID of the order transaction.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getId() {
        return id;
    }

    public Order amount(Amount amount) {

        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Amount getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(Amount amount) {
        this.amount = amount;
    }

    /**
     * The transaction payment mode.
     *
     * @return paymentMode
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYMENT_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PaymentModeEnum getPaymentMode() {
        return paymentMode;
    }

    /**
     * The state of the order transaction.
     *
     * @return state
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StateEnum getState() {
        return state;
    }

    /**
     * The reason code that describes why the transaction state is pending or reversed. Supported only for PayPal payments.
     *
     * @return reasonCode
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REASON_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ReasonCodeEnum getReasonCode() {
        return reasonCode;
    }

    /**
     * Deprecated. The reason code for the pending transaction state. Obsolete. Use &#x60;reason_code&#x60; instead.
     *
     * @return pendingReason
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PENDING_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PendingReasonEnum getPendingReason() {
        return pendingReason;
    }

    /**
     * The level of seller protection in effect for the transaction.
     *
     * @return protectionEligibility
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROTECTION_ELIGIBILITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ProtectionEligibilityEnum getProtectionEligibility() {
        return protectionEligibility;
    }

    /**
     * The kind of seller protection in effect for the transaction. Returned only when the &#x60;protection_eligibility&#x60; property is &#x60;ELIGIBLE&#x60; or &#x60;PARTIALLY_ELIGIBLE&#x60;. Supported only for PayPal payments.
     *
     * @return protectionEligibilityType
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROTECTION_ELIGIBILITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ProtectionEligibilityTypeEnum getProtectionEligibilityType() {
        return protectionEligibilityType;
    }

    /**
     * The ID of the payment on which this transaction is based.
     *
     * @return parentPayment
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PARENT_PAYMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getParentPayment() {
        return parentPayment;
    }

    public Order fmfDetails(FmfDetails fmfDetails) {

        this.fmfDetails = fmfDetails;
        return this;
    }

    /**
     * Get fmfDetails
     *
     * @return fmfDetails
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FMF_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public FmfDetails getFmfDetails() {
        return fmfDetails;
    }

    @JsonProperty(JSON_PROPERTY_FMF_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFmfDetails(FmfDetails fmfDetails) {
        this.fmfDetails = fmfDetails;
    }

    /**
     * The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getCreateTime() {
        return createTime;
    }

    /**
     * The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getUpdateTime() {
        return updateTime;
    }

    /**
     * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
     *
     * @return links
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<LinkDescription> getLinks() {
        return links;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Order order = (Order) o;
        return Objects.equals(this.id, order.id) &&
                Objects.equals(this.amount, order.amount) &&
                Objects.equals(this.paymentMode, order.paymentMode) &&
                Objects.equals(this.state, order.state) &&
                Objects.equals(this.reasonCode, order.reasonCode) &&
                Objects.equals(this.pendingReason, order.pendingReason) &&
                Objects.equals(this.protectionEligibility, order.protectionEligibility) &&
                Objects.equals(this.protectionEligibilityType, order.protectionEligibilityType) &&
                Objects.equals(this.parentPayment, order.parentPayment) &&
                Objects.equals(this.fmfDetails, order.fmfDetails) &&
                Objects.equals(this.createTime, order.createTime) &&
                Objects.equals(this.updateTime, order.updateTime) &&
                Objects.equals(this.links, order.links);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, amount, paymentMode, state, reasonCode, pendingReason, protectionEligibility, protectionEligibilityType, parentPayment, fmfDetails, createTime, updateTime, links);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Order {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    paymentMode: ").append(toIndentedString(paymentMode)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
        sb.append("    pendingReason: ").append(toIndentedString(pendingReason)).append("\n");
        sb.append("    protectionEligibility: ").append(toIndentedString(protectionEligibility)).append("\n");
        sb.append("    protectionEligibilityType: ").append(toIndentedString(protectionEligibilityType)).append("\n");
        sb.append("    parentPayment: ").append(toIndentedString(parentPayment)).append("\n");
        sb.append("    fmfDetails: ").append(toIndentedString(fmfDetails)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            try {
                joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
        }

        // add `payment_mode` to the URL query string
        if (getPaymentMode() != null) {
            try {
                joiner.add(String.format("%spayment_mode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentMode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `state` to the URL query string
        if (getState() != null) {
            try {
                joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `reason_code` to the URL query string
        if (getReasonCode() != null) {
            try {
                joiner.add(String.format("%sreason_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReasonCode()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `pending_reason` to the URL query string
        if (getPendingReason() != null) {
            try {
                joiner.add(String.format("%spending_reason%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPendingReason()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `protection_eligibility` to the URL query string
        if (getProtectionEligibility() != null) {
            try {
                joiner.add(String.format("%sprotection_eligibility%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProtectionEligibility()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `protection_eligibility_type` to the URL query string
        if (getProtectionEligibilityType() != null) {
            try {
                joiner.add(String.format("%sprotection_eligibility_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProtectionEligibilityType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `parent_payment` to the URL query string
        if (getParentPayment() != null) {
            try {
                joiner.add(String.format("%sparent_payment%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentPayment()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `fmf_details` to the URL query string
        if (getFmfDetails() != null) {
            joiner.add(getFmfDetails().toUrlQueryString(prefix + "fmf_details" + suffix));
        }

        // add `create_time` to the URL query string
        if (getCreateTime() != null) {
            try {
                joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `update_time` to the URL query string
        if (getUpdateTime() != null) {
            try {
                joiner.add(String.format("%supdate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `links` to the URL query string
        if (getLinks() != null) {
            for (int i = 0; i < getLinks().size(); i++) {
                if (getLinks().get(i) != null) {
                    joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }


    /**
     * The transaction payment mode.
     */
    public enum PaymentModeEnum {
        INSTANT_TRANSFER("INSTANT_TRANSFER"),

        MANUAL_BANK_TRANSFER("MANUAL_BANK_TRANSFER"),

        DELAYED_TRANSFER("DELAYED_TRANSFER"),

        ECHECK("ECHECK");

        private String value;

        PaymentModeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static PaymentModeEnum fromValue(String value) {
            for (PaymentModeEnum b : PaymentModeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The state of the order transaction.
     */
    public enum StateEnum {
        PENDING("PENDING"),

        AUTHORIZED("AUTHORIZED"),

        CAPTURED("CAPTURED"),

        COMPLETED("COMPLETED"),

        VOIDED("VOIDED");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The reason code that describes why the transaction state is pending or reversed. Supported only for PayPal payments.
     */
    public enum ReasonCodeEnum {
        PAYER_SHIPPING_UNCONFIRMED("PAYER_SHIPPING_UNCONFIRMED"),

        MULTI_CURRENCY("MULTI_CURRENCY"),

        RISK_REVIEW("RISK_REVIEW"),

        REGULATORY_REVIEW("REGULATORY_REVIEW"),

        VERIFICATION_REQUIRED("VERIFICATION_REQUIRED"),

        ORDER("ORDER"),

        OTHER("OTHER");

        private String value;

        ReasonCodeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ReasonCodeEnum fromValue(String value) {
            for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * Deprecated. The reason code for the pending transaction state. Obsolete. Use &#x60;reason_code&#x60; instead.
     */
    public enum PendingReasonEnum {
        PAYER_SHIPPING_UNCONFIRMED("payer_shipping_unconfirmed"),

        MULTI_CURRENCY("multi_currency"),

        RISK_REVIEW("risk_review"),

        REGULATORY_REVIEW("regulatory_review"),

        VERIFICATION_REQUIRED("verification_required"),

        ORDER("order"),

        OTHER("other");

        private String value;

        PendingReasonEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static PendingReasonEnum fromValue(String value) {
            for (PendingReasonEnum b : PendingReasonEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The level of seller protection in effect for the transaction.
     */
    public enum ProtectionEligibilityEnum {
        ELIGIBLE("ELIGIBLE"),

        PARTIALLY_ELIGIBLE("PARTIALLY_ELIGIBLE"),

        INELIGIBLE("INELIGIBLE");

        private String value;

        ProtectionEligibilityEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ProtectionEligibilityEnum fromValue(String value) {
            for (ProtectionEligibilityEnum b : ProtectionEligibilityEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The kind of seller protection in effect for the transaction. Returned only when the &#x60;protection_eligibility&#x60; property is &#x60;ELIGIBLE&#x60; or &#x60;PARTIALLY_ELIGIBLE&#x60;. Supported only for PayPal payments.
     */
    public enum ProtectionEligibilityTypeEnum {
        ITEM_NOT_RECEIVED_ELIGIBLE("ITEM_NOT_RECEIVED_ELIGIBLE"),

        UNAUTHORIZED_PAYMENT_ELIGIBLE("UNAUTHORIZED_PAYMENT_ELIGIBLE"),

        ITEM_NOT_RECEIVED_ELIGIBLE_UNAUTHORIZED_PAYMENT_ELIGIBLE("ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE");

        private String value;

        ProtectionEligibilityTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ProtectionEligibilityTypeEnum fromValue(String value) {
            for (ProtectionEligibilityTypeEnum b : ProtectionEligibilityTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

