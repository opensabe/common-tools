/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The billing details for the subscription. If the subscription was or is active, these fields are populated.
 */
@JsonPropertyOrder({
        SubscriptionBillingInfo.JSON_PROPERTY_OUTSTANDING_BALANCE,
        SubscriptionBillingInfo.JSON_PROPERTY_CYCLE_EXECUTIONS,
        SubscriptionBillingInfo.JSON_PROPERTY_LAST_PAYMENT,
        SubscriptionBillingInfo.JSON_PROPERTY_NEXT_BILLING_TIME,
        SubscriptionBillingInfo.JSON_PROPERTY_FINAL_PAYMENT_TIME,
        SubscriptionBillingInfo.JSON_PROPERTY_FAILED_PAYMENTS_COUNT,
        SubscriptionBillingInfo.JSON_PROPERTY_LAST_FAILED_PAYMENT
})
@JsonTypeName("subscription_billing_info")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class SubscriptionBillingInfo {
    public static final String JSON_PROPERTY_OUTSTANDING_BALANCE = "outstanding_balance";
    public static final String JSON_PROPERTY_CYCLE_EXECUTIONS = "cycle_executions";
    public static final String JSON_PROPERTY_LAST_PAYMENT = "last_payment";
    public static final String JSON_PROPERTY_NEXT_BILLING_TIME = "next_billing_time";
    public static final String JSON_PROPERTY_FINAL_PAYMENT_TIME = "final_payment_time";
    public static final String JSON_PROPERTY_FAILED_PAYMENTS_COUNT = "failed_payments_count";
    public static final String JSON_PROPERTY_LAST_FAILED_PAYMENT = "last_failed_payment";
    private Money outstandingBalance;
    private List<CycleExecution> cycleExecutions;
    private LastPaymentDetails lastPayment;
    private String nextBillingTime;
    private String finalPaymentTime;
    private Integer failedPaymentsCount;
    private FailedPaymentDetails lastFailedPayment;

    public SubscriptionBillingInfo() {
    }

    @JsonCreator
    public SubscriptionBillingInfo(
            @JsonProperty(JSON_PROPERTY_CYCLE_EXECUTIONS) List<CycleExecution> cycleExecutions,
            @JsonProperty(JSON_PROPERTY_FAILED_PAYMENTS_COUNT) Integer failedPaymentsCount
    ) {
        this();
        this.cycleExecutions = cycleExecutions;
        this.failedPaymentsCount = failedPaymentsCount;
    }

    public SubscriptionBillingInfo outstandingBalance(Money outstandingBalance) {

        this.outstandingBalance = outstandingBalance;
        return this;
    }

    /**
     * Get outstandingBalance
     *
     * @return outstandingBalance
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTSTANDING_BALANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Money getOutstandingBalance() {
        return outstandingBalance;
    }


    @JsonProperty(JSON_PROPERTY_OUTSTANDING_BALANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutstandingBalance(Money outstandingBalance) {
        this.outstandingBalance = outstandingBalance;
    }


    /**
     * The trial and regular billing executions.
     *
     * @return cycleExecutions
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CYCLE_EXECUTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<CycleExecution> getCycleExecutions() {
        return cycleExecutions;
    }


    public SubscriptionBillingInfo lastPayment(LastPaymentDetails lastPayment) {

        this.lastPayment = lastPayment;
        return this;
    }

    /**
     * Get lastPayment
     *
     * @return lastPayment
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LAST_PAYMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public LastPaymentDetails getLastPayment() {
        return lastPayment;
    }


    @JsonProperty(JSON_PROPERTY_LAST_PAYMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLastPayment(LastPaymentDetails lastPayment) {
        this.lastPayment = lastPayment;
    }


    public SubscriptionBillingInfo nextBillingTime(String nextBillingTime) {

        this.nextBillingTime = nextBillingTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return nextBillingTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NEXT_BILLING_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNextBillingTime() {
        return nextBillingTime;
    }


    @JsonProperty(JSON_PROPERTY_NEXT_BILLING_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNextBillingTime(String nextBillingTime) {
        this.nextBillingTime = nextBillingTime;
    }


    public SubscriptionBillingInfo finalPaymentTime(String finalPaymentTime) {

        this.finalPaymentTime = finalPaymentTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return finalPaymentTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FINAL_PAYMENT_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getFinalPaymentTime() {
        return finalPaymentTime;
    }


    @JsonProperty(JSON_PROPERTY_FINAL_PAYMENT_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFinalPaymentTime(String finalPaymentTime) {
        this.finalPaymentTime = finalPaymentTime;
    }


    /**
     * The number of consecutive payment failures. Resets to &#x60;0&#x60; after a successful payment. If this reaches the &#x60;payment_failure_threshold&#x60; value, the subscription updates to the &#x60;SUSPENDED&#x60; state.
     * minimum: 0
     * maximum: 999
     *
     * @return failedPaymentsCount
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_FAILED_PAYMENTS_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getFailedPaymentsCount() {
        return failedPaymentsCount;
    }


    public SubscriptionBillingInfo lastFailedPayment(FailedPaymentDetails lastFailedPayment) {

        this.lastFailedPayment = lastFailedPayment;
        return this;
    }

    /**
     * Get lastFailedPayment
     *
     * @return lastFailedPayment
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LAST_FAILED_PAYMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public FailedPaymentDetails getLastFailedPayment() {
        return lastFailedPayment;
    }


    @JsonProperty(JSON_PROPERTY_LAST_FAILED_PAYMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLastFailedPayment(FailedPaymentDetails lastFailedPayment) {
        this.lastFailedPayment = lastFailedPayment;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionBillingInfo subscriptionBillingInfo = (SubscriptionBillingInfo) o;
        return Objects.equals(this.outstandingBalance, subscriptionBillingInfo.outstandingBalance) &&
                Objects.equals(this.cycleExecutions, subscriptionBillingInfo.cycleExecutions) &&
                Objects.equals(this.lastPayment, subscriptionBillingInfo.lastPayment) &&
                Objects.equals(this.nextBillingTime, subscriptionBillingInfo.nextBillingTime) &&
                Objects.equals(this.finalPaymentTime, subscriptionBillingInfo.finalPaymentTime) &&
                Objects.equals(this.failedPaymentsCount, subscriptionBillingInfo.failedPaymentsCount) &&
                Objects.equals(this.lastFailedPayment, subscriptionBillingInfo.lastFailedPayment);
    }

    @Override
    public int hashCode() {
        return Objects.hash(outstandingBalance, cycleExecutions, lastPayment, nextBillingTime, finalPaymentTime, failedPaymentsCount, lastFailedPayment);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscriptionBillingInfo {\n");
        sb.append("    outstandingBalance: ").append(toIndentedString(outstandingBalance)).append("\n");
        sb.append("    cycleExecutions: ").append(toIndentedString(cycleExecutions)).append("\n");
        sb.append("    lastPayment: ").append(toIndentedString(lastPayment)).append("\n");
        sb.append("    nextBillingTime: ").append(toIndentedString(nextBillingTime)).append("\n");
        sb.append("    finalPaymentTime: ").append(toIndentedString(finalPaymentTime)).append("\n");
        sb.append("    failedPaymentsCount: ").append(toIndentedString(failedPaymentsCount)).append("\n");
        sb.append("    lastFailedPayment: ").append(toIndentedString(lastFailedPayment)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `outstanding_balance` to the URL query string
        if (getOutstandingBalance() != null) {
            joiner.add(getOutstandingBalance().toUrlQueryString(prefix + "outstanding_balance" + suffix));
        }

        // add `cycle_executions` to the URL query string
        if (getCycleExecutions() != null) {
            for (int i = 0; i < getCycleExecutions().size(); i++) {
                if (getCycleExecutions().get(i) != null) {
                    joiner.add(getCycleExecutions().get(i).toUrlQueryString(String.format("%scycle_executions%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `last_payment` to the URL query string
        if (getLastPayment() != null) {
            joiner.add(getLastPayment().toUrlQueryString(prefix + "last_payment" + suffix));
        }

        // add `next_billing_time` to the URL query string
        if (getNextBillingTime() != null) {
            try {
                joiner.add(String.format("%snext_billing_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNextBillingTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `final_payment_time` to the URL query string
        if (getFinalPaymentTime() != null) {
            try {
                joiner.add(String.format("%sfinal_payment_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFinalPaymentTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `failed_payments_count` to the URL query string
        if (getFailedPaymentsCount() != null) {
            try {
                joiner.add(String.format("%sfailed_payments_count%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFailedPaymentsCount()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `last_failed_payment` to the URL query string
        if (getLastFailedPayment() != null) {
            joiner.add(getLastFailedPayment().toUrlQueryString(prefix + "last_failed_payment" + suffix));
        }

        return joiner.toString();
    }

}

