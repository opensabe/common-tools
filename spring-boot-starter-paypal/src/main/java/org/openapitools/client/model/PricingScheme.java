/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The pricing scheme details.
 */
@JsonPropertyOrder({
        PricingScheme.JSON_PROPERTY_VERSION,
        PricingScheme.JSON_PROPERTY_FIXED_PRICE,
        PricingScheme.JSON_PROPERTY_PRICING_MODEL,
        PricingScheme.JSON_PROPERTY_TIERS,
        PricingScheme.JSON_PROPERTY_CREATE_TIME,
        PricingScheme.JSON_PROPERTY_UPDATE_TIME
})
@JsonTypeName("pricing_scheme")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class PricingScheme {
    public static final String JSON_PROPERTY_VERSION = "version";
    public static final String JSON_PROPERTY_FIXED_PRICE = "fixed_price";
    public static final String JSON_PROPERTY_PRICING_MODEL = "pricing_model";
    public static final String JSON_PROPERTY_TIERS = "tiers";
    public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
    public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
    private Integer version;
    private Money fixedPrice;
    private PricingModelEnum pricingModel;
    private List<PricingTier> tiers;
    private String createTime;
    private String updateTime;
    public PricingScheme() {
    }

    @JsonCreator
    public PricingScheme(
            @JsonProperty(JSON_PROPERTY_VERSION) Integer version
    ) {
        this();
        this.version = version;
    }

    /**
     * The version of the pricing scheme.
     * minimum: 0
     * maximum: 999
     *
     * @return version
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getVersion() {
        return version;
    }

    public PricingScheme fixedPrice(Money fixedPrice) {

        this.fixedPrice = fixedPrice;
        return this;
    }

    /**
     * Get fixedPrice
     *
     * @return fixedPrice
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FIXED_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Money getFixedPrice() {
        return fixedPrice;
    }

    @JsonProperty(JSON_PROPERTY_FIXED_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFixedPrice(Money fixedPrice) {
        this.fixedPrice = fixedPrice;
    }

    public PricingScheme pricingModel(PricingModelEnum pricingModel) {

        this.pricingModel = pricingModel;
        return this;
    }

    /**
     * The pricing model for tiered plan. The &#x60;tiers&#x60; parameter is required.
     *
     * @return pricingModel
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PRICING_MODEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PricingModelEnum getPricingModel() {
        return pricingModel;
    }

    @JsonProperty(JSON_PROPERTY_PRICING_MODEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPricingModel(PricingModelEnum pricingModel) {
        this.pricingModel = pricingModel;
    }

    public PricingScheme tiers(List<PricingTier> tiers) {

        this.tiers = tiers;
        return this;
    }

    public PricingScheme addTiersItem(PricingTier tiersItem) {
        if (this.tiers == null) {
            this.tiers = new ArrayList<>();
        }
        this.tiers.add(tiersItem);
        return this;
    }

    /**
     * An array of pricing tiers which are used for billing volume/tiered plans. pricing_model field has to be specified.
     *
     * @return tiers
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TIERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<PricingTier> getTiers() {
        return tiers;
    }

    @JsonProperty(JSON_PROPERTY_TIERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTiers(List<PricingTier> tiers) {
        this.tiers = tiers;
    }

    public PricingScheme createTime(String createTime) {

        this.createTime = createTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCreateTime() {
        return createTime;
    }

    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }

    public PricingScheme updateTime(String updateTime) {

        this.updateTime = updateTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getUpdateTime() {
        return updateTime;
    }

    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUpdateTime(String updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PricingScheme pricingScheme = (PricingScheme) o;
        return Objects.equals(this.version, pricingScheme.version) &&
                Objects.equals(this.fixedPrice, pricingScheme.fixedPrice) &&
                Objects.equals(this.pricingModel, pricingScheme.pricingModel) &&
                Objects.equals(this.tiers, pricingScheme.tiers) &&
                Objects.equals(this.createTime, pricingScheme.createTime) &&
                Objects.equals(this.updateTime, pricingScheme.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(version, fixedPrice, pricingModel, tiers, createTime, updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PricingScheme {\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
        sb.append("    pricingModel: ").append(toIndentedString(pricingModel)).append("\n");
        sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `version` to the URL query string
        if (getVersion() != null) {
            try {
                joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `fixed_price` to the URL query string
        if (getFixedPrice() != null) {
            joiner.add(getFixedPrice().toUrlQueryString(prefix + "fixed_price" + suffix));
        }

        // add `pricing_model` to the URL query string
        if (getPricingModel() != null) {
            try {
                joiner.add(String.format("%spricing_model%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPricingModel()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `tiers` to the URL query string
        if (getTiers() != null) {
            for (int i = 0; i < getTiers().size(); i++) {
                if (getTiers().get(i) != null) {
                    joiner.add(getTiers().get(i).toUrlQueryString(String.format("%stiers%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `create_time` to the URL query string
        if (getCreateTime() != null) {
            try {
                joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `update_time` to the URL query string
        if (getUpdateTime() != null) {
            try {
                joiner.add(String.format("%supdate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

    /**
     * The pricing model for tiered plan. The &#x60;tiers&#x60; parameter is required.
     */
    public enum PricingModelEnum {
        VOLUME("VOLUME"),

        TIERED("TIERED");

        private String value;

        PricingModelEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static PricingModelEnum fromValue(String value) {
            for (PricingModelEnum b : PricingModelEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

