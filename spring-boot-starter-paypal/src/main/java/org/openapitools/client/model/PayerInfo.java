/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ShippingAddress;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The payer information.
 */
@JsonPropertyOrder({
  PayerInfo.JSON_PROPERTY_EMAIL,
  PayerInfo.JSON_PROPERTY_SALUTATION,
  PayerInfo.JSON_PROPERTY_FIRST_NAME,
  PayerInfo.JSON_PROPERTY_MIDDLE_NAME,
  PayerInfo.JSON_PROPERTY_LAST_NAME,
  PayerInfo.JSON_PROPERTY_SUFFIX,
  PayerInfo.JSON_PROPERTY_PAYER_ID,
  PayerInfo.JSON_PROPERTY_BIRTH_DATE,
  PayerInfo.JSON_PROPERTY_TAX_ID,
  PayerInfo.JSON_PROPERTY_TAX_ID_TYPE,
  PayerInfo.JSON_PROPERTY_BILLING_ADDRESS,
  PayerInfo.JSON_PROPERTY_SHIPPING_ADDRESS
})
@JsonTypeName("payer_info")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class PayerInfo {
  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_SALUTATION = "salutation";
  private String salutation;

  public static final String JSON_PROPERTY_FIRST_NAME = "first_name";
  private String firstName;

  public static final String JSON_PROPERTY_MIDDLE_NAME = "middle_name";
  private String middleName;

  public static final String JSON_PROPERTY_LAST_NAME = "last_name";
  private String lastName;

  public static final String JSON_PROPERTY_SUFFIX = "suffix";
  private String suffix;

  public static final String JSON_PROPERTY_PAYER_ID = "payer_id";
  private String payerId;

  public static final String JSON_PROPERTY_BIRTH_DATE = "birth_date";
  private OffsetDateTime birthDate;

  public static final String JSON_PROPERTY_TAX_ID = "tax_id";
  private String taxId;

  /**
   * The payer&#39;s tax ID type. Supported for the PayPal payment method only.
   */
  public enum TaxIdTypeEnum {
    CPF("BR_CPF"),
    
    CNPJ("BR_CNPJ");

    private String value;

    TaxIdTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TaxIdTypeEnum fromValue(String value) {
      for (TaxIdTypeEnum b : TaxIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TAX_ID_TYPE = "tax_id_type";
  private TaxIdTypeEnum taxIdType;

  public static final String JSON_PROPERTY_BILLING_ADDRESS = "billing_address";
  private Address billingAddress;

  public static final String JSON_PROPERTY_SHIPPING_ADDRESS = "shipping_address";
  private ShippingAddress shippingAddress;

  public PayerInfo() {
  }

  @JsonCreator
  public PayerInfo(
    @JsonProperty(JSON_PROPERTY_SALUTATION) String salutation, 
    @JsonProperty(JSON_PROPERTY_FIRST_NAME) String firstName, 
    @JsonProperty(JSON_PROPERTY_MIDDLE_NAME) String middleName, 
    @JsonProperty(JSON_PROPERTY_LAST_NAME) String lastName, 
    @JsonProperty(JSON_PROPERTY_SUFFIX) String suffix, 
    @JsonProperty(JSON_PROPERTY_PAYER_ID) String payerId
  ) {
    this();
    this.salutation = salutation;
    this.firstName = firstName;
    this.middleName = middleName;
    this.lastName = lastName;
    this.suffix = suffix;
    this.payerId = payerId;
  }

  public PayerInfo email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * The payer&#39;s email address. Maximum length is 127 characters.
   * @return email
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(String email) {
    this.email = email;
  }


   /**
   * The payer&#39;s salutation.
   * @return salutation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SALUTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSalutation() {
    return salutation;
  }




   /**
   * The payer&#39;s first name.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstName() {
    return firstName;
  }




   /**
   * The payer&#39;s middle name.
   * @return middleName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMiddleName() {
    return middleName;
  }




   /**
   * The payer&#39;s last name.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastName() {
    return lastName;
  }




   /**
   * The payer&#39;s suffix.
   * @return suffix
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSuffix() {
    return suffix;
  }




   /**
   * The PayPal-assigned encrypted payer ID.
   * @return payerId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayerId() {
    return payerId;
  }




  public PayerInfo birthDate(OffsetDateTime birthDate) {
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The birth date of the payer, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, &#x60;1990-04-12&#x60;.
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIRTH_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getBirthDate() {
    return birthDate;
  }


  @JsonProperty(JSON_PROPERTY_BIRTH_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }


  public PayerInfo taxId(String taxId) {
    
    this.taxId = taxId;
    return this;
  }

   /**
   * The payer&#39;s tax ID. Supported for the PayPal payment method only.
   * @return taxId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxId() {
    return taxId;
  }


  @JsonProperty(JSON_PROPERTY_TAX_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }


  public PayerInfo taxIdType(TaxIdTypeEnum taxIdType) {
    
    this.taxIdType = taxIdType;
    return this;
  }

   /**
   * The payer&#39;s tax ID type. Supported for the PayPal payment method only.
   * @return taxIdType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaxIdTypeEnum getTaxIdType() {
    return taxIdType;
  }


  @JsonProperty(JSON_PROPERTY_TAX_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxIdType(TaxIdTypeEnum taxIdType) {
    this.taxIdType = taxIdType;
  }


  public PayerInfo billingAddress(Address billingAddress) {
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BILLING_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Address getBillingAddress() {
    return billingAddress;
  }


  @JsonProperty(JSON_PROPERTY_BILLING_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public PayerInfo shippingAddress(ShippingAddress shippingAddress) {
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShippingAddress getShippingAddress() {
    return shippingAddress;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayerInfo payerInfo = (PayerInfo) o;
    return Objects.equals(this.email, payerInfo.email) &&
        Objects.equals(this.salutation, payerInfo.salutation) &&
        Objects.equals(this.firstName, payerInfo.firstName) &&
        Objects.equals(this.middleName, payerInfo.middleName) &&
        Objects.equals(this.lastName, payerInfo.lastName) &&
        Objects.equals(this.suffix, payerInfo.suffix) &&
        Objects.equals(this.payerId, payerInfo.payerId) &&
        Objects.equals(this.birthDate, payerInfo.birthDate) &&
        Objects.equals(this.taxId, payerInfo.taxId) &&
        Objects.equals(this.taxIdType, payerInfo.taxIdType) &&
        Objects.equals(this.billingAddress, payerInfo.billingAddress) &&
        Objects.equals(this.shippingAddress, payerInfo.shippingAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, salutation, firstName, middleName, lastName, suffix, payerId, birthDate, taxId, taxIdType, billingAddress, shippingAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayerInfo {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    salutation: ").append(toIndentedString(salutation)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    payerId: ").append(toIndentedString(payerId)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    taxIdType: ").append(toIndentedString(taxIdType)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `email` to the URL query string
    if (getEmail() != null) {
      try {
        joiner.add(String.format("%semail%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmail()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `salutation` to the URL query string
    if (getSalutation() != null) {
      try {
        joiner.add(String.format("%ssalutation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSalutation()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `first_name` to the URL query string
    if (getFirstName() != null) {
      try {
        joiner.add(String.format("%sfirst_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFirstName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `middle_name` to the URL query string
    if (getMiddleName() != null) {
      try {
        joiner.add(String.format("%smiddle_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMiddleName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `last_name` to the URL query string
    if (getLastName() != null) {
      try {
        joiner.add(String.format("%slast_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `suffix` to the URL query string
    if (getSuffix() != null) {
      try {
        joiner.add(String.format("%ssuffix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSuffix()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `payer_id` to the URL query string
    if (getPayerId() != null) {
      try {
        joiner.add(String.format("%spayer_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPayerId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `birth_date` to the URL query string
    if (getBirthDate() != null) {
      try {
        joiner.add(String.format("%sbirth_date%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBirthDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tax_id` to the URL query string
    if (getTaxId() != null) {
      try {
        joiner.add(String.format("%stax_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaxId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tax_id_type` to the URL query string
    if (getTaxIdType() != null) {
      try {
        joiner.add(String.format("%stax_id_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaxIdType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `billing_address` to the URL query string
    if (getBillingAddress() != null) {
      joiner.add(getBillingAddress().toUrlQueryString(prefix + "billing_address" + suffix));
    }

    // add `shipping_address` to the URL query string
    if (getShippingAddress() != null) {
      joiner.add(getShippingAddress().toUrlQueryString(prefix + "shipping_address" + suffix));
    }

    return joiner.toString();
  }

}

