/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PayerAllOf
 */
@JsonPropertyOrder({
        PayerAllOf.JSON_PROPERTY_NAME,
        PayerAllOf.JSON_PROPERTY_PHONE,
        PayerAllOf.JSON_PROPERTY_BIRTH_DATE,
        PayerAllOf.JSON_PROPERTY_TAX_INFO,
        PayerAllOf.JSON_PROPERTY_ADDRESS
})
@JsonTypeName("payer_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class PayerAllOf {
    public static final String JSON_PROPERTY_NAME = "name";
    public static final String JSON_PROPERTY_PHONE = "phone";
    public static final String JSON_PROPERTY_BIRTH_DATE = "birth_date";
    public static final String JSON_PROPERTY_TAX_INFO = "tax_info";
    public static final String JSON_PROPERTY_ADDRESS = "address";
    private Name name;
    private PhoneWithType phone;
    private String birthDate;
    private TaxInfo taxInfo;
    private AddressPortable address;

    public PayerAllOf() {
    }

    public PayerAllOf name(Name name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Name getName() {
        return name;
    }


    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(Name name) {
        this.name = name;
    }


    public PayerAllOf phone(PhoneWithType phone) {

        this.phone = phone;
        return this;
    }

    /**
     * Get phone
     *
     * @return phone
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PHONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PhoneWithType getPhone() {
        return phone;
    }


    @JsonProperty(JSON_PROPERTY_PHONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPhone(PhoneWithType phone) {
        this.phone = phone;
    }


    public PayerAllOf birthDate(String birthDate) {

        this.birthDate = birthDate;
        return this;
    }

    /**
     * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
     *
     * @return birthDate
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BIRTH_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getBirthDate() {
        return birthDate;
    }


    @JsonProperty(JSON_PROPERTY_BIRTH_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBirthDate(String birthDate) {
        this.birthDate = birthDate;
    }


    public PayerAllOf taxInfo(TaxInfo taxInfo) {

        this.taxInfo = taxInfo;
        return this;
    }

    /**
     * Get taxInfo
     *
     * @return taxInfo
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAX_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TaxInfo getTaxInfo() {
        return taxInfo;
    }


    @JsonProperty(JSON_PROPERTY_TAX_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaxInfo(TaxInfo taxInfo) {
        this.taxInfo = taxInfo;
    }


    public PayerAllOf address(AddressPortable address) {

        this.address = address;
        return this;
    }

    /**
     * Get address
     *
     * @return address
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public AddressPortable getAddress() {
        return address;
    }


    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAddress(AddressPortable address) {
        this.address = address;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayerAllOf payerAllOf = (PayerAllOf) o;
        return Objects.equals(this.name, payerAllOf.name) &&
                Objects.equals(this.phone, payerAllOf.phone) &&
                Objects.equals(this.birthDate, payerAllOf.birthDate) &&
                Objects.equals(this.taxInfo, payerAllOf.taxInfo) &&
                Objects.equals(this.address, payerAllOf.address);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, phone, birthDate, taxInfo, address);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PayerAllOf {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
        sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
        sb.append("    taxInfo: ").append(toIndentedString(taxInfo)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(getName().toUrlQueryString(prefix + "name" + suffix));
        }

        // add `phone` to the URL query string
        if (getPhone() != null) {
            joiner.add(getPhone().toUrlQueryString(prefix + "phone" + suffix));
        }

        // add `birth_date` to the URL query string
        if (getBirthDate() != null) {
            try {
                joiner.add(String.format("%sbirth_date%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBirthDate()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `tax_info` to the URL query string
        if (getTaxInfo() != null) {
            joiner.add(getTaxInfo().toUrlQueryString(prefix + "tax_info" + suffix));
        }

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(getAddress().toUrlQueryString(prefix + "address" + suffix));
        }

        return joiner.toString();
    }

}

