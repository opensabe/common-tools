/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds.
 */
@JsonPropertyOrder({
        NetAmountBreakdownItem.JSON_PROPERTY_PAYABLE_AMOUNT,
        NetAmountBreakdownItem.JSON_PROPERTY_CONVERTED_AMOUNT,
        NetAmountBreakdownItem.JSON_PROPERTY_EXCHANGE_RATE
})
@JsonTypeName("net_amount_breakdown_item")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class NetAmountBreakdownItem {
    public static final String JSON_PROPERTY_PAYABLE_AMOUNT = "payable_amount";
    public static final String JSON_PROPERTY_CONVERTED_AMOUNT = "converted_amount";
    public static final String JSON_PROPERTY_EXCHANGE_RATE = "exchange_rate";
    private Money payableAmount;
    private Money convertedAmount;
    private ExchangeRate exchangeRate;

    public NetAmountBreakdownItem() {
    }

    public NetAmountBreakdownItem payableAmount(Money payableAmount) {

        this.payableAmount = payableAmount;
        return this;
    }

    /**
     * Get payableAmount
     *
     * @return payableAmount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYABLE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Money getPayableAmount() {
        return payableAmount;
    }


    @JsonProperty(JSON_PROPERTY_PAYABLE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayableAmount(Money payableAmount) {
        this.payableAmount = payableAmount;
    }


    public NetAmountBreakdownItem convertedAmount(Money convertedAmount) {

        this.convertedAmount = convertedAmount;
        return this;
    }

    /**
     * Get convertedAmount
     *
     * @return convertedAmount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CONVERTED_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Money getConvertedAmount() {
        return convertedAmount;
    }


    @JsonProperty(JSON_PROPERTY_CONVERTED_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConvertedAmount(Money convertedAmount) {
        this.convertedAmount = convertedAmount;
    }


    public NetAmountBreakdownItem exchangeRate(ExchangeRate exchangeRate) {

        this.exchangeRate = exchangeRate;
        return this;
    }

    /**
     * Get exchangeRate
     *
     * @return exchangeRate
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ExchangeRate getExchangeRate() {
        return exchangeRate;
    }


    @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExchangeRate(ExchangeRate exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NetAmountBreakdownItem netAmountBreakdownItem = (NetAmountBreakdownItem) o;
        return Objects.equals(this.payableAmount, netAmountBreakdownItem.payableAmount) &&
                Objects.equals(this.convertedAmount, netAmountBreakdownItem.convertedAmount) &&
                Objects.equals(this.exchangeRate, netAmountBreakdownItem.exchangeRate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(payableAmount, convertedAmount, exchangeRate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NetAmountBreakdownItem {\n");
        sb.append("    payableAmount: ").append(toIndentedString(payableAmount)).append("\n");
        sb.append("    convertedAmount: ").append(toIndentedString(convertedAmount)).append("\n");
        sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `payable_amount` to the URL query string
        if (getPayableAmount() != null) {
            joiner.add(getPayableAmount().toUrlQueryString(prefix + "payable_amount" + suffix));
        }

        // add `converted_amount` to the URL query string
        if (getConvertedAmount() != null) {
            joiner.add(getConvertedAmount().toUrlQueryString(prefix + "converted_amount" + suffix));
        }

        // add `exchange_rate` to the URL query string
        if (getExchangeRate() != null) {
            joiner.add(getExchangeRate().toUrlQueryString(prefix + "exchange_rate" + suffix));
        }

        return joiner.toString();
    }

}

