/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.Capture;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.Refund;
import org.openapitools.client.model.Sale;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The payment-related financial transactions, which include sales, authorizations, captures, and refunds. To show resource details, use the resource ID. For example, to [show details for a related authorization](/docs/api/payments/v1/#authorization_get), use the ID returned in the &#x60;authorization&#x60; object. You can also use the [HATEOAS links](/docs/api/hateoas-links/) for a resource to complete operations for that resource. For example, a &#x60;sale&#x60; object provides a &#x60;refund&#x60; link that enables you to refund the sale.
 */
@JsonPropertyOrder({
  RelatedResources.JSON_PROPERTY_SALE,
  RelatedResources.JSON_PROPERTY_AUTHORIZATION,
  RelatedResources.JSON_PROPERTY_ORDER,
  RelatedResources.JSON_PROPERTY_CAPTURE,
  RelatedResources.JSON_PROPERTY_REFUND
})
@JsonTypeName("related_resources")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class RelatedResources {
  public static final String JSON_PROPERTY_SALE = "sale";
  private Sale sale;

  public static final String JSON_PROPERTY_AUTHORIZATION = "authorization";
  private Authorization authorization;

  public static final String JSON_PROPERTY_ORDER = "order";
  private Order order;

  public static final String JSON_PROPERTY_CAPTURE = "capture";
  private Capture capture;

  public static final String JSON_PROPERTY_REFUND = "refund";
  private Refund refund;

  public RelatedResources() {
  }

  public RelatedResources sale(Sale sale) {
    
    this.sale = sale;
    return this;
  }

   /**
   * Get sale
   * @return sale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Sale getSale() {
    return sale;
  }


  @JsonProperty(JSON_PROPERTY_SALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSale(Sale sale) {
    this.sale = sale;
  }


  public RelatedResources authorization(Authorization authorization) {
    
    this.authorization = authorization;
    return this;
  }

   /**
   * Get authorization
   * @return authorization
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Authorization getAuthorization() {
    return authorization;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorization(Authorization authorization) {
    this.authorization = authorization;
  }


  public RelatedResources order(Order order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Order getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(Order order) {
    this.order = order;
  }


  public RelatedResources capture(Capture capture) {
    
    this.capture = capture;
    return this;
  }

   /**
   * Get capture
   * @return capture
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Capture getCapture() {
    return capture;
  }


  @JsonProperty(JSON_PROPERTY_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapture(Capture capture) {
    this.capture = capture;
  }


  public RelatedResources refund(Refund refund) {
    
    this.refund = refund;
    return this;
  }

   /**
   * Get refund
   * @return refund
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Refund getRefund() {
    return refund;
  }


  @JsonProperty(JSON_PROPERTY_REFUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefund(Refund refund) {
    this.refund = refund;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedResources relatedResources = (RelatedResources) o;
    return Objects.equals(this.sale, relatedResources.sale) &&
        Objects.equals(this.authorization, relatedResources.authorization) &&
        Objects.equals(this.order, relatedResources.order) &&
        Objects.equals(this.capture, relatedResources.capture) &&
        Objects.equals(this.refund, relatedResources.refund);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sale, authorization, order, capture, refund);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedResources {\n");
    sb.append("    sale: ").append(toIndentedString(sale)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    capture: ").append(toIndentedString(capture)).append("\n");
    sb.append("    refund: ").append(toIndentedString(refund)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `sale` to the URL query string
    if (getSale() != null) {
      joiner.add(getSale().toUrlQueryString(prefix + "sale" + suffix));
    }

    // add `authorization` to the URL query string
    if (getAuthorization() != null) {
      joiner.add(getAuthorization().toUrlQueryString(prefix + "authorization" + suffix));
    }

    // add `order` to the URL query string
    if (getOrder() != null) {
      joiner.add(getOrder().toUrlQueryString(prefix + "order" + suffix));
    }

    // add `capture` to the URL query string
    if (getCapture() != null) {
      joiner.add(getCapture().toUrlQueryString(prefix + "capture" + suffix));
    }

    // add `refund` to the URL query string
    if (getRefund() != null) {
      joiner.add(getRefund().toUrlQueryString(prefix + "refund" + suffix));
    }

    return joiner.toString();
  }

}

