/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The create subscription request details.
 */
@JsonPropertyOrder({
        SubscriptionRequestPost.JSON_PROPERTY_PLAN_ID,
        SubscriptionRequestPost.JSON_PROPERTY_START_TIME,
        SubscriptionRequestPost.JSON_PROPERTY_QUANTITY,
        SubscriptionRequestPost.JSON_PROPERTY_SHIPPING_AMOUNT,
        SubscriptionRequestPost.JSON_PROPERTY_SUBSCRIBER,
        SubscriptionRequestPost.JSON_PROPERTY_AUTO_RENEWAL,
        SubscriptionRequestPost.JSON_PROPERTY_APPLICATION_CONTEXT,
        SubscriptionRequestPost.JSON_PROPERTY_CUSTOM_ID,
        SubscriptionRequestPost.JSON_PROPERTY_PLAN
})
@JsonTypeName("subscription_request_post")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class SubscriptionRequestPost {
    public static final String JSON_PROPERTY_PLAN_ID = "plan_id";
    public static final String JSON_PROPERTY_START_TIME = "start_time";
    public static final String JSON_PROPERTY_QUANTITY = "quantity";
    public static final String JSON_PROPERTY_SHIPPING_AMOUNT = "shipping_amount";
    public static final String JSON_PROPERTY_SUBSCRIBER = "subscriber";
    public static final String JSON_PROPERTY_AUTO_RENEWAL = "auto_renewal";
    public static final String JSON_PROPERTY_APPLICATION_CONTEXT = "application_context";
    public static final String JSON_PROPERTY_CUSTOM_ID = "custom_id";
    public static final String JSON_PROPERTY_PLAN = "plan";
    private String planId;
    private String startTime;
    private String quantity;
    private Money shippingAmount;
    private SubscriberRequest subscriber;
    private Boolean autoRenewal = false;
    private ApplicationContext applicationContext;
    private String customId;
    private PlanOverride plan;

    public SubscriptionRequestPost() {
    }

    public SubscriptionRequestPost planId(String planId) {

        this.planId = planId;
        return this;
    }

    /**
     * The ID of the plan.
     *
     * @return planId
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PLAN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getPlanId() {
        return planId;
    }


    @JsonProperty(JSON_PROPERTY_PLAN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPlanId(String planId) {
        this.planId = planId;
    }


    public SubscriptionRequestPost startTime(String startTime) {

        this.startTime = startTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return startTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_START_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStartTime() {
        return startTime;
    }


    @JsonProperty(JSON_PROPERTY_START_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }


    public SubscriptionRequestPost quantity(String quantity) {

        this.quantity = quantity;
        return this;
    }

    /**
     * The quantity of the product in the subscription.
     *
     * @return quantity
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getQuantity() {
        return quantity;
    }


    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuantity(String quantity) {
        this.quantity = quantity;
    }


    public SubscriptionRequestPost shippingAmount(Money shippingAmount) {

        this.shippingAmount = shippingAmount;
        return this;
    }

    /**
     * Get shippingAmount
     *
     * @return shippingAmount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Money getShippingAmount() {
        return shippingAmount;
    }


    @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShippingAmount(Money shippingAmount) {
        this.shippingAmount = shippingAmount;
    }


    public SubscriptionRequestPost subscriber(SubscriberRequest subscriber) {

        this.subscriber = subscriber;
        return this;
    }

    /**
     * Get subscriber
     *
     * @return subscriber
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUBSCRIBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public SubscriberRequest getSubscriber() {
        return subscriber;
    }


    @JsonProperty(JSON_PROPERTY_SUBSCRIBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubscriber(SubscriberRequest subscriber) {
        this.subscriber = subscriber;
    }


    public SubscriptionRequestPost autoRenewal(Boolean autoRenewal) {

        this.autoRenewal = autoRenewal;
        return this;
    }

    /**
     * DEPRECATED. Indicates whether the subscription auto-renews after the billing cycles complete.
     *
     * @return autoRenewal
     * @deprecated
     **/
    @Deprecated
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AUTO_RENEWAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getAutoRenewal() {
        return autoRenewal;
    }


    @JsonProperty(JSON_PROPERTY_AUTO_RENEWAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAutoRenewal(Boolean autoRenewal) {
        this.autoRenewal = autoRenewal;
    }


    public SubscriptionRequestPost applicationContext(ApplicationContext applicationContext) {

        this.applicationContext = applicationContext;
        return this;
    }

    /**
     * Get applicationContext
     *
     * @return applicationContext
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPLICATION_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ApplicationContext getApplicationContext() {
        return applicationContext;
    }


    @JsonProperty(JSON_PROPERTY_APPLICATION_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApplicationContext(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }


    public SubscriptionRequestPost customId(String customId) {

        this.customId = customId;
        return this;
    }

    /**
     * The custom id for the subscription. Can be invoice id.
     *
     * @return customId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CUSTOM_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCustomId() {
        return customId;
    }


    @JsonProperty(JSON_PROPERTY_CUSTOM_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustomId(String customId) {
        this.customId = customId;
    }


    public SubscriptionRequestPost plan(PlanOverride plan) {

        this.plan = plan;
        return this;
    }

    /**
     * Get plan
     *
     * @return plan
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PLAN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PlanOverride getPlan() {
        return plan;
    }


    @JsonProperty(JSON_PROPERTY_PLAN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlan(PlanOverride plan) {
        this.plan = plan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionRequestPost subscriptionRequestPost = (SubscriptionRequestPost) o;
        return Objects.equals(this.planId, subscriptionRequestPost.planId) &&
                Objects.equals(this.startTime, subscriptionRequestPost.startTime) &&
                Objects.equals(this.quantity, subscriptionRequestPost.quantity) &&
                Objects.equals(this.shippingAmount, subscriptionRequestPost.shippingAmount) &&
                Objects.equals(this.subscriber, subscriptionRequestPost.subscriber) &&
                Objects.equals(this.autoRenewal, subscriptionRequestPost.autoRenewal) &&
                Objects.equals(this.applicationContext, subscriptionRequestPost.applicationContext) &&
                Objects.equals(this.customId, subscriptionRequestPost.customId) &&
                Objects.equals(this.plan, subscriptionRequestPost.plan);
    }

    @Override
    public int hashCode() {
        return Objects.hash(planId, startTime, quantity, shippingAmount, subscriber, autoRenewal, applicationContext, customId, plan);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscriptionRequestPost {\n");
        sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
        sb.append("    subscriber: ").append(toIndentedString(subscriber)).append("\n");
        sb.append("    autoRenewal: ").append(toIndentedString(autoRenewal)).append("\n");
        sb.append("    applicationContext: ").append(toIndentedString(applicationContext)).append("\n");
        sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
        sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `plan_id` to the URL query string
        if (getPlanId() != null) {
            try {
                joiner.add(String.format("%splan_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlanId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `start_time` to the URL query string
        if (getStartTime() != null) {
            try {
                joiner.add(String.format("%sstart_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `quantity` to the URL query string
        if (getQuantity() != null) {
            try {
                joiner.add(String.format("%squantity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuantity()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `shipping_amount` to the URL query string
        if (getShippingAmount() != null) {
            joiner.add(getShippingAmount().toUrlQueryString(prefix + "shipping_amount" + suffix));
        }

        // add `subscriber` to the URL query string
        if (getSubscriber() != null) {
            joiner.add(getSubscriber().toUrlQueryString(prefix + "subscriber" + suffix));
        }

        // add `auto_renewal` to the URL query string
        if (getAutoRenewal() != null) {
            try {
                joiner.add(String.format("%sauto_renewal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAutoRenewal()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `application_context` to the URL query string
        if (getApplicationContext() != null) {
            joiner.add(getApplicationContext().toUrlQueryString(prefix + "application_context" + suffix));
        }

        // add `custom_id` to the URL query string
        if (getCustomId() != null) {
            try {
                joiner.add(String.format("%scustom_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `plan` to the URL query string
        if (getPlan() != null) {
            joiner.add(getPlan().toUrlQueryString(prefix + "plan" + suffix));
        }

        return joiner.toString();
    }

}

