/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The Fraud Management Filter (FMF) details that are applied to the payment that result in an accept, deny, or pending action. Returned in a payment response only if the merchant has enabled FMF in the profile settings and one of the fraud filters was triggered based on those settings. For more information, see [Fraud Management Filters Summary](/docs/classic/fmf/integration-guide/FMFSummary/).
 */
@JsonPropertyOrder({
  FmfDetails.JSON_PROPERTY_FILTER_TYPE,
  FmfDetails.JSON_PROPERTY_FILTER_ID,
  FmfDetails.JSON_PROPERTY_NAME,
  FmfDetails.JSON_PROPERTY_DESCRIPTION
})
@JsonTypeName("fmf_details")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class FmfDetails {
  /**
   * The filter type.
   */
  public enum FilterTypeEnum {
    ACCEPT("ACCEPT"),
    
    PENDING("PENDING"),
    
    DENY("DENY"),
    
    REPORT("REPORT");

    private String value;

    FilterTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterTypeEnum fromValue(String value) {
      for (FilterTypeEnum b : FilterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILTER_TYPE = "filter_type";
  private FilterTypeEnum filterType;

  /**
   * The filter ID.
   */
  public enum FilterIdEnum {
    AVS_NO_MATCH("AVS_NO_MATCH"),
    
    AVS_PARTIAL_MATCH("AVS_PARTIAL_MATCH"),
    
    AVS_UNAVAILABLE_OR_UNSUPPORTED("AVS_UNAVAILABLE_OR_UNSUPPORTED"),
    
    CARD_SECURITY_CODE_MISMATCH("CARD_SECURITY_CODE_MISMATCH"),
    
    MAXIMUM_TRANSACTION_AMOUNT("MAXIMUM_TRANSACTION_AMOUNT"),
    
    UNCONFIRMED_ADDRESS("UNCONFIRMED_ADDRESS"),
    
    COUNTRY_MONITOR("COUNTRY_MONITOR"),
    
    LARGE_ORDER_NUMBER("LARGE_ORDER_NUMBER"),
    
    BILLING_OR_SHIPPING_ADDRESS_MISMATCH("BILLING_OR_SHIPPING_ADDRESS_MISMATCH"),
    
    RISKY_ZIP_CODE("RISKY_ZIP_CODE"),
    
    SUSPECTED_FREIGHT_FORWARDER_CHECK("SUSPECTED_FREIGHT_FORWARDER_CHECK"),
    
    TOTAL_PURCHASE_PRICE_MINIMUM("TOTAL_PURCHASE_PRICE_MINIMUM"),
    
    IP_ADDRESS_VELOCITY("IP_ADDRESS_VELOCITY"),
    
    RISKY_EMAIL_ADDRESS_DOMAIN_CHECK("RISKY_EMAIL_ADDRESS_DOMAIN_CHECK"),
    
    RISKY_BANK_IDENTIFICATION_NUMBER_CHECK("RISKY_BANK_IDENTIFICATION_NUMBER_CHECK"),
    
    RISKY_IP_ADDRESS_RANGE("RISKY_IP_ADDRESS_RANGE"),
    
    PAYPAL_FRAUD_MODEL("PAYPAL_FRAUD_MODEL");

    private String value;

    FilterIdEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterIdEnum fromValue(String value) {
      for (FilterIdEnum b : FilterIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILTER_ID = "filter_id";
  private FilterIdEnum filterId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public FmfDetails() {
  }

  @JsonCreator
  public FmfDetails(
    @JsonProperty(JSON_PROPERTY_FILTER_TYPE) FilterTypeEnum filterType, 
    @JsonProperty(JSON_PROPERTY_FILTER_ID) FilterIdEnum filterId, 
    @JsonProperty(JSON_PROPERTY_NAME) String name, 
    @JsonProperty(JSON_PROPERTY_DESCRIPTION) String description
  ) {
    this();
    this.filterType = filterType;
    this.filterId = filterId;
    this.name = name;
    this.description = description;
  }

   /**
   * The filter type.
   * @return filterType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FilterTypeEnum getFilterType() {
    return filterType;
  }




   /**
   * The filter ID.
   * @return filterId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILTER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FilterIdEnum getFilterId() {
    return filterId;
  }




   /**
   * The filter name.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }




   /**
   * The filter description.
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FmfDetails fmfDetails = (FmfDetails) o;
    return Objects.equals(this.filterType, fmfDetails.filterType) &&
        Objects.equals(this.filterId, fmfDetails.filterId) &&
        Objects.equals(this.name, fmfDetails.name) &&
        Objects.equals(this.description, fmfDetails.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterType, filterId, name, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FmfDetails {\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    filterId: ").append(toIndentedString(filterId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `filter_type` to the URL query string
    if (getFilterType() != null) {
      try {
        joiner.add(String.format("%sfilter_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilterType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `filter_id` to the URL query string
    if (getFilterId() != null) {
      try {
        joiner.add(String.format("%sfilter_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilterId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

