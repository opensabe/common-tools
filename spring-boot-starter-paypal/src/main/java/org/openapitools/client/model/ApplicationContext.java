/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The application context. Set these properties to customize the payment flow experience for your customers.
 */
@JsonPropertyOrder({
        ApplicationContext.JSON_PROPERTY_BRAND_NAME,
        ApplicationContext.JSON_PROPERTY_LOCALE,
        ApplicationContext.JSON_PROPERTY_LANDING_PAGE,
        ApplicationContext.JSON_PROPERTY_SHIPPING_PREFERENCE,
        ApplicationContext.JSON_PROPERTY_USER_ACTION,
        ApplicationContext.JSON_PROPERTY_PREFERRED_PAYMENT_SOURCE,
        ApplicationContext.JSON_PROPERTY_PAYMENT_PATTERN
})
@JsonTypeName("application_context")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class ApplicationContext {
    public static final String JSON_PROPERTY_BRAND_NAME = "brand_name";
    public static final String JSON_PROPERTY_LOCALE = "locale";
    public static final String JSON_PROPERTY_LANDING_PAGE = "landing_page";
    public static final String JSON_PROPERTY_SHIPPING_PREFERENCE = "shipping_preference";
    public static final String JSON_PROPERTY_USER_ACTION = "user_action";
    public static final String JSON_PROPERTY_PREFERRED_PAYMENT_SOURCE = "preferred_payment_source";
    public static final String JSON_PROPERTY_PAYMENT_PATTERN = "payment_pattern";
    private String brandName;
    private String locale;
    private String landingPage;
    private ShippingPreferenceEnum shippingPreference = ShippingPreferenceEnum.GET_FROM_FILE;
    private String userAction;
    private PaymentSource preferredPaymentSource;
    private PaymentPattern paymentPattern;
    public ApplicationContext() {
    }

    public ApplicationContext brandName(String brandName) {

        this.brandName = brandName;
        return this;
    }

    /**
     * A label that overrides the business name in the merchant&#39;s PayPal account on the PayPal checkout pages.
     *
     * @return brandName
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BRAND_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getBrandName() {
        return brandName;
    }

    @JsonProperty(JSON_PROPERTY_BRAND_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBrandName(String brandName) {
        this.brandName = brandName;
    }

    public ApplicationContext locale(String locale) {

        this.locale = locale;
        return this;
    }

    /**
     * The locale of pages that the PayPal payment experience displays. Please refer [here](/docs/api/reference/locale-codes/#localize-the-checkout-experience) for list of supported local codes.  Defaulted to en_US if not provided or invalid.
     *
     * @return locale
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LOCALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getLocale() {
        return locale;
    }

    @JsonProperty(JSON_PROPERTY_LOCALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLocale(String locale) {
        this.locale = locale;
    }

    public ApplicationContext landingPage(String landingPage) {

        this.landingPage = landingPage;
        return this;
    }

    /**
     * The type of landing page to show on the PayPal site for customer checkout. To use the non-PayPal account landing page, set to &#x60;Billing&#x60;. To use the PayPal account log in landing page, set to &#x60;Login&#x60;.
     *
     * @return landingPage
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LANDING_PAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getLandingPage() {
        return landingPage;
    }

    @JsonProperty(JSON_PROPERTY_LANDING_PAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLandingPage(String landingPage) {
        this.landingPage = landingPage;
    }

    public ApplicationContext shippingPreference(ShippingPreferenceEnum shippingPreference) {

        this.shippingPreference = shippingPreference;
        return this;
    }

    /**
     * The shipping preference.
     *
     * @return shippingPreference
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SHIPPING_PREFERENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ShippingPreferenceEnum getShippingPreference() {
        return shippingPreference;
    }

    @JsonProperty(JSON_PROPERTY_SHIPPING_PREFERENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShippingPreference(ShippingPreferenceEnum shippingPreference) {
        this.shippingPreference = shippingPreference;
    }

    public ApplicationContext userAction(String userAction) {

        this.userAction = userAction;
        return this;
    }

    /**
     * The user action. Presents the customer with either the &lt;strong&gt;Continue&lt;/strong&gt; or &lt;strong&gt;Pay Now&lt;/strong&gt; checkout flow:&lt;table&gt;&lt;thead&gt;&lt;tr valign&#x3D;\&quot;top\&quot; align&#x3D;\&quot;left\&quot;&gt;&lt;th&gt;Flow&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr valign&#x3D;\&quot;top\&quot; align&#x3D;\&quot;left\&quot;&gt;&lt;td&gt;&lt;strong&gt;Pay Now&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;user_action&#x3D;commit&lt;/code&gt;&lt;/td&gt;&lt;td&gt;After the customer is redirected to the PayPal payment page, shows the &lt;strong&gt;Pay Now&lt;/strong&gt; button.&lt;br/&gt;&lt;br/&gt;Use this option when you know the final amount when checkout is initiated and you want to process the payment immediately when the customer clicks &lt;strong&gt;Pay Now&lt;/strong&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr valign&#x3D;\&quot;top\&quot; align&#x3D;\&quot;left\&quot;&gt;&lt;td&gt;&lt;strong&gt;Continue&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;code&gt;user_action&#x3D;continue&lt;/code&gt;&lt;/td&gt;&lt;td&gt;After the customer is redirected to the PayPal payment page, shows the &lt;strong&gt;Continue&lt;/strong&gt; button.&lt;br/&gt;&lt;br/&gt;Use this option when you do not know the final amount when you initiate the checkout flow and you want to redirect the customer to the merchant page without processing the payment.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     *
     * @return userAction
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USER_ACTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getUserAction() {
        return userAction;
    }

    @JsonProperty(JSON_PROPERTY_USER_ACTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUserAction(String userAction) {
        this.userAction = userAction;
    }

    public ApplicationContext preferredPaymentSource(PaymentSource preferredPaymentSource) {

        this.preferredPaymentSource = preferredPaymentSource;
        return this;
    }

    /**
     * Get preferredPaymentSource
     *
     * @return preferredPaymentSource
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PREFERRED_PAYMENT_SOURCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PaymentSource getPreferredPaymentSource() {
        return preferredPaymentSource;
    }

    @JsonProperty(JSON_PROPERTY_PREFERRED_PAYMENT_SOURCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPreferredPaymentSource(PaymentSource preferredPaymentSource) {
        this.preferredPaymentSource = preferredPaymentSource;
    }

    public ApplicationContext paymentPattern(PaymentPattern paymentPattern) {

        this.paymentPattern = paymentPattern;
        return this;
    }

    /**
     * Get paymentPattern
     *
     * @return paymentPattern
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYMENT_PATTERN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PaymentPattern getPaymentPattern() {
        return paymentPattern;
    }

    @JsonProperty(JSON_PROPERTY_PAYMENT_PATTERN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaymentPattern(PaymentPattern paymentPattern) {
        this.paymentPattern = paymentPattern;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationContext applicationContext = (ApplicationContext) o;
        return Objects.equals(this.brandName, applicationContext.brandName) &&
                Objects.equals(this.locale, applicationContext.locale) &&
                Objects.equals(this.landingPage, applicationContext.landingPage) &&
                Objects.equals(this.shippingPreference, applicationContext.shippingPreference) &&
                Objects.equals(this.userAction, applicationContext.userAction) &&
                Objects.equals(this.preferredPaymentSource, applicationContext.preferredPaymentSource) &&
                Objects.equals(this.paymentPattern, applicationContext.paymentPattern);
    }

    @Override
    public int hashCode() {
        return Objects.hash(brandName, locale, landingPage, shippingPreference, userAction, preferredPaymentSource, paymentPattern);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApplicationContext {\n");
        sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
        sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
        sb.append("    landingPage: ").append(toIndentedString(landingPage)).append("\n");
        sb.append("    shippingPreference: ").append(toIndentedString(shippingPreference)).append("\n");
        sb.append("    userAction: ").append(toIndentedString(userAction)).append("\n");
        sb.append("    preferredPaymentSource: ").append(toIndentedString(preferredPaymentSource)).append("\n");
        sb.append("    paymentPattern: ").append(toIndentedString(paymentPattern)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `brand_name` to the URL query string
        if (getBrandName() != null) {
            try {
                joiner.add(String.format("%sbrand_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBrandName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `locale` to the URL query string
        if (getLocale() != null) {
            try {
                joiner.add(String.format("%slocale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLocale()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `landing_page` to the URL query string
        if (getLandingPage() != null) {
            try {
                joiner.add(String.format("%slanding_page%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLandingPage()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `shipping_preference` to the URL query string
        if (getShippingPreference() != null) {
            try {
                joiner.add(String.format("%sshipping_preference%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShippingPreference()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `user_action` to the URL query string
        if (getUserAction() != null) {
            try {
                joiner.add(String.format("%suser_action%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserAction()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `preferred_payment_source` to the URL query string
        if (getPreferredPaymentSource() != null) {
            try {
                joiner.add(String.format("%spreferred_payment_source%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreferredPaymentSource()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `payment_pattern` to the URL query string
        if (getPaymentPattern() != null) {
            try {
                joiner.add(String.format("%spayment_pattern%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentPattern()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

    /**
     * The shipping preference.
     */
    public enum ShippingPreferenceEnum {
        NO_SHIPPING("NO_SHIPPING"),

        GET_FROM_FILE("GET_FROM_FILE"),

        SET_PROVIDED_ADDRESS("SET_PROVIDED_ADDRESS");

        private String value;

        ShippingPreferenceEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ShippingPreferenceEnum fromValue(String value) {
            for (ShippingPreferenceEnum b : ShippingPreferenceEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

