/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The regular and trial execution details for a billing cycle.
 */
@JsonPropertyOrder({
        CycleExecution.JSON_PROPERTY_TENURE_TYPE,
        CycleExecution.JSON_PROPERTY_SEQUENCE,
        CycleExecution.JSON_PROPERTY_CYCLES_COMPLETED,
        CycleExecution.JSON_PROPERTY_CYCLES_REMAINING,
        CycleExecution.JSON_PROPERTY_CURRENT_PRICING_SCHEME_VERSION,
        CycleExecution.JSON_PROPERTY_TOTAL_CYCLES
})
@JsonTypeName("cycle_execution")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class CycleExecution {
    public static final String JSON_PROPERTY_TENURE_TYPE = "tenure_type";
    public static final String JSON_PROPERTY_SEQUENCE = "sequence";
    public static final String JSON_PROPERTY_CYCLES_COMPLETED = "cycles_completed";
    public static final String JSON_PROPERTY_CYCLES_REMAINING = "cycles_remaining";
    public static final String JSON_PROPERTY_CURRENT_PRICING_SCHEME_VERSION = "current_pricing_scheme_version";
    public static final String JSON_PROPERTY_TOTAL_CYCLES = "total_cycles";
    private TenureTypeEnum tenureType;
    private Integer sequence;
    private Integer cyclesCompleted;
    private Integer cyclesRemaining;
    private Integer currentPricingSchemeVersion;
    private Integer totalCycles;
    public CycleExecution() {
    }

    @JsonCreator
    public CycleExecution(
            @JsonProperty(JSON_PROPERTY_TENURE_TYPE) TenureTypeEnum tenureType,
            @JsonProperty(JSON_PROPERTY_CYCLES_COMPLETED) Integer cyclesCompleted,
            @JsonProperty(JSON_PROPERTY_CYCLES_REMAINING) Integer cyclesRemaining,
            @JsonProperty(JSON_PROPERTY_CURRENT_PRICING_SCHEME_VERSION) Integer currentPricingSchemeVersion,
            @JsonProperty(JSON_PROPERTY_TOTAL_CYCLES) Integer totalCycles
    ) {
        this();
        this.tenureType = tenureType;
        this.cyclesCompleted = cyclesCompleted;
        this.cyclesRemaining = cyclesRemaining;
        this.currentPricingSchemeVersion = currentPricingSchemeVersion;
        this.totalCycles = totalCycles;
    }

    /**
     * The type of the billing cycle.
     *
     * @return tenureType
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TENURE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TenureTypeEnum getTenureType() {
        return tenureType;
    }

    public CycleExecution sequence(Integer sequence) {

        this.sequence = sequence;
        return this;
    }

    /**
     * The order in which to run this cycle among other billing cycles.
     * minimum: 0
     * maximum: 99
     *
     * @return sequence
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SEQUENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getSequence() {
        return sequence;
    }

    @JsonProperty(JSON_PROPERTY_SEQUENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSequence(Integer sequence) {
        this.sequence = sequence;
    }

    /**
     * The number of billing cycles that have completed.
     * minimum: 0
     * maximum: 9999
     *
     * @return cyclesCompleted
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CYCLES_COMPLETED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getCyclesCompleted() {
        return cyclesCompleted;
    }

    /**
     * For a finite billing cycle, cycles_remaining is the number of remaining cycles. For an infinite billing cycle, cycles_remaining is set as 0.
     * minimum: 0
     * maximum: 9999
     *
     * @return cyclesRemaining
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CYCLES_REMAINING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getCyclesRemaining() {
        return cyclesRemaining;
    }

    /**
     * The active pricing scheme version for the billing cycle.
     * minimum: 1
     * maximum: 99
     *
     * @return currentPricingSchemeVersion
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CURRENT_PRICING_SCHEME_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getCurrentPricingSchemeVersion() {
        return currentPricingSchemeVersion;
    }

    /**
     * The number of times this billing cycle gets executed. Trial billing cycles can only be executed a finite number of times (value between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;999&lt;/code&gt; for &lt;code&gt;total_cycles&lt;/code&gt;). Regular billing cycles can be executed infinite times (value of &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;total_cycles&lt;/code&gt;) or a finite number of times (value between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;999&lt;/code&gt; for &lt;code&gt;total_cycles&lt;/code&gt;).
     * minimum: 0
     * maximum: 999
     *
     * @return totalCycles
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TOTAL_CYCLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getTotalCycles() {
        return totalCycles;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CycleExecution cycleExecution = (CycleExecution) o;
        return Objects.equals(this.tenureType, cycleExecution.tenureType) &&
                Objects.equals(this.sequence, cycleExecution.sequence) &&
                Objects.equals(this.cyclesCompleted, cycleExecution.cyclesCompleted) &&
                Objects.equals(this.cyclesRemaining, cycleExecution.cyclesRemaining) &&
                Objects.equals(this.currentPricingSchemeVersion, cycleExecution.currentPricingSchemeVersion) &&
                Objects.equals(this.totalCycles, cycleExecution.totalCycles);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tenureType, sequence, cyclesCompleted, cyclesRemaining, currentPricingSchemeVersion, totalCycles);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CycleExecution {\n");
        sb.append("    tenureType: ").append(toIndentedString(tenureType)).append("\n");
        sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
        sb.append("    cyclesCompleted: ").append(toIndentedString(cyclesCompleted)).append("\n");
        sb.append("    cyclesRemaining: ").append(toIndentedString(cyclesRemaining)).append("\n");
        sb.append("    currentPricingSchemeVersion: ").append(toIndentedString(currentPricingSchemeVersion)).append("\n");
        sb.append("    totalCycles: ").append(toIndentedString(totalCycles)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `tenure_type` to the URL query string
        if (getTenureType() != null) {
            try {
                joiner.add(String.format("%stenure_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTenureType()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `sequence` to the URL query string
        if (getSequence() != null) {
            try {
                joiner.add(String.format("%ssequence%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSequence()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `cycles_completed` to the URL query string
        if (getCyclesCompleted() != null) {
            try {
                joiner.add(String.format("%scycles_completed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCyclesCompleted()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `cycles_remaining` to the URL query string
        if (getCyclesRemaining() != null) {
            try {
                joiner.add(String.format("%scycles_remaining%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCyclesRemaining()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `current_pricing_scheme_version` to the URL query string
        if (getCurrentPricingSchemeVersion() != null) {
            try {
                joiner.add(String.format("%scurrent_pricing_scheme_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrentPricingSchemeVersion()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `total_cycles` to the URL query string
        if (getTotalCycles() != null) {
            try {
                joiner.add(String.format("%stotal_cycles%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalCycles()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

    /**
     * The type of the billing cycle.
     */
    public enum TenureTypeEnum {
        REGULAR("REGULAR"),

        TRIAL("TRIAL");

        private String value;

        TenureTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static TenureTypeEnum fromValue(String value) {
            for (TenureTypeEnum b : TenureTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

