/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The plan details.
 */
@JsonPropertyOrder({
        Plan.JSON_PROPERTY_ID,
        Plan.JSON_PROPERTY_PRODUCT_ID,
        Plan.JSON_PROPERTY_NAME,
        Plan.JSON_PROPERTY_STATUS,
        Plan.JSON_PROPERTY_DESCRIPTION,
        Plan.JSON_PROPERTY_BILLING_CYCLES,
        Plan.JSON_PROPERTY_PAYMENT_PREFERENCES,
        Plan.JSON_PROPERTY_TAXES,
        Plan.JSON_PROPERTY_QUANTITY_SUPPORTED,
        Plan.JSON_PROPERTY_CREATE_TIME,
        Plan.JSON_PROPERTY_UPDATE_TIME,
        Plan.JSON_PROPERTY_LINKS
})
@JsonTypeName("plan")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class Plan {
    public static final String JSON_PROPERTY_ID = "id";
    public static final String JSON_PROPERTY_PRODUCT_ID = "product_id";
    public static final String JSON_PROPERTY_NAME = "name";
    public static final String JSON_PROPERTY_STATUS = "status";
    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    public static final String JSON_PROPERTY_BILLING_CYCLES = "billing_cycles";
    public static final String JSON_PROPERTY_PAYMENT_PREFERENCES = "payment_preferences";
    public static final String JSON_PROPERTY_TAXES = "taxes";
    public static final String JSON_PROPERTY_QUANTITY_SUPPORTED = "quantity_supported";
    public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
    public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
    public static final String JSON_PROPERTY_LINKS = "links";
    private String id;
    private String productId;
    private String name;
    private StatusEnum status;
    private String description;
    private List<BillingCycle> billingCycles;
    private PaymentPreferences paymentPreferences;
    private Taxes taxes;
    private Boolean quantitySupported = false;
    private String createTime;
    private String updateTime;
    private List<LinkDescription> links;
    public Plan() {
    }

    @JsonCreator
    public Plan(
            @JsonProperty(JSON_PROPERTY_ID) String id,
            @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
    ) {
        this();
        this.id = id;
        this.links = links;
    }

    /**
     * The unique PayPal-generated ID for the plan.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getId() {
        return id;
    }

    public Plan productId(String productId) {

        this.productId = productId;
        return this;
    }

    /**
     * The ID for the product.
     *
     * @return productId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getProductId() {
        return productId;
    }

    @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProductId(String productId) {
        this.productId = productId;
    }

    public Plan name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The plan name.
     *
     * @return name
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public Plan status(StatusEnum status) {

        this.status = status;
        return this;
    }

    /**
     * The plan status.
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public Plan description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The detailed description of the plan.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public Plan billingCycles(List<BillingCycle> billingCycles) {

        this.billingCycles = billingCycles;
        return this;
    }

    public Plan addBillingCyclesItem(BillingCycle billingCyclesItem) {
        if (this.billingCycles == null) {
            this.billingCycles = new ArrayList<>();
        }
        this.billingCycles.add(billingCyclesItem);
        return this;
    }

    /**
     * An array of billing cycles for trial billing and regular billing. A plan can have at most two trial cycles and only one regular cycle.
     *
     * @return billingCycles
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BILLING_CYCLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<BillingCycle> getBillingCycles() {
        return billingCycles;
    }

    @JsonProperty(JSON_PROPERTY_BILLING_CYCLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBillingCycles(List<BillingCycle> billingCycles) {
        this.billingCycles = billingCycles;
    }

    public Plan paymentPreferences(PaymentPreferences paymentPreferences) {

        this.paymentPreferences = paymentPreferences;
        return this;
    }

    /**
     * Get paymentPreferences
     *
     * @return paymentPreferences
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYMENT_PREFERENCES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PaymentPreferences getPaymentPreferences() {
        return paymentPreferences;
    }

    @JsonProperty(JSON_PROPERTY_PAYMENT_PREFERENCES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaymentPreferences(PaymentPreferences paymentPreferences) {
        this.paymentPreferences = paymentPreferences;
    }

    public Plan taxes(Taxes taxes) {

        this.taxes = taxes;
        return this;
    }

    /**
     * Get taxes
     *
     * @return taxes
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAXES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Taxes getTaxes() {
        return taxes;
    }

    @JsonProperty(JSON_PROPERTY_TAXES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaxes(Taxes taxes) {
        this.taxes = taxes;
    }

    public Plan quantitySupported(Boolean quantitySupported) {

        this.quantitySupported = quantitySupported;
        return this;
    }

    /**
     * Indicates whether you can subscribe to this plan by providing a quantity for the goods or service.
     *
     * @return quantitySupported
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUANTITY_SUPPORTED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getQuantitySupported() {
        return quantitySupported;
    }

    @JsonProperty(JSON_PROPERTY_QUANTITY_SUPPORTED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuantitySupported(Boolean quantitySupported) {
        this.quantitySupported = quantitySupported;
    }

    public Plan createTime(String createTime) {

        this.createTime = createTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCreateTime() {
        return createTime;
    }

    @JsonProperty(JSON_PROPERTY_CREATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }

    public Plan updateTime(String updateTime) {

        this.updateTime = updateTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getUpdateTime() {
        return updateTime;
    }

    @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUpdateTime(String updateTime) {
        this.updateTime = updateTime;
    }

    /**
     * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
     *
     * @return links
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<LinkDescription> getLinks() {
        return links;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Plan plan = (Plan) o;
        return Objects.equals(this.id, plan.id) &&
                Objects.equals(this.productId, plan.productId) &&
                Objects.equals(this.name, plan.name) &&
                Objects.equals(this.status, plan.status) &&
                Objects.equals(this.description, plan.description) &&
                Objects.equals(this.billingCycles, plan.billingCycles) &&
                Objects.equals(this.paymentPreferences, plan.paymentPreferences) &&
                Objects.equals(this.taxes, plan.taxes) &&
                Objects.equals(this.quantitySupported, plan.quantitySupported) &&
                Objects.equals(this.createTime, plan.createTime) &&
                Objects.equals(this.updateTime, plan.updateTime) &&
                Objects.equals(this.links, plan.links);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, productId, name, status, description, billingCycles, paymentPreferences, taxes, quantitySupported, createTime, updateTime, links);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Plan {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    billingCycles: ").append(toIndentedString(billingCycles)).append("\n");
        sb.append("    paymentPreferences: ").append(toIndentedString(paymentPreferences)).append("\n");
        sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
        sb.append("    quantitySupported: ").append(toIndentedString(quantitySupported)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            try {
                joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `product_id` to the URL query string
        if (getProductId() != null) {
            try {
                joiner.add(String.format("%sproduct_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProductId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `name` to the URL query string
        if (getName() != null) {
            try {
                joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            try {
                joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `description` to the URL query string
        if (getDescription() != null) {
            try {
                joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `billing_cycles` to the URL query string
        if (getBillingCycles() != null) {
            for (int i = 0; i < getBillingCycles().size(); i++) {
                if (getBillingCycles().get(i) != null) {
                    joiner.add(getBillingCycles().get(i).toUrlQueryString(String.format("%sbilling_cycles%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `payment_preferences` to the URL query string
        if (getPaymentPreferences() != null) {
            joiner.add(getPaymentPreferences().toUrlQueryString(prefix + "payment_preferences" + suffix));
        }

        // add `taxes` to the URL query string
        if (getTaxes() != null) {
            joiner.add(getTaxes().toUrlQueryString(prefix + "taxes" + suffix));
        }

        // add `quantity_supported` to the URL query string
        if (getQuantitySupported() != null) {
            try {
                joiner.add(String.format("%squantity_supported%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuantitySupported()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `create_time` to the URL query string
        if (getCreateTime() != null) {
            try {
                joiner.add(String.format("%screate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `update_time` to the URL query string
        if (getUpdateTime() != null) {
            try {
                joiner.add(String.format("%supdate_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `links` to the URL query string
        if (getLinks() != null) {
            for (int i = 0; i < getLinks().size(); i++) {
                if (getLinks().get(i) != null) {
                    joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }

    /**
     * The plan status.
     */
    public enum StatusEnum {
        CREATED("CREATED"),

        INACTIVE("INACTIVE"),

        ACTIVE("ACTIVE");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

