/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Money;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The details for the failed payment of the subscription.
 */
@JsonPropertyOrder({
  FailedPaymentDetails.JSON_PROPERTY_AMOUNT,
  FailedPaymentDetails.JSON_PROPERTY_TIME,
  FailedPaymentDetails.JSON_PROPERTY_REASON_CODE,
  FailedPaymentDetails.JSON_PROPERTY_NEXT_PAYMENT_RETRY_TIME
})
@JsonTypeName("failed_payment_details")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class FailedPaymentDetails {
  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Money amount;

  public static final String JSON_PROPERTY_TIME = "time";
  private String time;

  /**
   * The reason code for the payment failure.
   */
  public enum ReasonCodeEnum {
    PAYMENT_DENIED("PAYMENT_DENIED"),
    
    INTERNAL_SERVER_ERROR("INTERNAL_SERVER_ERROR"),
    
    PAYEE_ACCOUNT_RESTRICTED("PAYEE_ACCOUNT_RESTRICTED"),
    
    PAYER_ACCOUNT_RESTRICTED("PAYER_ACCOUNT_RESTRICTED"),
    
    PAYER_CANNOT_PAY("PAYER_CANNOT_PAY"),
    
    SENDING_LIMIT_EXCEEDED("SENDING_LIMIT_EXCEEDED"),
    
    TRANSACTION_RECEIVING_LIMIT_EXCEEDED("TRANSACTION_RECEIVING_LIMIT_EXCEEDED"),
    
    CURRENCY_MISMATCH("CURRENCY_MISMATCH");

    private String value;

    ReasonCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReasonCodeEnum fromValue(String value) {
      for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REASON_CODE = "reason_code";
  private ReasonCodeEnum reasonCode;

  public static final String JSON_PROPERTY_NEXT_PAYMENT_RETRY_TIME = "next_payment_retry_time";
  private String nextPaymentRetryTime;

  public FailedPaymentDetails() {
  }

  @JsonCreator
  public FailedPaymentDetails(
    @JsonProperty(JSON_PROPERTY_REASON_CODE) ReasonCodeEnum reasonCode
  ) {
    this();
    this.reasonCode = reasonCode;
  }

  public FailedPaymentDetails amount(Money amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Money getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(Money amount) {
    this.amount = amount;
  }


  public FailedPaymentDetails time(String time) {
    
    this.time = time;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return time
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTime() {
    return time;
  }


  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTime(String time) {
    this.time = time;
  }


   /**
   * The reason code for the payment failure.
   * @return reasonCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }




  public FailedPaymentDetails nextPaymentRetryTime(String nextPaymentRetryTime) {
    
    this.nextPaymentRetryTime = nextPaymentRetryTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return nextPaymentRetryTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEXT_PAYMENT_RETRY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNextPaymentRetryTime() {
    return nextPaymentRetryTime;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_PAYMENT_RETRY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNextPaymentRetryTime(String nextPaymentRetryTime) {
    this.nextPaymentRetryTime = nextPaymentRetryTime;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailedPaymentDetails failedPaymentDetails = (FailedPaymentDetails) o;
    return Objects.equals(this.amount, failedPaymentDetails.amount) &&
        Objects.equals(this.time, failedPaymentDetails.time) &&
        Objects.equals(this.reasonCode, failedPaymentDetails.reasonCode) &&
        Objects.equals(this.nextPaymentRetryTime, failedPaymentDetails.nextPaymentRetryTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, time, reasonCode, nextPaymentRetryTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailedPaymentDetails {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    nextPaymentRetryTime: ").append(toIndentedString(nextPaymentRetryTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `time` to the URL query string
    if (getTime() != null) {
      try {
        joiner.add(String.format("%stime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reason_code` to the URL query string
    if (getReasonCode() != null) {
      try {
        joiner.add(String.format("%sreason_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReasonCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `next_payment_retry_time` to the URL query string
    if (getNextPaymentRetryTime() != null) {
      try {
        joiner.add(String.format("%snext_payment_retry_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNextPaymentRetryTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

