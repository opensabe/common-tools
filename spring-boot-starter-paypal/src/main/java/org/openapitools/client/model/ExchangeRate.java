/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The exchange rate that determines the amount to convert from one currency to another currency.
 */
@JsonPropertyOrder({
        ExchangeRate.JSON_PROPERTY_SOURCE_CURRENCY,
        ExchangeRate.JSON_PROPERTY_TARGET_CURRENCY,
        ExchangeRate.JSON_PROPERTY_VALUE
})
@JsonTypeName("exchange_rate")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class ExchangeRate {
    public static final String JSON_PROPERTY_SOURCE_CURRENCY = "source_currency";
    public static final String JSON_PROPERTY_TARGET_CURRENCY = "target_currency";
    public static final String JSON_PROPERTY_VALUE = "value";
    private String sourceCurrency;
    private String targetCurrency;
    private String value;

    public ExchangeRate() {
    }

    public ExchangeRate sourceCurrency(String sourceCurrency) {

        this.sourceCurrency = sourceCurrency;
        return this;
    }

    /**
     * The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
     *
     * @return sourceCurrency
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSourceCurrency() {
        return sourceCurrency;
    }


    @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSourceCurrency(String sourceCurrency) {
        this.sourceCurrency = sourceCurrency;
    }


    public ExchangeRate targetCurrency(String targetCurrency) {

        this.targetCurrency = targetCurrency;
        return this;
    }

    /**
     * The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
     *
     * @return targetCurrency
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TARGET_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getTargetCurrency() {
        return targetCurrency;
    }


    @JsonProperty(JSON_PROPERTY_TARGET_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTargetCurrency(String targetCurrency) {
        this.targetCurrency = targetCurrency;
    }


    public ExchangeRate value(String value) {

        this.value = value;
        return this;
    }

    /**
     * The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point.
     *
     * @return value
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getValue() {
        return value;
    }


    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValue(String value) {
        this.value = value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeRate exchangeRate = (ExchangeRate) o;
        return Objects.equals(this.sourceCurrency, exchangeRate.sourceCurrency) &&
                Objects.equals(this.targetCurrency, exchangeRate.targetCurrency) &&
                Objects.equals(this.value, exchangeRate.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceCurrency, targetCurrency, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeRate {\n");
        sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
        sb.append("    targetCurrency: ").append(toIndentedString(targetCurrency)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `source_currency` to the URL query string
        if (getSourceCurrency() != null) {
            try {
                joiner.add(String.format("%ssource_currency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceCurrency()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `target_currency` to the URL query string
        if (getTargetCurrency() != null) {
            try {
                joiner.add(String.format("%starget_currency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTargetCurrency()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `value` to the URL query string
        if (getValue() != null) {
            try {
                joiner.add(String.format("%svalue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValue()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}

