/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The request to update the quantity of the product or service in a subscription. You can also use this method to switch the plan and update the &#x60;shipping_amount&#x60; and &#x60;shipping_address&#x60; values for the subscription. This type of update requires the buyer&#39;s consent.
 */
@JsonPropertyOrder({
        SubscriptionReviseRequest.JSON_PROPERTY_PLAN_ID,
        SubscriptionReviseRequest.JSON_PROPERTY_QUANTITY,
        SubscriptionReviseRequest.JSON_PROPERTY_SHIPPING_AMOUNT,
        SubscriptionReviseRequest.JSON_PROPERTY_SHIPPING_ADDRESS,
        SubscriptionReviseRequest.JSON_PROPERTY_APPLICATION_CONTEXT,
        SubscriptionReviseRequest.JSON_PROPERTY_PLAN
})
@JsonTypeName("subscription_revise_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class SubscriptionReviseRequest {
    public static final String JSON_PROPERTY_PLAN_ID = "plan_id";
    public static final String JSON_PROPERTY_QUANTITY = "quantity";
    public static final String JSON_PROPERTY_SHIPPING_AMOUNT = "shipping_amount";
    public static final String JSON_PROPERTY_SHIPPING_ADDRESS = "shipping_address";
    public static final String JSON_PROPERTY_APPLICATION_CONTEXT = "application_context";
    public static final String JSON_PROPERTY_PLAN = "plan";
    private String planId;
    private String quantity;
    private Money shippingAmount;
    private ShippingDetail shippingAddress;
    private ApplicationContext applicationContext;
    private PlanOverride plan;

    public SubscriptionReviseRequest() {
    }

    public SubscriptionReviseRequest planId(String planId) {

        this.planId = planId;
        return this;
    }

    /**
     * The unique PayPal-generated ID for the plan.
     *
     * @return planId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PLAN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPlanId() {
        return planId;
    }


    @JsonProperty(JSON_PROPERTY_PLAN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlanId(String planId) {
        this.planId = planId;
    }


    public SubscriptionReviseRequest quantity(String quantity) {

        this.quantity = quantity;
        return this;
    }

    /**
     * The quantity of the product or service in the subscription.
     *
     * @return quantity
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getQuantity() {
        return quantity;
    }


    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuantity(String quantity) {
        this.quantity = quantity;
    }


    public SubscriptionReviseRequest shippingAmount(Money shippingAmount) {

        this.shippingAmount = shippingAmount;
        return this;
    }

    /**
     * Get shippingAmount
     *
     * @return shippingAmount
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Money getShippingAmount() {
        return shippingAmount;
    }


    @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShippingAmount(Money shippingAmount) {
        this.shippingAmount = shippingAmount;
    }


    public SubscriptionReviseRequest shippingAddress(ShippingDetail shippingAddress) {

        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Get shippingAddress
     *
     * @return shippingAddress
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ShippingDetail getShippingAddress() {
        return shippingAddress;
    }


    @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShippingAddress(ShippingDetail shippingAddress) {
        this.shippingAddress = shippingAddress;
    }


    public SubscriptionReviseRequest applicationContext(ApplicationContext applicationContext) {

        this.applicationContext = applicationContext;
        return this;
    }

    /**
     * Get applicationContext
     *
     * @return applicationContext
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPLICATION_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ApplicationContext getApplicationContext() {
        return applicationContext;
    }


    @JsonProperty(JSON_PROPERTY_APPLICATION_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApplicationContext(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }


    public SubscriptionReviseRequest plan(PlanOverride plan) {

        this.plan = plan;
        return this;
    }

    /**
     * Get plan
     *
     * @return plan
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PLAN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PlanOverride getPlan() {
        return plan;
    }


    @JsonProperty(JSON_PROPERTY_PLAN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlan(PlanOverride plan) {
        this.plan = plan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionReviseRequest subscriptionReviseRequest = (SubscriptionReviseRequest) o;
        return Objects.equals(this.planId, subscriptionReviseRequest.planId) &&
                Objects.equals(this.quantity, subscriptionReviseRequest.quantity) &&
                Objects.equals(this.shippingAmount, subscriptionReviseRequest.shippingAmount) &&
                Objects.equals(this.shippingAddress, subscriptionReviseRequest.shippingAddress) &&
                Objects.equals(this.applicationContext, subscriptionReviseRequest.applicationContext) &&
                Objects.equals(this.plan, subscriptionReviseRequest.plan);
    }

    @Override
    public int hashCode() {
        return Objects.hash(planId, quantity, shippingAmount, shippingAddress, applicationContext, plan);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscriptionReviseRequest {\n");
        sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
        sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
        sb.append("    applicationContext: ").append(toIndentedString(applicationContext)).append("\n");
        sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `plan_id` to the URL query string
        if (getPlanId() != null) {
            try {
                joiner.add(String.format("%splan_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlanId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `quantity` to the URL query string
        if (getQuantity() != null) {
            try {
                joiner.add(String.format("%squantity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuantity()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `shipping_amount` to the URL query string
        if (getShippingAmount() != null) {
            joiner.add(getShippingAmount().toUrlQueryString(prefix + "shipping_amount" + suffix));
        }

        // add `shipping_address` to the URL query string
        if (getShippingAddress() != null) {
            joiner.add(getShippingAddress().toUrlQueryString(prefix + "shipping_address" + suffix));
        }

        // add `application_context` to the URL query string
        if (getApplicationContext() != null) {
            joiner.add(getApplicationContext().toUrlQueryString(prefix + "application_context" + suffix));
        }

        // add `plan` to the URL query string
        if (getPlan() != null) {
            joiner.add(getPlan().toUrlQueryString(prefix + "plan" + suffix));
        }

        return joiner.toString();
    }

}

