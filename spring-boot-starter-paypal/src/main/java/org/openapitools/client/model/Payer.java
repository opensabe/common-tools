/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.
 *
 * The version of the OpenAPI document: 1.12
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The payer. The payer funds the payment.
 */
@JsonPropertyOrder({
        Payer.JSON_PROPERTY_PAYMENT_METHOD,
        Payer.JSON_PROPERTY_STATUS,
        Payer.JSON_PROPERTY_FUNDING_INSTRUMENTS,
        Payer.JSON_PROPERTY_PAYER_INFO
})
@JsonTypeName("payer")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:56:12.691299337Z[Atlantic/Reykjavik]")
public class Payer {
    public static final String JSON_PROPERTY_PAYMENT_METHOD = "payment_method";
    public static final String JSON_PROPERTY_STATUS = "status";
    public static final String JSON_PROPERTY_FUNDING_INSTRUMENTS = "funding_instruments";
    public static final String JSON_PROPERTY_PAYER_INFO = "payer_info";
    private PaymentMethodEnum paymentMethod;
    private StatusEnum status;
    private List<FundingInstrument> fundingInstruments;
    private PayerInfo payerInfo;

    public Payer() {
    }
    @JsonCreator
    public Payer(
            @JsonProperty(JSON_PROPERTY_STATUS) StatusEnum status
    ) {
        this();
        this.status = status;
    }

    public Payer paymentMethod(PaymentMethodEnum paymentMethod) {

        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The payment method.
     *
     * @return paymentMethod
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PaymentMethodEnum getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    /**
     * The status of payer&#39;s PayPal account.
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StatusEnum getStatus() {
        return status;
    }

    public Payer fundingInstruments(List<FundingInstrument> fundingInstruments) {

        this.fundingInstruments = fundingInstruments;
        return this;
    }

    public Payer addFundingInstrumentsItem(FundingInstrument fundingInstrumentsItem) {
        if (this.fundingInstruments == null) {
            this.fundingInstruments = new ArrayList<>();
        }
        this.fundingInstruments.add(fundingInstrumentsItem);
        return this;
    }

    /**
     * An array of a single funding instrument for the current payment. Valid only and required for the credit card payment method. The array must include either a &#x60;credit_card&#x60; or &#x60;credit_card_token&#x60; object. If the array contains more than one instrument, the payment is declined.
     *
     * @return fundingInstruments
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FUNDING_INSTRUMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<FundingInstrument> getFundingInstruments() {
        return fundingInstruments;
    }

    @JsonProperty(JSON_PROPERTY_FUNDING_INSTRUMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFundingInstruments(List<FundingInstrument> fundingInstruments) {
        this.fundingInstruments = fundingInstruments;
    }

    public Payer payerInfo(PayerInfo payerInfo) {

        this.payerInfo = payerInfo;
        return this;
    }

    /**
     * Get payerInfo
     *
     * @return payerInfo
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYER_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public PayerInfo getPayerInfo() {
        return payerInfo;
    }

    @JsonProperty(JSON_PROPERTY_PAYER_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayerInfo(PayerInfo payerInfo) {
        this.payerInfo = payerInfo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Payer payer = (Payer) o;
        return Objects.equals(this.paymentMethod, payer.paymentMethod) &&
                Objects.equals(this.status, payer.status) &&
                Objects.equals(this.fundingInstruments, payer.fundingInstruments) &&
                Objects.equals(this.payerInfo, payer.payerInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(paymentMethod, status, fundingInstruments, payerInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Payer {\n");
        sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    fundingInstruments: ").append(toIndentedString(fundingInstruments)).append("\n");
        sb.append("    payerInfo: ").append(toIndentedString(payerInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `payment_method` to the URL query string
        if (getPaymentMethod() != null) {
            try {
                joiner.add(String.format("%spayment_method%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentMethod()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            try {
                joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `funding_instruments` to the URL query string
        if (getFundingInstruments() != null) {
            for (int i = 0; i < getFundingInstruments().size(); i++) {
                if (getFundingInstruments().get(i) != null) {
                    joiner.add(getFundingInstruments().get(i).toUrlQueryString(String.format("%sfunding_instruments%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `payer_info` to the URL query string
        if (getPayerInfo() != null) {
            joiner.add(getPayerInfo().toUrlQueryString(prefix + "payer_info" + suffix));
        }

        return joiner.toString();
    }

    /**
     * The payment method.
     */
    public enum PaymentMethodEnum {
        CREDIT_CARD("credit_card"),

        PAYPAL("paypal"),

        PAY_UPON_INVOICE("pay_upon_invoice"),

        CARRIER("carrier"),

        ALTERNATE_PAYMENT("alternate_payment"),

        BANK("bank");

        private String value;

        PaymentMethodEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static PaymentMethodEnum fromValue(String value) {
            for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * The status of payer&#39;s PayPal account.
     */
    public enum StatusEnum {
        VERIFIED("VERIFIED"),

        UNVERIFIED("UNVERIFIED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

