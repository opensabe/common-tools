/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Subscriptions
 * You can use billing plans and subscriptions to create subscriptions that process recurring PayPal payments for physical or digital goods, or services. A plan includes pricing and billing cycle information that defines the amount and frequency of charge for a subscription. You can also define a fixed plan, such as a $5 basic plan or a volume- or graduated-based plan with pricing tiers based on the quantity purchased. For more information, see <a href=\"/docs/subscriptions/\">Subscriptions Overview</a>.
 *
 * The version of the OpenAPI document: 1.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The subscription status details.
 */
@JsonPropertyOrder({
        SubscriptionStatus.JSON_PROPERTY_STATUS,
        SubscriptionStatus.JSON_PROPERTY_STATUS_CHANGE_NOTE,
        SubscriptionStatus.JSON_PROPERTY_STATUS_UPDATE_TIME
})
@JsonTypeName("subscription_status")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T11:30:41.643502082Z[Atlantic/Reykjavik]")
public class SubscriptionStatus {
    public static final String JSON_PROPERTY_STATUS = "status";
    public static final String JSON_PROPERTY_STATUS_CHANGE_NOTE = "status_change_note";
    public static final String JSON_PROPERTY_STATUS_UPDATE_TIME = "status_update_time";
    private StatusEnum status;
    private String statusChangeNote;
    private String statusUpdateTime;
    public SubscriptionStatus() {
    }

    public SubscriptionStatus status(StatusEnum status) {

        this.status = status;
        return this;
    }

    /**
     * The status of the subscription.
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public SubscriptionStatus statusChangeNote(String statusChangeNote) {

        this.statusChangeNote = statusChangeNote;
        return this;
    }

    /**
     * The reason or notes for the status of the subscription.
     *
     * @return statusChangeNote
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATUS_CHANGE_NOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStatusChangeNote() {
        return statusChangeNote;
    }

    @JsonProperty(JSON_PROPERTY_STATUS_CHANGE_NOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatusChangeNote(String statusChangeNote) {
        this.statusChangeNote = statusChangeNote;
    }

    public SubscriptionStatus statusUpdateTime(String statusUpdateTime) {

        this.statusUpdateTime = statusUpdateTime;
        return this;
    }

    /**
     * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
     *
     * @return statusUpdateTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATUS_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStatusUpdateTime() {
        return statusUpdateTime;
    }

    @JsonProperty(JSON_PROPERTY_STATUS_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatusUpdateTime(String statusUpdateTime) {
        this.statusUpdateTime = statusUpdateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionStatus subscriptionStatus = (SubscriptionStatus) o;
        return Objects.equals(this.status, subscriptionStatus.status) &&
                Objects.equals(this.statusChangeNote, subscriptionStatus.statusChangeNote) &&
                Objects.equals(this.statusUpdateTime, subscriptionStatus.statusUpdateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(status, statusChangeNote, statusUpdateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscriptionStatus {\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    statusChangeNote: ").append(toIndentedString(statusChangeNote)).append("\n");
        sb.append("    statusUpdateTime: ").append(toIndentedString(statusUpdateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `status` to the URL query string
        if (getStatus() != null) {
            try {
                joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `status_change_note` to the URL query string
        if (getStatusChangeNote() != null) {
            try {
                joiner.add(String.format("%sstatus_change_note%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatusChangeNote()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `status_update_time` to the URL query string
        if (getStatusUpdateTime() != null) {
            try {
                joiner.add(String.format("%sstatus_update_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatusUpdateTime()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

    /**
     * The status of the subscription.
     */
    public enum StatusEnum {
        APPROVAL_PENDING("APPROVAL_PENDING"),

        APPROVED("APPROVED"),

        ACTIVE("ACTIVE"),

        SUSPENDED("SUSPENDED"),

        CANCELLED("CANCELLED"),

        EXPIRED("EXPIRED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

