/*
 * Copyright 2025 opensabe-tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.LinkDescription;
import org.openapitools.client.model.MerchantPayableBreakdown;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.PayeeBase;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * RefundAllOf
 */
@JsonPropertyOrder({
  RefundAllOf.JSON_PROPERTY_ID,
  RefundAllOf.JSON_PROPERTY_AMOUNT,
  RefundAllOf.JSON_PROPERTY_INVOICE_ID,
  RefundAllOf.JSON_PROPERTY_CUSTOM_ID,
  RefundAllOf.JSON_PROPERTY_ACQUIRER_REFERENCE_NUMBER,
  RefundAllOf.JSON_PROPERTY_NOTE_TO_PAYER,
  RefundAllOf.JSON_PROPERTY_SELLER_PAYABLE_BREAKDOWN,
  RefundAllOf.JSON_PROPERTY_PAYER,
  RefundAllOf.JSON_PROPERTY_LINKS
})
@JsonTypeName("refund_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-11T03:52:37.374153451Z[Atlantic/Reykjavik]")
public class RefundAllOf {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Money amount;

  public static final String JSON_PROPERTY_INVOICE_ID = "invoice_id";
  private String invoiceId;

  public static final String JSON_PROPERTY_CUSTOM_ID = "custom_id";
  private String customId;

  public static final String JSON_PROPERTY_ACQUIRER_REFERENCE_NUMBER = "acquirer_reference_number";
  private String acquirerReferenceNumber;

  public static final String JSON_PROPERTY_NOTE_TO_PAYER = "note_to_payer";
  private String noteToPayer;

  public static final String JSON_PROPERTY_SELLER_PAYABLE_BREAKDOWN = "seller_payable_breakdown";
  private MerchantPayableBreakdown sellerPayableBreakdown;

  public static final String JSON_PROPERTY_PAYER = "payer";
  private PayeeBase payer;

  public static final String JSON_PROPERTY_LINKS = "links";
  private List<LinkDescription> links;

  public RefundAllOf() {
  }

  @JsonCreator
  public RefundAllOf(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_INVOICE_ID) String invoiceId, 
    @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYER) String noteToPayer, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
  ) {
    this();
    this.id = id;
    this.invoiceId = invoiceId;
    this.noteToPayer = noteToPayer;
    this.links = links;
  }

   /**
   * The PayPal-generated ID for the refund.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public RefundAllOf amount(Money amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Money amount) {
    this.amount = amount;
  }


   /**
   * The API caller-provided external invoice number for this order. Appears in both the payer&#39;s transaction history and the emails that the payer receives.
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceId() {
    return invoiceId;
  }




  public RefundAllOf customId(String customId) {
    
    this.customId = customId;
    return this;
  }

   /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @return customId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomId() {
    return customId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public RefundAllOf acquirerReferenceNumber(String acquirerReferenceNumber) {
    
    this.acquirerReferenceNumber = acquirerReferenceNumber;
    return this;
  }

   /**
   * Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
   * @return acquirerReferenceNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACQUIRER_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcquirerReferenceNumber() {
    return acquirerReferenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACQUIRER_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquirerReferenceNumber(String acquirerReferenceNumber) {
    this.acquirerReferenceNumber = acquirerReferenceNumber;
  }


   /**
   * The reason for the refund. Appears in both the payer&#39;s transaction history and the emails that the payer receives.
   * @return noteToPayer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTE_TO_PAYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNoteToPayer() {
    return noteToPayer;
  }




  public RefundAllOf sellerPayableBreakdown(MerchantPayableBreakdown sellerPayableBreakdown) {
    
    this.sellerPayableBreakdown = sellerPayableBreakdown;
    return this;
  }

   /**
   * Get sellerPayableBreakdown
   * @return sellerPayableBreakdown
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELLER_PAYABLE_BREAKDOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MerchantPayableBreakdown getSellerPayableBreakdown() {
    return sellerPayableBreakdown;
  }


  @JsonProperty(JSON_PROPERTY_SELLER_PAYABLE_BREAKDOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSellerPayableBreakdown(MerchantPayableBreakdown sellerPayableBreakdown) {
    this.sellerPayableBreakdown = sellerPayableBreakdown;
  }


  public RefundAllOf payer(PayeeBase payer) {
    
    this.payer = payer;
    return this;
  }

   /**
   * Get payer
   * @return payer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PayeeBase getPayer() {
    return payer;
  }


  @JsonProperty(JSON_PROPERTY_PAYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayer(PayeeBase payer) {
    this.payer = payer;
  }


   /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @return links
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkDescription> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundAllOf refundAllOf = (RefundAllOf) o;
    return Objects.equals(this.id, refundAllOf.id) &&
        Objects.equals(this.amount, refundAllOf.amount) &&
        Objects.equals(this.invoiceId, refundAllOf.invoiceId) &&
        Objects.equals(this.customId, refundAllOf.customId) &&
        Objects.equals(this.acquirerReferenceNumber, refundAllOf.acquirerReferenceNumber) &&
        Objects.equals(this.noteToPayer, refundAllOf.noteToPayer) &&
        Objects.equals(this.sellerPayableBreakdown, refundAllOf.sellerPayableBreakdown) &&
        Objects.equals(this.payer, refundAllOf.payer) &&
        Objects.equals(this.links, refundAllOf.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, amount, invoiceId, customId, acquirerReferenceNumber, noteToPayer, sellerPayableBreakdown, payer, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    acquirerReferenceNumber: ").append(toIndentedString(acquirerReferenceNumber)).append("\n");
    sb.append("    noteToPayer: ").append(toIndentedString(noteToPayer)).append("\n");
    sb.append("    sellerPayableBreakdown: ").append(toIndentedString(sellerPayableBreakdown)).append("\n");
    sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `invoice_id` to the URL query string
    if (getInvoiceId() != null) {
      try {
        joiner.add(String.format("%sinvoice_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvoiceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `custom_id` to the URL query string
    if (getCustomId() != null) {
      try {
        joiner.add(String.format("%scustom_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `acquirer_reference_number` to the URL query string
    if (getAcquirerReferenceNumber() != null) {
      try {
        joiner.add(String.format("%sacquirer_reference_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAcquirerReferenceNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `note_to_payer` to the URL query string
    if (getNoteToPayer() != null) {
      try {
        joiner.add(String.format("%snote_to_payer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNoteToPayer()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seller_payable_breakdown` to the URL query string
    if (getSellerPayableBreakdown() != null) {
      joiner.add(getSellerPayableBreakdown().toUrlQueryString(prefix + "seller_payable_breakdown" + suffix));
    }

    // add `payer` to the URL query string
    if (getPayer() != null) {
      joiner.add(getPayer().toUrlQueryString(prefix + "payer" + suffix));
    }

    // add `links` to the URL query string
    if (getLinks() != null) {
      for (int i = 0; i < getLinks().size(); i++) {
        if (getLinks().get(i) != null) {
          joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

